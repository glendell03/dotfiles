{"id":"07b8f89d-8854-4a69-8e95-37b1eee5a61f","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n  staffProcedure,\n} from \"../trpc\";\nimport { type Prisma } from \"@prisma/client\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return studio;\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return studio;\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        return await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          return tx.studio.delete({\n            where: { id: input.studioId },\n          });\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios,\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"INSTRUCTOR\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        return memberships;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"INSTRUCTOR\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        return member;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"INSTRUCTOR\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        return await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Remove a member from a studio - special case that needs custom logic\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Option for regular members to remove themselves\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get all members of a studio - using staffProcedure which ensures the user is at least a staff member\n  getMembers: staffProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"INSTRUCTOR\", \"STAFF\"]).optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        return members;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n});\n```\n\n\n    You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.\n    \n        ### Objective\n        - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.\n    \n        ### Code Style and Structure\n        - Write concise, technical TypeScript code with accurate examples.\n        - Use functional and declarative programming patterns; avoid classes.\n        - Favor iteration and modularization over code duplication.\n        - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).\n        - Structure files with exported components, subcomponents, helpers, static content, and types.\n        - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).\n    \n        ### Optimization and Best Practices\n        - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.\n        - Implement dynamic imports for code splitting and optimization.\n        - Use responsive design with a mobile-first approach.\n        - Optimize images: use WebP format, include size data, implement lazy loading.\n    \n        ### Error Handling and Validation\n        - Prioritize error handling and edge cases:\n          - Use early returns for error conditions.\n          - Implement guard clauses to handle preconditions and invalid states early.\n          - Use custom error types for consistent error handling.\n    \n        ### UI and Styling\n        - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.\n        - Implement consistent design and responsive patterns across platforms.\n    \n        ### State Management and Data Fetching\n        - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.\n        - Implement validation using Zod for schema validation.\n    \n        ### Security and Performance\n        - Implement proper error handling, user input validation, and secure coding practices.\n        - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.\n    \n        ### Testing and Documentation\n        - Write unit tests for components using Jest and React Testing Library.\n        - Provide clear and concise comments for complex logic.\n        - Use JSDoc comments for functions and components to improve IDE intellisense.\n    \n        ### Methodology\n        1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.\n        2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.\n        3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.\n    \n        **Process**:\n        1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.\n        2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.\n        3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.\n        4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.\n        5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.\n        \n```prisma dance-book-app/prisma/schema.prisma\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nmodel Profile {\n  id     String @id @default(uuid()) @db.Uuid\n  authId String @unique @db.Uuid\n\n  // Relationships\n  studioMembers StudioMember[]\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n}\n\nmodel Studio {\n  id          String  @id @default(uuid()) @db.Uuid\n  slug        String  @unique @db.VarChar(100)\n  name        String  @db.VarChar(100)\n  description String? @db.Text\n  address     String  @db.VarChar(255)\n  city        String  @db.VarChar(100)\n  state       String  @db.VarChar(100)\n  postalCode  String  @db.VarChar(20)\n  country     String  @db.Char(2)\n  logo        String? @db.VarChar(255)\n\n  isActive Boolean @default(true)\n\n  openingHours Json? @db.JsonB // Store hours of operation as JSON\n\n  // Relationships\n  members StudioMember[]\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Indexes\n  @@index([city, country])\n  @@index([isActive])\n  @@index([slug])\n}\n\nenum StudioRole {\n  OWNER\n  ADMIN\n  INSTRUCTOR\n  STAFF\n}\n\nmodel StudioMember {\n  id String @id @default(uuid()) @db.Uuid\n\n  // Relationship fields\n  profileId String  @db.Uuid\n  studioId  String  @db.Uuid\n  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n  studio    Studio  @relation(fields: [studioId], references: [id], onDelete: Cascade)\n\n  // Role and permissions\n  role StudioRole @default(STAFF)\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Unique constraint to prevent duplicate memberships\n  @@unique([profileId, studioId])\n  // Indexes for performance\n  @@index([profileId])\n  @@index([studioId])\n  @@index([role])\n}\n```\n\nin the schema we have the logo and the opening hours. as a ui/ux designer and a frontend developer can you design and code it.\n```tsx dance-book-app/src/app/(private)/setup/new-studio-form.tsx\n\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { countries } from \"countries-list\";\nimport { api } from \"~/trpc/react\";\nimport { slugify } from \"~/lib/slugify\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"~/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"~/components/ui/popover\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"~/components/ui/card\";\nimport { useRef, useState, useMemo } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { FileUploader } from \"~/components/file-upload\";\n\n// Format countries data for select dropdown with proper typing\ntype CountryOption = {\n  code: string;\n  name: string;\n  flag: string;\n};\n\nconst studioFormSchema = z.object({\n  name: z.string().min(3, \"Studio name must be at least 3 characters\").max(100),\n  slug: z\n    .string()\n    .min(3, \"Slug must be at least 3 characters\")\n    .max(100)\n    .regex(\n      /^[a-z0-9-]+$/,\n      \"Slug can only contain lowercase letters, numbers, and hyphens\",\n    ),\n  description: z.string().optional(),\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State/Province is required\"),\n  postalCode: z.string().min(2, \"Postal code is required\"),\n  country: z.string().length(2, \"Please select a country\"),\n});\n\ntype FormData = z.infer<typeof studioFormSchema>;\n\n// Create a manually typed country flag mapping function\nfunction getCountryEmoji(countryCode: string): string {\n  const codePoints = countryCode\n    .toUpperCase()\n    .split(\"\")\n    .map((char) => 127397 + char.charCodeAt(0));\n  return String.fromCodePoint(...codePoints);\n}\n\nexport default function NewStudioForm() {\n  const router = useRouter();\n  const slugManuallyEditedRef = useRef(false);\n  const [open, setOpen] = useState(false);\n\n  // Cast the countries object to a properly typed record for TypeScript\n  const typedCountries = countries as Record<string, { name: string }>;\n\n  // Memoize the country options to improve performance\n  const countryOptions = useMemo(() => {\n    return Object.entries(typedCountries)\n      .map(\n        ([code, country]): CountryOption => ({\n          code,\n          name: country.name,\n          flag: getCountryEmoji(code),\n        }),\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }, [typedCountries]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(studioFormSchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Philippines as default country\n    },\n  });\n\n  const createStudio = api.studio.create.useMutation({\n    onSuccess: (data) => {\n      router.push(`/studio/${data.slug}`);\n    },\n  });\n\n  function onSubmit(data: FormData) {\n    createStudio.mutate(data);\n  }\n\n  // Optimized name change handler\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.value;\n    form.setValue(\"name\", name);\n\n    // Only auto-update slug if it hasn't been manually edited\n    if (!slugManuallyEditedRef.current) {\n      form.setValue(\"slug\", slugify(name), { shouldValidate: false });\n    }\n  };\n\n  // Handler for slug field to track manual edits\n  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    slugManuallyEditedRef.current = true;\n    form.setValue(\"slug\", e.target.value);\n  };\n\n  // Reset handler that also resets the manual edit tracking\n  const handleReset = () => {\n    form.reset({\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Ensure Philippines is still selected after reset\n    });\n    slugManuallyEditedRef.current = false;\n  };\n\n  return (\n    <Card className=\"shadow-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl sm:text-3xl\">\n          Create New Studio\n        </CardTitle>\n        <CardDescription>\n          Set up your dance studio profile to start managing classes,\n          instructors, and students.\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <div className=\"grid gap-6 sm:grid-cols-2\">\n              <FileUploader />\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>Studio Name</RequiredLabel>\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Rhythm Dance Academy\"\n                        onChange={handleNameChange}\n                        value={field.value}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"slug\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>URL Slug</RequiredLabel>\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"rhythm-dance-academy\"\n                        onChange={handleSlugChange}\n                        value={field.value}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Used in your studio URL: dancebook.com/studio/\n                      {field.value || \"your-slug\"}\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Tell us about your studio...\"\n                      className=\"min-h-[100px] resize-y\"\n                      {...field}\n                      value={field.value ?? \"\"}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    This will appear on your public profile.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    <RequiredLabel>Address</RequiredLabel>\n                  </FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"123 Dance Street\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid gap-6 sm:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"city\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>City</RequiredLabel>\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Manila\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>State/Province</RequiredLabel>\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Metro Manila\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid gap-6 sm:grid-cols-2\">\n              <FormField\n                control={form.control}\n                name=\"postalCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>Postal Code</RequiredLabel>\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"1000\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"country\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      <RequiredLabel>Country</RequiredLabel>\n                    </FormLabel>\n                    <Popover open={open} onOpenChange={setOpen}>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            role=\"combobox\"\n                            aria-expanded={open}\n                            className=\"w-full justify-between\"\n                          >\n                            {field.value ? (\n                              <>\n                                <span className=\"mr-2 text-lg\">\n                                  {\n                                    countryOptions.find(\n                                      (country) => country.code === field.value,\n                                    )?.flag\n                                  }\n                                </span>\n                                {\n                                  countryOptions.find(\n                                    (country) => country.code === field.value,\n                                  )?.name\n                                }\n                              </>\n                            ) : (\n                              \"Select country\"\n                            )}\n                            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-full p-0\">\n                        <Command>\n                          <CommandInput placeholder=\"Search country...\" />\n                          <CommandList>\n                            <CommandEmpty>No country found.</CommandEmpty>\n                            <CommandGroup className=\"max-h-[300px] overflow-y-auto\">\n                              {countryOptions.map((country) => (\n                                <CommandItem\n                                  key={country.code}\n                                  value={`${country.name} ${country.code}`}\n                                  onSelect={() => {\n                                    form.setValue(\"country\", country.code);\n                                    setOpen(false);\n                                  }}\n                                >\n                                  <span className=\"mr-2 text-lg\">\n                                    {country.flag}\n                                  </span>\n                                  <span>{country.name}</span>\n                                  {country.code === field.value && (\n                                    <Check className=\"ml-auto h-4 w-4\" />\n                                  )}\n                                </CommandItem>\n                              ))}\n                            </CommandGroup>\n                          </CommandList>\n                        </Command>\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                type=\"button\"\n                onClick={handleReset}\n                disabled={createStudio.isPending}\n              >\n                Reset\n              </Button>\n              <Button type=\"submit\" disabled={createStudio.isPending}>\n                {createStudio.isPending ? \"Creating...\" : \"Create Studio\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Helper to generate required field labels\nconst RequiredLabel = ({ children }: { children: React.ReactNode }) => (\n  <span className=\"flex items-center gap-1\">\n    {children}\n    <span className=\"text-destructive\">*</span>\n  </span>\n);\n```\n\n```ts dance-book-app/src/lib/supabase/client.ts\nimport { createBrowserClient } from \"@supabase/ssr\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  );\n}\n```\n\ni am using supabase please use that to upload the file and pass the returned url to the create studio trpc mutation\nI'll design and implement both the logo upload and opening hours components for your studio form, using Supabase for file storage.\n\nFirst, let's create a logo upload component:\n\n```tsx\n// components/studio/logo-uploader.tsx\n\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport { createClient } from \"~/lib/supabase/client\";\nimport { Button } from \"~/components/ui/button\";\nimport { Upload, X, Loader2 } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useToast } from \"~/components/ui/use-toast\";\n\ninterface LogoUploaderProps {\n  onLogoUploaded: (url: string) => void;\n  existingLogo?: string | null;\n}\n\nexport function LogoUploader({ onLogoUploaded, existingLogo }: LogoUploaderProps) {\n  const [uploading, setUploading] = useState(false);\n  const [preview, setPreview] = useState<string | null>(existingLogo || null);\n  const { toast } = useToast();\n  const supabase = createClient();\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[]) => {\n      const file = acceptedFiles[0];\n      if (!file) return;\n\n      // Validate file type\n      if (!file.type.startsWith(\"image/\")) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please upload an image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Maximum file size is 5MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      try {\n        setUploading(true);\n        \n        // Create a unique filename to prevent collisions\n        const fileExt = file.name.split('.').pop();\n        const fileName = `studio-logos/${Date.now()}-${Math.random().toString(36).substring(2, 15)}.${fileExt}`;\n        \n        // Create object URL for preview\n        const objectUrl = URL.createObjectURL(file);\n        setPreview(objectUrl);\n        \n        // Upload to Supabase\n        const { data, error } = await supabase.storage\n          .from('public')\n          .upload(fileName, file, {\n            cacheControl: '3600',\n            upsert: false\n          });\n\n        if (error) throw error;\n        \n        // Get public URL\n        const { data: { publicUrl } } = supabase.storage\n          .from('public')\n          .getPublicUrl(fileName);\n        \n        onLogoUploaded(publicUrl);\n        \n        toast({\n          title: \"Logo uploaded\",\n          description: \"Your studio logo has been uploaded successfully\",\n        });\n      } catch (error) {\n        console.error(\"Error uploading logo:\", error);\n        toast({\n          title: \"Upload failed\",\n          description: \"There was a problem uploading your logo\",\n          variant: \"destructive\",\n        });\n        // Clear preview on error\n        setPreview(existingLogo || null);\n      } finally {\n        setUploading(false);\n      }\n    },\n    [supabase, onLogoUploaded, toast, existingLogo]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']\n    },\n    maxFiles: 1,\n    disabled: uploading,\n  });\n\n  const clearLogo = () => {\n    setPreview(null);\n    onLogoUploaded(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col space-y-4\">\n      <div \n        className={`relative flex min-h-[180px] cursor-pointer flex-col items-center justify-center rounded-lg border-2 border-dashed p-4 transition-colors\n          ${isDragActive ? \"border-primary/70 bg-primary/5\" : \"border-muted-foreground/25 hover:border-primary/50\"}\n          ${uploading ? \"pointer-events-none opacity-60\" : \"\"}\n        `}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />\n        \n        {uploading ? (\n          <div className=\"flex flex-col items-center justify-center text-center\">\n            <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n            <p className=\"mt-2 text-sm text-muted-foreground\">Uploading logo...</p>\n          </div>\n        ) : preview ? (\n          <div className=\"relative flex h-full w-full items-center justify-center\">\n            <Image \n              src={preview} \n              alt=\"Studio logo preview\" \n              className=\"max-h-[140px] w-auto rounded-md object-contain\"\n              width={140}\n              height={140}\n            />\n            <Button\n              type=\"button\"\n              size=\"icon\"\n              variant=\"destructive\"\n              className=\"absolute -right-2 -top-2\"\n              onClick={(e) => {\n                e.stopPropagation();\n                clearLogo();\n              }}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center text-center\">\n            <Upload className=\"mb-2 h-8 w-8 text-muted-foreground\" />\n            <p className=\"mb-1 text-sm font-medium\">Upload Studio Logo</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Drag & drop or click to browse\n            </p>\n            <p className=\"mt-2 text-xs text-muted-foreground\">\n              Recommended: Square image, 500×500px or larger\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n```\n\nNow, let's create an opening hours component:\n\n```tsx\n// components/studio/opening-hours.tsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Trash2, Plus, Clock } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n}\n  \n```tsx dance-book-app/src/components/file-upload.tsx\n\"use client\";\n\nimport * as React from \"react\";\nimport Image from \"next/image\";\nimport { FileText, Upload, X } from \"lucide-react\";\nimport Dropzone, {\n  type DropzoneProps,\n  type FileRejection,\n} from \"react-dropzone\";\nimport { toast } from \"sonner\";\n\nimport { cn } from \"~/lib/utils\";\nimport { formatBytes } from \"~/lib/format-bytes\";\nimport { useControllableState } from \"~/hooks/use-controllable-state\";\nimport { Button } from \"~/components/ui/button\";\nimport { Progress } from \"~/components/ui/progress\";\nimport { ScrollArea } from \"~/components/ui/scroll-area\";\n\ninterface FileUploaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Value of the uploader.\n   * @type File[]\n   * @default undefined\n   * @example value={files}\n   */\n  value?: File[];\n\n  /**\n   * Function to be called when the value changes.\n   * @type (files: File[]) => void\n   * @default undefined\n   * @example onValueChange={(files) => setFiles(files)}\n   */\n  onValueChange?: (files: File[]) => void;\n\n  /**\n   * Function to be called when files are uploaded.\n   * @type (files: File[]) => Promise<void>\n   * @default undefined\n   * @example onUpload={(files) => uploadFiles(files)}\n   */\n  onUpload?: (files: File[]) => Promise<void>;\n\n  /**\n   * Progress of the uploaded files.\n   * @type Record<string, number> | undefined\n   * @default undefined\n   * @example progresses={{ \"file1.png\": 50 }}\n   */\n  progresses?: Record<string, number>;\n\n  /**\n   * Accepted file types for the uploader.\n   * @type { [key: string]: string[]}\n   * @default\n   * ```ts\n   * { \"image/*\": [] }\n   * ```\n   * @example accept={[\"image/png\", \"image/jpeg\"]}\n   */\n  accept?: DropzoneProps[\"accept\"];\n\n  /**\n   * Maximum file size for the uploader.\n   * @type number | undefined\n   * @default 1024 * 1024 * 2 // 2MB\n   * @example maxSize={1024 * 1024 * 2} // 2MB\n   */\n  maxSize?: DropzoneProps[\"maxSize\"];\n\n  /**\n   * Maximum number of files for the uploader.\n   * @type number | undefined\n   * @default 1\n   * @example maxFileCount={4}\n   */\n  maxFileCount?: DropzoneProps[\"maxFiles\"];\n\n  /**\n   * Whether the uploader should accept multiple files.\n   * @type boolean\n   * @default false\n   * @example multiple\n   */\n  multiple?: boolean;\n\n  /**\n   * Whether the uploader is disabled.\n   * @type boolean\n   * @default false\n   * @example disabled\n   */\n  disabled?: boolean;\n}\n\nexport function FileUploader(props: FileUploaderProps) {\n  const {\n    value: valueProp,\n    onValueChange,\n    onUpload,\n    progresses,\n    accept = {\n      \"image/*\": [],\n    },\n    maxSize = 1024 * 1024 * 2,\n    maxFileCount = 1,\n    multiple = false,\n    disabled = false,\n    className,\n    ...dropzoneProps\n  } = props;\n\n  const [files, setFiles] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n  });\n\n  const onDrop = React.useCallback(\n    (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n      if (!multiple && maxFileCount === 1 && acceptedFiles.length > 1) {\n        toast.error(\"Cannot upload more than 1 file at a time\");\n        return;\n      }\n\n      if ((files?.length ?? 0) + acceptedFiles.length > maxFileCount) {\n        toast.error(`Cannot upload more than ${maxFileCount} files`);\n        return;\n      }\n\n      const newFiles = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        }),\n      );\n\n      const updatedFiles = files ? [...files, ...newFiles] : newFiles;\n\n      setFiles(updatedFiles);\n\n      if (rejectedFiles.length > 0) {\n        rejectedFiles.forEach(({ file }) => {\n          toast.error(`File ${file.name} was rejected`);\n        });\n      }\n\n      if (\n        onUpload &&\n        updatedFiles.length > 0 &&\n        updatedFiles.length <= maxFileCount\n      ) {\n        const target =\n          updatedFiles.length > 0 ? `${updatedFiles.length} files` : `file`;\n\n        toast.promise(onUpload(updatedFiles), {\n          loading: `Uploading ${target}...`,\n          success: () => {\n            setFiles([]);\n            return `${target} uploaded`;\n          },\n          error: `Failed to upload ${target}`,\n        });\n      }\n    },\n\n    [files, maxFileCount, multiple, onUpload, setFiles],\n  );\n\n  function onRemove(index: number) {\n    if (!files) return;\n    const newFiles = files.filter((_, i) => i !== index);\n    setFiles(newFiles);\n    onValueChange?.(newFiles);\n  }\n\n  // Revoke preview url when component unmounts\n  React.useEffect(() => {\n    return () => {\n      if (!files) return;\n      files.forEach((file) => {\n        if (isFileWithPreview(file)) {\n          URL.revokeObjectURL(file.preview);\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isDisabled = disabled || (files?.length ?? 0) >= maxFileCount;\n\n  return (\n    <div className=\"relative flex flex-col gap-6 overflow-hidden\">\n      <Dropzone\n        onDrop={onDrop}\n        accept={accept}\n        maxSize={maxSize}\n        maxFiles={maxFileCount}\n        multiple={maxFileCount > 1 || multiple}\n        disabled={isDisabled}\n      >\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div\n            {...getRootProps()}\n            className={cn(\n              \"group relative grid h-52 w-full cursor-pointer place-items-center rounded-lg border-2 border-dashed border-muted-foreground/25 px-5 py-2.5 text-center transition hover:bg-muted/25\",\n              \"ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n              isDragActive && \"border-muted-foreground/50\",\n              isDisabled && \"pointer-events-none opacity-60\",\n              className,\n            )}\n            {...dropzoneProps}\n          >\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                <div className=\"rounded-full border border-dashed p-3\">\n                  <Upload\n                    className=\"size-7 text-muted-foreground\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <p className=\"font-medium text-muted-foreground\">\n                  Drop the files here\n                </p>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                <div className=\"rounded-full border border-dashed p-3\">\n                  <Upload\n                    className=\"size-7 text-muted-foreground\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <div className=\"flex flex-col gap-px\">\n                  <p className=\"font-medium text-muted-foreground\">\n                    Drag {`'n'`} drop files here, or click to select files\n                  </p>\n                  <p className=\"text-sm text-muted-foreground/70\">\n                    You can upload\n                    {maxFileCount > 1\n                      ? ` ${maxFileCount === Infinity ? \"multiple\" : maxFileCount}\n                      files (up to ${formatBytes(maxSize)} each)`\n                      : ` a file with ${formatBytes(maxSize)}`}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Dropzone>\n      {files?.length ? (\n        <ScrollArea className=\"h-fit w-full px-3\">\n          <div className=\"flex max-h-48 flex-col gap-4\">\n            {files?.map((file, index) => (\n              <FileCard\n                key={index}\n                file={file}\n                onRemove={() => onRemove(index)}\n                progress={progresses?.[file.name]}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      ) : null}\n    </div>\n  );\n}\n\ninterface FileCardProps {\n  file: File;\n  onRemove: () => void;\n  progress?: number;\n}\n\nfunction FileCard({ file, progress, onRemove }: FileCardProps) {\n  return (\n    <div className=\"relative flex items-center gap-2.5\">\n      <div className=\"flex flex-1 gap-2.5\">\n        {isFileWithPreview(file) ? <FilePreview file={file} /> : null}\n        <div className=\"flex w-full flex-col gap-2\">\n          <div className=\"flex flex-col gap-px\">\n            <p className=\"line-clamp-1 text-sm font-medium text-foreground/80\">\n              {file.name}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {formatBytes(file.size)}\n            </p>\n          </div>\n          {progress ? <Progress value={progress} /> : null}\n        </div>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-7\"\n          onClick={onRemove}\n        >\n          <X className=\"size-4\" aria-hidden=\"true\" />\n          <span className=\"sr-only\">Remove file</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction isFileWithPreview(file: File): file is File & { preview: string } {\n  return \"preview\" in file && typeof file.preview === \"string\";\n}\n\ninterface FilePreviewProps {\n  file: File & { preview: string };\n}\n\nfunction FilePreview({ file }: FilePreviewProps) {\n  if (file.type.startsWith(\"image/\")) {\n    return (\n      <Image\n        src={file.preview}\n        alt={file.name}\n        width={48}\n        height={48}\n        loading=\"lazy\"\n        className=\"aspect-square shrink-0 rounded-md object-cover\"\n      />\n    );\n  }\n\n  return (\n    <FileText className=\"size-10 text-muted-foreground\" aria-hidden=\"true\" />\n  );\n}\n```\n\ni have already the reusable component just integrate the file upload using supabase in the new-studio-form\nI'll implement the logo upload and opening hours functionality for the studio form using Supabase for file storage.\n\nFirst, let's create a reusable hook for file uploads to Supabase:\n\n```tsx\n// src/hooks/use-supabase-upload.ts\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createClient } from \"~/lib/supabase/client\";\n\nexport function useSupabaseUpload() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);\n\n  const uploadFile = async (file: File, path = \"logos\"): Promise<string> => {\n    setIsUploading(true);\n    setProgress({ [file.name]: 0 });\n    \n    try {\n      const supabase = createClient();\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${uuidv4()}.${fileExt}`;\n      const filePath = `${path}/${fileName}`;\n      \n      const { data, error } = await supabase.storage\n        .from('studio-assets')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false,\n          onUploadProgress: (progress) => {\n            const percentage = (progress.loaded / progress.total) * 100;\n            setProgress({ [file.name]: percentage });\n          },\n        });\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from('studio-assets')\n        .getPublicUrl(data.path);\n      \n      const url = publicUrlData.publicUrl;\n      setUploadedUrl(url);\n      return url;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  return {\n    uploadFile,\n    isUploading,\n    progress,\n    uploadedUrl,\n  };\n}\n```\n\nNow, let's create a component for managing opening hours:\n\n```tsx\n// src/components/opening-hours-editor.tsx\nimport { useState } from \"react\";\nimport { X, Plus, Clock } from \"lucide-react\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle \n} from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { Switch } from \"~/components/ui/switch\";\nimport { Label } from \"~/components/ui/label\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\nconst TIME_OPTIONS = Array.from({ length: 24 * 4 }).map((_, i) => {\n  const hour = Math.floor(i / 4);\n  const minute = (i % 4) * 15;\n  const paddedHour = hour.toString().padStart(2, \"0\");\n  const paddedMinute = minute.toString().padStart(2, \"0\");\n  return `${paddedHour}:${paddedMinute}`;\n});\n\nexport function OpeningHoursEditor({ value = {}, onChange }: OpeningHoursEditorProps) {\n  const [hours, setHours] = useState<OpeningHours>(value);\n\n  const updateHours = (newHours: OpeningHours) => {\n    setHours(newHours);\n    onChange(newHours);\n  };\n\n  const addDay = (day: string) => {\n    if (hours[day]) return;\n    \n    updateHours({\n      ...hours,\n      [day]: [\"09:00\", \"17:00\"],\n    });\n  };\n\n  const removeDay = (day: string) => {\n    const newHours = { ...hours };\n    delete newHours[day];\n    updateHours(newHours);\n  };\n\n  const updateTime = (day: string, index: number, time: string) => {\n    const newTimes = [...hours[day]];\n    newTimes[index] = time;\n    \n    updateHours({\n      ...hours,\n      [day]: newTimes,\n    });\n  };\n\n  const copyToAllDays = (sourceDay: string) => {\n    const sourceTimes = hours[sourceDay];\n    if (!sourceTimes) return;\n    \n    const newHours = { ...hours };\n    DAYS.forEach(day => {\n      if (day.value !== sourceDay && newHours[day.value]) {\n        newHours[day.value] = [...sourceTimes];\n      }\n    });\n    \n    updateHours(newHours);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Opening Hours</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <span className=\"text-sm font-medium\">Add day:</span>\n          {DAYS.map((day) => (\n            <Button\n              key={day.value}\n              variant={hours[day.value] ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => \n                hours[day.value] ? removeDay(day.value) : addDay(day.value)\n              }\n              className=\"h-8\"\n            >\n              {day.label.substring(0, 3)}\n              {hours[day.value] && <X className=\"ml-1 h-3 w-3\" />}\n            </Button>\n          ))}\n        </div>\n\n        <div className=\"space-y-3\">\n          {Object.entries(hours).map(([day, times]) => (\n            <div key={day} className=\"flex flex-col space-y-2 rounded-lg border p-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-medium capitalize\">\n                  {DAYS.find(d => d.value === day)?.label}\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToAllDays(day)}\n                    className=\"h-7 text-xs\"\n                  >\n                    Copy to all days\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeDay(day)}\n                    className=\"h-6 w-6 text-destructive\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <Select\n                  value={times[0]}\n                  onValueChange={(value) => updateTime(day, 0, value)}\n                >\n                  <SelectTrigger className=\"w-[110px]\">\n                    <SelectValue placeholder=\"Open\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {TIME_OPTIONS.map((time) => (\n                      <SelectItem key={time} value={time}>\n                        {time}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <span className=\"text-sm text-muted-foreground\">to</span>\n                <Select\n                  value={times[1]}\n                  onValueChange={(value) => updateTime(day, 1, value)}\n                >\n                  <SelectTrigger className=\"w-[110px]\">\n                    <SelectValue placeholder=\"Close\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {TIME_OPTIONS.map((time) => (\n                      <SelectItem key={time} value={time}>\n                        {time}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          ))}\n          \n          {Object.keys(hours).length === 0 && (\n            <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n              <p className=\"text-sm text-muted-foreground\">No opening hours set</p>\n              <p className=\"text-xs text-muted-foreground\">Click a day above to add hours</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\nNow, let's update the New Studio Form to include logo upload and opening hours:\n\n```tsx\n// src/app/(private)/setup/new-studio-form.tsx\n\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { countries } from \"countries-list\";\nimport { api } from \"~/trpc/react\";\nimport { slugify } from \"~/lib/slugify\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"~/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"~/components/ui/popover\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"~/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"~/components/ui/tabs\";\nimport { useRef, useState, useMemo } from \"react\";\nimport { Check, ChevronsUpDown, FileImage } from \"lucide-react\";\nimport { FileUploader } from \"~/components/file-upload\";\nimport { OpeningHoursEditor } from \"~/components/opening-hours-editor\";\nimport { useSupabaseUpload } from \"~/hooks/use-supabase-upload\";\nimport Image from \"next/image\";\n\n// Format countries data for select dropdown with proper typing\ntype CountryOption = {\n  code: string;\n  name: string;\n  flag: string;\n};\n\nconst studioFormSchema = z.object({\n  name: z.string().min(3, \"Studio name must be at least 3 characters\").max(100),\n  slug: z\n    .string()\n    .min(3, \"Slug must be at least 3 characters\")\n    .max(100)\n    .regex(\n      /^[a-z0-9-]+$/,\n      \"Slug can only contain lowercase letters, numbers, and hyphens\",\n    ),\n  description: z.string().optional(),\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State/Province is required\"),\n  postalCode: z.string().min(2, \"Postal code is required\"),\n  country: z.string().length(2, \"Please select a country\"),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\ntype FormData = z.infer<typeof studioFormSchema>;\n\n// Create a manually typed country flag mapping function\nfunction getCountryEmoji(countryCode: string): string {\n  const codePoints = countryCode\n    .toUpperCase()\n    .split(\"\")\n    .map((char) => 127397 + char.charCodeAt(0));\n  return String.fromCodePoint(...codePoints);\n}\n\nexport default function NewStudioForm() {\n  const router = useRouter();\n  const slugManuallyEditedRef = useRef(false);\n  const [open, setOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"basic\");\n  const [logoFile, setLogoFile] = useState<File[]>([]);\n  const { uploadFile, isUploading, progress } = useSupabaseUpload();\n\n  // Cast the countries object to a properly typed record for TypeScript\n  const typedCountries = countries as Record<string, { name: string }>;\n\n  // Memoize the country options to improve performance\n  const countryOptions = useMemo(() => {\n    return Object.entries(typedCountries)\n      .map(\n        ([code, country]): CountryOption => ({\n          code,\n          name: country.name,\n          flag: getCountryEmoji(code),\n        }),\n      )\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }, [typedCountries]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(studioFormSchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Philippines as default country\n      openingHours: {},\n    },\n  });\n\n  const createStudio = api.studio.create.useMutation({\n    onSuccess: (data) => {\n      router.push(`/studio/${data.slug}`);\n    },\n  });\n\n  async function onSubmit(data: FormData) {\n    try {\n      // If there's a logo file, upload it first\n      if (logoFile.length > 0) {\n        const logoUrl = await uploadFile(logoFile[0]);\n        data.logo = logoUrl;\n      }\n      \n      // Submit the complete data\n      createStudio.mutate(data);\n    } catch (error) {\n      console.error(\"Error creating studio:\", error);\n    }\n  }\n\n  // Optimized name change handler\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.value;\n    form.setValue(\"name\", name);\n\n    // Only auto-update slug if it hasn't been manually edited\n    if (!slugManuallyEditedRef.current) {\n      form.setValue(\"slug\", slugify(name), { shouldValidate: false });\n    }\n  };\n\n  // Handler for slug field to track manual edits\n  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    slugManuallyEditedRef.current = true;\n    form.setValue(\"slug\", e.target.value);\n  };\n\n  // Reset handler that also resets the manual edit tracking\n  const handleReset = () => {\n    form.reset({\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Ensure Philippines is still selected after reset\n      openingHours: {},\n    });\n    setLogoFile([]);\n    slugManuallyEditedRef.current = false;\n  };\n\n  // Handle opening hours changes\n  const handleOpeningHoursChange = (hours: Record<string, string[]>) => {\n    form.setValue(\"openingHours\", hours);\n  };\n\n  return (\n    <Card className=\"shadow-md\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl sm:text-3xl\">\n          Create New Studio\n        </CardTitle>\n        <CardDescription>\n          Set up your dance studio profile to start managing classes,\n          instructors, and students.\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <Tabs\n              defaultValue=\"basic\"\n              value={activeTab}\n              onValueChange={setActiveTab}\n              className=\"w-full\"\n            >\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"address\">Address</TabsTrigger>\n                <TabsTrigger value=\"hours\">Opening Hours</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"basic\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"grid gap-6 sm:grid-cols-2\">\n                    <div className=\"flex flex-col space-y-2\">\n                      <FormLabel className=\"text-sm font-medium\">\n                        <RequiredLabel>Studio Logo</RequiredLabel>\n                      </FormLabel>\n                      \n                      {form.watch(\"logo\") ? (\n                        <div className=\"relative aspect-square h-48 w-48 overflow-hidden rounded-lg border\">\n                          <Image\n                            src={form.watch(\"logo\") as string}\n                            alt=\"Studio logo\"\n                            fill\n                            className=\"object-cover\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-2\"\n                            onClick={() => {\n                              form.setValue(\"logo\", undefined);\n                              setLogoFile([]);\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ) : (\n                        <FileUploader\n                          value={logoFile}\n                          onValueChange={setLogoFile}\n                          accept={{ \"image/*\": [\".jpg\", \".jpeg\", \".png\", \".webp\"] }}\n                          maxSize={1024 * 1024 * 2} // 2MB\n                          maxFileCount={1}\n                          progresses={progress}\n                          className=\"h-48 w-48\"\n                        />\n                      )}\n                      <FormDescription className=\"text-xs\">\n                        Upload a square logo image (JPG, PNG). Max 2MB.\n                      </FormDescription>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              <RequiredLabel>Studio Name</RequiredLabel>\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Rhythm Dance Academy\"\n                                onChange={handleNameChange}\n                                value={field.value}\n                                onBlur={field.onBlur}\n                                name={field.name}\n                                ref={field.ref}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"slug\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              <RequiredLabel>URL Slug</RequiredLabel>\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"rhythm-dance-academy\"\n                                onChange={handleSlugChange}\n                                value={field.value}\n                                onBlur={field.onBlur}\n                                name={field.name}\n                                ref={field.ref}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Used in your studio URL: dancebook.com/studio/\n                              {field.value || \"your-slug\"}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Tell us about your studio...\"\n                            className=\"min-h-[100px] resize-y\"\n                            {...field}\n                            value={field.value ?? \"\"}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          This will appear on your public profile.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-between\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setActiveTab(\"address\")}\n                    >\n                      Next: Address\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"address\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>Address</RequiredLabel>\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123 Dance Street\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid gap-6 sm:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"city\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            <RequiredLabel>City</RequiredLabel>\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Manila\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"state\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            <RequiredLabel>State/Province</RequiredLabel>\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Metro Manila\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-6 sm:grid-cols-2\">\n                    <FormField\n                      control={form.control}\n                      name=\"postalCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            <RequiredLabel>Postal Code</RequiredLabel>\n                          </FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"1000\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            <RequiredLabel>Country</RequiredLabel>\n                          </FormLabel>\n                          <Popover open={open} onOpenChange={setOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  aria-expanded={open}\n                                  className=\"w-full justify-between\"\n                                >\n                                  {field.value ? (\n                                    <>\n                                      <span className=\"mr-2 text-lg\">\n                                        {\n                                          countryOptions.find(\n                                            (country) => country.code === field.value,\n                                          )?.flag\n                                        }\n                                      </span>\n                                      {\n                                        countryOptions.find(\n                                          (country) => country.code === field.value,\n                                        )?.name\n                                      }\n                                    </>\n                                  ) : (\n                                    \"Select country\"\n                                  )}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-full p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search country...\" />\n                                <CommandList>\n                                  <CommandEmpty>No country found.</CommandEmpty>\n                                  <CommandGroup className=\"max-h-[300px] overflow-y-auto\">\n                                    {countryOptions.map((country) => (\n                                      <CommandItem\n                                        key={country.code}\n                                        value={`${country.name} ${country.code}`}\n                                        onSelect={() => {\n                                          form.setValue(\"country\", country.code);\n                                          setOpen(false);\n                                        }}\n                                      >\n                                        <span className=\"mr-2 text-lg\">\n                                          {country.flag}\n                                        </span>\n                                        <span>{country.name}</span>\n                                        {country.code === field.value && (\n                                          <Check className=\"ml-auto h-4 w-4\" />\n                                        )}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setActiveTab(\"basic\")}\n                    >\n                      Back\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      onClick={() => setActiveTab(\"hours\")}\n                    >\n                      Next: Opening Hours\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"hours\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"openingHours\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <OpeningHoursEditor\n                            value={field.value}\n                            onChange={handleOpeningHoursChange}\n                          />\n                        </FormControl>\n                        <FormDescription className=\"mt-2 text-center text-sm\">\n                          Set your regular business hours. You can add special hours for classes later.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-between\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setActiveTab(\"address\")}\n                    >\n                      Back\n                    </Button>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        variant=\"outline\"\n                        type=\"button\"\n                        onClick={handleReset}\n                        disabled={createStudio.isPending || isUploading}\n                      >\n                        Reset All\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createStudio.isPending || isUploading}\n                        className=\"min-w-32\"\n                      >\n                        {createStudio.isPending || isUploading ? \"Creating...\" : \"Create Studio\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Helper to generate required field labels\nconst RequiredLabel = ({ children }: { children: React.ReactNode }) => (\n  <span className=\"flex items-center gap-1\">\n    {children}\n    <span className=\"text-destructive\">*</span>\n  </span>\n);\n```\n\nAlso, let's create a custom hook for accessing controllable state used in the file uploader:\n\n```tsx\n// src/hooks/use-controllable-state.ts\nimport * as React from \"react\";\n\ntype UseControllableStateParams<T> = {\n  prop?: T;\n  defaultProp?: T;\n  onChange?: (state: T) => void;\n};\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange,\n}: UseControllableStateParams<T>) {\n  const [uncontrolledState, setUncontrolledState] = React.useState<T | undefined>(defaultProp);\n  const isControlled = prop !== undefined;\n  const state = isControlled ? prop : uncontrolledState;\n\n  const handleChange = React.useCallback(\n    (nextValue: React.SetStateAction<T | undefined>) => {\n      const value =\n        typeof nextValue === \"function\"\n          ? (nextValue as (prevState: T | undefined) => T)(state)\n          : nextValue;\n\n      if (!isControlled) {\n        setUncontrolledState(value);\n      }\n\n      onChange?.(value as T);\n    },\n    [isControlled, state, onChange]\n  );\n\n  return [state, handleChange] as const;\n}\n\nexport { useControllableState };\n```\n\nFor formatting bytes to display file size:\n\n```ts\n// src/lib/format-bytes.ts\nexport function formatBytes(bytes: number, decimals: number = 2): string {\n  if (bytes === 0) return \"0 Bytes\";\n\n  const k = 1024;\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(decimals))} ${sizes[i]}`;\n}\n```\n\nThis implementation:\n\n1. Adds a proper Supabase file upload hook that handles progress and returns the uploaded file URL\n2. Creates a dedicated OpeningHoursEditor component with a clean interface to manage business hours\n3. Enhances the studio form with tabs for better organization\n4. Shows a live preview of the logo when uploaded\n5. Integrates file upload with Supabase and properly passes the URL to the TRPC mutation\n6. Implements error handling and loading states during file uploads and studio creation\n7. Provides a user-friendly interface for managing opening hours with copy-to-all-days functionality\n8. Uses a multi-step form approach to avoid overwhelming users with too many fields at once\n\nThe code follows best practices with:\n- Type safety throughout\n- Performance optimizations (memoized values)\n- Clean separation of concerns\n- Good error handling\n- Visual feedback during uploads\n- Reusable components and hooks\ndiagnostics\ndance-book-app/src/hooks/use-upload-file.tsx\n```tsx\n          cacheControl: \"3600\",\n          upsert: false,\n          onUploadProgress: (progress) => {\n// error: Object literal may only specify known properties, and 'onUploadProgress' does not exist in type 'FileOptions'.\n            const percentage = (progress.loaded / progress.total) * 100;\n            setProgress({ [file.name]: percentage });\n```\n```tsx\n          cacheControl: \"3600\",\n          upsert: false,\n          onUploadProgress: (progress) => {\n// error: Parameter 'progress' implicitly has an 'any' type.\n            const percentage = (progress.loaded / progress.total) * 100;\n            setProgress({ [file.name]: percentage });\n```\n```tsx\n          upsert: false,\n          onUploadProgress: (progress) => {\n            const percentage = (progress.loaded / progress.total) * 100;\n// error: Unsafe member access .loaded on an `any` value.\n            setProgress({ [file.name]: percentage });\n          },\n```\n```tsx\n          upsert: false,\n          onUploadProgress: (progress) => {\n            const percentage = (progress.loaded / progress.total) * 100;\n// error: Unsafe member access .total on an `any` value.\n            setProgress({ [file.name]: percentage });\n          },\n```\ndance-book-app/src/hooks/use-upload-file.tsx\n```tsx\n          cacheControl: \"3600\",\n          upsert: false,\n          onUploadProgress: (progress) => {\n// error: Object literal may only specify known properties, and 'onUploadProgress' does not exist in type 'FileOptions'.\n            const percentage = (progress.loaded / progress.total) * 100;\n            setProgress({ [file.name]: percentage });\n```\n```tsx\n          cacheControl: \"3600\",\n          upsert: false,\n          onUploadProgress: (progress) => {\n// error: Parameter 'progress' implicitly has an 'any' type.\n            const percentage = (progress.loaded / progress.total) * 100;\n            setProgress({ [file.name]: percentage });\n```\n```tsx\n          upsert: false,\n          onUploadProgress: (progress) => {\n            const percentage = (progress.loaded / progress.total) * 100;\n// error: Unsafe member access .loaded on an `any` value.\n            setProgress({ [file.name]: percentage });\n          },\n```\n```tsx\n          upsert: false,\n          onUploadProgress: (progress) => {\n            const percentage = (progress.loaded / progress.total) * 100;\n// error: Unsafe member access .total on an `any` value.\n            setProgress({ [file.name]: percentage });\n          },\n```\ndance-book-app/src/app/(private)/setup/new-studio-form.tsx\n```tsx\n      // If there's a logo file, upload it first\n      if (logoFile.length > 0) {\n        const logoUrl = await uploadFile(logoFile[0]);\n// error: Argument of type 'File | undefined' is not assignable to parameter of type 'File'.\n//          Type 'undefined' is not assignable to type 'File'.\n        data.logo = logoUrl;\n      }\n```\n```tsx\n                        <div className=\"relative aspect-square h-48 w-48 overflow-hidden rounded-lg border\">\n                          <Image\n                            src={form.watch(\"logo\") as string}\n// error: Use a ! assertion to more succinctly remove null and undefined from the type.\n                            alt=\"Studio logo\"\n                            fill\n```\ndance-book-app/src/app/(private)/setup/new-studio-form.tsx\n```tsx\n      // If there's a logo file, upload it first\n      if (logoFile.length > 0) {\n        const logoUrl = await uploadFile(logoFile[0]);\n// error: Argument of type 'File | undefined' is not assignable to parameter of type 'File'.\n//          Type 'undefined' is not assignable to type 'File'.\n        data.logo = logoUrl;\n      }\n```\n```tsx\n                        <div className=\"relative aspect-square h-48 w-48 overflow-hidden rounded-lg border\">\n                          <Image\n                            src={form.watch(\"logo\") as string}\n// error: Use a ! assertion to more succinctly remove null and undefined from the type.\n                            alt=\"Studio logo\"\n                            fill\n```\ndance-book-app/src/hooks/use-controllable-state.tsx\n```tsx\n  prop,\n  defaultProp,\n  onChange = () => {},\n// error: Unexpected empty arrow function.\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n```\ndance-book-app/src/components/opening-hours.tsx\n```tsx\n\n  const updateTime = (day: string, index: number, time: string) => {\n    const newTimes = [...hours[day]];\n// error: Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.\n    newTimes[index] = time;\n\n```\n\ncan you fix the errors\nLet me fix these TypeScript errors:\n\n1. First, let's fix the Supabase upload hook:\n\n```tsx\n// src/hooks/use-supabase-upload.ts\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createClient } from \"~/lib/supabase/client\";\n\n// Define the progress type for proper typing\ninterface UploadProgress {\n  loaded: number;\n  total: number;\n}\n\nexport function useSupabaseUpload() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);\n\n  const uploadFile = async (file: File, path = \"logos\"): Promise<string> => {\n    setIsUploading(true);\n    setProgress({ [file.name]: 0 });\n    \n    try {\n      const supabase = createClient();\n      const fileExt = file.name.split('.').pop();\n      const fileName = `${uuidv4()}.${fileExt}`;\n      const filePath = `${path}/${fileName}`;\n      \n      // Use the uploadToStorage method with options typed correctly\n      const { data, error } = await supabase.storage\n        .from('studio-assets')\n        .upload(filePath, file, {\n          cacheControl: '3600',\n          upsert: false,\n        });\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from('studio-assets')\n        .getPublicUrl(data.path);\n      \n      const url = publicUrlData.publicUrl;\n      setUploadedUrl(url);\n      return url;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Manually set progress (can be used with XHR if needed)\n  const updateProgress = (fileName: string, loaded: number, total: number) => {\n    const percentage = (loaded / total) * 100;\n    setProgress({ [fileName]: percentage });\n  };\n\n  return {\n    uploadFile,\n    isUploading,\n    progress,\n    uploadedUrl,\n    updateProgress,\n  };\n}\n```\n\n2. Fix the use-controllable-state hook:\n\n```tsx\n// src/hooks/use-controllable-state.ts\nimport * as React from \"react\";\n\ntype UseControllableStateParams<T> = {\n  prop?: T;\n  defaultProp?: T;\n  onChange?: (state: T) => void;\n};\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange,\n}: UseControllableStateParams<T>) {\n  const [uncontrolledState, setUncontrolledState] = React.useState<T | undefined>(defaultProp);\n  const isControlled = prop !== undefined;\n  const state = isControlled ? prop : uncontrolledState;\n\n  const handleChange = React.useCallback(\n    (nextValue: React.SetStateAction<T | undefined>) => {\n      const value =\n        typeof nextValue === \"function\"\n          ? (nextValue as (prevState: T | undefined) => T)(state)\n          : nextValue;\n\n      if (!isControlled) {\n        setUncontrolledState(value);\n      }\n\n      if (onChange && value !== undefined) {\n        onChange(value as T);\n      }\n    },\n    [isControlled, state, onChange]\n  );\n\n  return [state, handleChange] as const;\n}\n\nexport { useControllableState };\n```\n\n3. Fix the OpeningHoursEditor component:\n\n```tsx\n// src/components/opening-hours-editor.tsx\nimport { useState } from \"react\";\nimport { X, Plus, Clock } from \"lucide-react\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle \n} from \"~/components/ui/card\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { Switch } from \"~/components/ui/switch\";\nimport { Label } from \"~/components/ui/label\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\nconst TIME_OPTIONS = Array.from({ length: 24 * 4 }).map((_, i) => {\n  const hour = Math.floor(i / 4);\n  const minute = (i % 4) * 15;\n  const paddedHour = hour.toString().padStart(2, \"0\");\n  const paddedMinute = minute.toString().padStart(2, \"0\");\n  return `${paddedHour}:${paddedMinute}`;\n});\n\nexport function OpeningHoursEditor({ value = {}, onChange }: OpeningHoursEditorProps) {\n  const [hours, setHours] = useState<OpeningHours>(value);\n\n  const updateHours = (newHours: OpeningHours) => {\n    setHours(newHours);\n    onChange(newHours);\n  };\n\n  const addDay = (day: string) => {\n    if (hours[day]) return;\n    \n    updateHours({\n      ...hours,\n      [day]: [\"09:00\", \"17:00\"],\n    });\n  };\n\n  const removeDay = (day: string) => {\n    const newHours = { ...hours };\n    delete newHours[day];\n    updateHours(newHours);\n  };\n\n  const updateTime = (day: string, index: number, time: string) => {\n    // Fix the type error by checking if hours[day] exists\n    if (!hours[day]) return;\n    \n    const newTimes = [...hours[day]];\n    newTimes[index] = time;\n    \n    updateHours({\n      ...hours,\n      [day]: newTimes,\n    });\n  };\n\n  const copyToAllDays = (sourceDay: string) => {\n    const sourceTimes = hours[sourceDay];\n    if (!sourceTimes) return;\n    \n    const newHours = { ...hours };\n    DAYS.forEach(day => {\n      if (day.value !== sourceDay && newHours[day.value]) {\n        newHours[day.value] = [...sourceTimes];\n      }\n    });\n    \n    updateHours(newHours);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Opening Hours</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <span className=\"text-sm font-medium\">Add day:</span>\n          {DAYS.map((day) => (\n            <Button\n              key={day.value}\n              variant={hours[day.value] ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => \n                hours[day.value] ? removeDay(day.value) : addDay(day.value)\n              }\n              className=\"h-8\"\n            >\n              {day.label.substring(0, 3)}\n              {hours[day.value] && <X className=\"ml-1 h-3 w-3\" />}\n            </Button>\n          ))}\n        </div>\n\n        <div className=\"space-y-3\">\n          {Object.entries(hours).map(([day, times]) => (\n            <div key={day} className=\"flex flex-col space-y-2 rounded-lg border p-3\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-medium capitalize\">\n                  {DAYS.find(d => d.value === day)?.label}\n                </h4>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => copyToAllDays(day)}\n                    className=\"h-7 text-xs\"\n                  >\n                    Copy to all days\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => removeDay(day)}\n                    className=\"h-6 w-6 text-destructive\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <Select\n                  value={times[0]}\n                  onValueChange={(value) => updateTime(day, 0, value)}\n                >\n                  <SelectTrigger className=\"w-[110px]\">\n                    <SelectValue placeholder=\"Open\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {TIME_OPTIONS.map((time) => (\n                      <SelectItem key={time} value={time}>\n                        {time}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <span className=\"text-sm text-muted-foreground\">to</span>\n                <Select\n                  value={times[1]}\n                  onValueChange={(value) => updateTime(day, 1, value)}\n                >\n                  <SelectTrigger className=\"w-[110px]\">\n                    <SelectValue placeholder=\"Close\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {TIME_OPTIONS.map((time) => (\n                      <SelectItem key={time} value={time}>\n                        {time}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          ))}\n          \n          {Object.keys(hours).length === 0 && (\n            <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n              <p className=\"text-sm text-muted-foreground\">No opening hours set</p>\n              <p className=\"text-xs text-muted-foreground\">Click a day above to add hours</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n4. Now let's fix the new-studio-form.tsx:\n\n```tsx\n// src/app/(private)/setup/new-studio-form.tsx\n// In the onSubmit function:\n\nasync function onSubmit(data: FormData) {\n  try {\n    // If there's a logo file, upload it first\n    if (logoFile.length > 0 && logoFile[0]) { // Add check for logoFile[0]\n      const logoUrl = await uploadFile(logoFile[0]);\n      data.logo = logoUrl;\n    }\n    \n    // Submit the complete data\n    createStudio.mutate(data);\n  } catch (error) {\n    console.error(\"Error creating studio:\", error);\n  }\n}\n\n// And in the Image component:\n{form.watch(\"logo\") ? (\n  <div className=\"relative aspect-square h-48 w-48 overflow-hidden rounded-lg border\">\n    <Image\n      src={form.watch(\"logo\")!} // Use ! to assert non-null\n      alt=\"Studio logo\"\n      fill\n      className=\"object-cover\"\n    />\n    <Button\n      type=\"button\"\n      variant=\"destructive\"\n      size=\"sm\"\n      className=\"absolute right-2 top-2\"\n      onClick={() => {\n        form.setValue(\"logo\", undefined);\n        setLogoFile([]);\n      }}\n    >\n      Remove\n    </Button>\n  </div>\n) : (\n  <FileUploader\n    // ...rest of the component\n  />\n)}\n```\n\nWith these fixes:\n\n1. The Supabase upload hook has been simplified to remove the problematic `onUploadProgress` option which isn't supported in the FileOptions type, and instead we've added a separate `updateProgress` method that can be used if needed.\n\n2. The `use-controllable-state` hook has been fixed to avoid using an empty arrow function as default.\n\n3. The OpeningHoursEditor now properly checks if hours[day] exists before trying to spread it.\n\n4. In the form, we now properly check that logoFile[0] is defined before using it, and use the non-null assertion operator for the Image src.\n\nThese changes should resolve all the TypeScript errors while maintaining the functionality of the components.\n```tsx dance-book-app/src/hooks/use-upload-file.tsx\nimport { useState } from \"react\";\nimport { createClient } from \"~/lib/supabase/client\";\n\nexport function useSupabaseUpload() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);\n\n  const uploadFile = async (file: File, path = \"logos\"): Promise<string> => {\n    setIsUploading(true);\n    setProgress({ [file.name]: 0 });\n\n    try {\n      const supabase = createClient();\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${crypto.randomUUID()}.${fileExt}`;\n      const filePath = `${path}/${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from(\"studio-assets\")\n        .upload(filePath, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(\"studio-assets\")\n        .getPublicUrl(data.path);\n\n      const url = publicUrlData.publicUrl;\n      setUploadedUrl(url);\n      return url;\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      throw error;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Manually set progress (can be used with XHR if needed)\n  const updateProgress = (fileName: string, loaded: number, total: number) => {\n    const percentage = (loaded / total) * 100;\n    setProgress({ [fileName]: percentage });\n  };\n\n  return {\n    uploadFile,\n    isUploading,\n    progress,\n    uploadedUrl,\n    updateProgress,\n  };\n}\n```\n\ncan  we make the storage.from(\"\") dynamic? \ni want to name the folder by studio slug since its unique \nYes, we can make the storage bucket folder dynamic based on the studio slug. Here's how to refactor the hook to support this:\n\n```tsx\n// src/hooks/use-supabase-upload.tsx\nimport { useState } from \"react\";\nimport { createClient } from \"~/lib/supabase/client\";\n\ntype UploadOptions = {\n  /**\n   * The storage bucket to upload to\n   * @default \"studio-assets\"\n   */\n  bucket?: string;\n  \n  /**\n   * Optional subfolder path within the bucket (e.g., a studio slug)\n   * This will create a folder structure like: bucket/studioSlug/logos/file.jpg\n   */\n  studioSlug?: string;\n  \n  /**\n   * The type of asset being uploaded\n   * @default \"logos\"\n   */\n  assetType?: \"logos\" | \"photos\" | \"documents\" | \"videos\";\n\n  /**\n   * Whether to upsert the file if it already exists\n   * @default false\n   */\n  upsert?: boolean;\n\n  /**\n   * Cache control setting for the file\n   * @default \"3600\"\n   */\n  cacheControl?: string;\n};\n\nexport function useSupabaseUpload() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);\n\n  /**\n   * Upload a file to Supabase storage\n   * @param file The file to upload\n   * @param options Upload options including studioSlug for organization\n   * @returns The public URL of the uploaded file\n   */\n  const uploadFile = async (\n    file: File, \n    options: UploadOptions = {}\n  ): Promise<string> => {\n    const {\n      bucket = \"studio-assets\",\n      studioSlug,\n      assetType = \"logos\",\n      upsert = false,\n      cacheControl = \"3600\"\n    } = options;\n\n    setIsUploading(true);\n    setProgress({ [file.name]: 0 });\n\n    try {\n      const supabase = createClient();\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${crypto.randomUUID()}.${fileExt}`;\n      \n      // Build the file path with studioSlug if provided\n      let filePath = assetType;\n      \n      // If studioSlug is provided, use it to organize files\n      if (studioSlug) {\n        filePath = `${studioSlug}/${assetType}`;\n      }\n      \n      // Complete the path with the file name\n      filePath = `${filePath}/${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(filePath, file, {\n          cacheControl,\n          upsert,\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(data.path);\n\n      const url = publicUrlData.publicUrl;\n      setUploadedUrl(url);\n      return url;\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      throw error;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Manually set progress (can be used with XHR if needed)\n  const updateProgress = (fileName: string, loaded: number, total: number) => {\n    const percentage = (loaded / total) * 100;\n    setProgress({ [fileName]: percentage });\n  };\n\n  return {\n    uploadFile,\n    isUploading,\n    progress,\n    uploadedUrl,\n    updateProgress,\n  };\n}\n```\n\nNow, when using this hook in your new-studio-form.tsx component, you can pass the studio slug once it's generated to organize files properly:\n\n```tsx\n// In the onSubmit function of new-studio-form.tsx\nasync function onSubmit(data: FormData) {\n  try {\n    // If there's a logo file, upload it first\n    if (logoFile.length > 0 && logoFile[0]) {\n      // Pass the slug to organize files\n      const logoUrl = await uploadFile(logoFile[0], {\n        studioSlug: data.slug,\n        assetType: \"logos\"\n      });\n      data.logo = logoUrl;\n    }\n    \n    // Submit the complete data\n    createStudio.mutate(data);\n  } catch (error) {\n    console.error(\"Error creating studio:\", error);\n  }\n}\n```\n\nThis approach provides several benefits:\n\n1. Files are organized by studio slug, making them easier to manage\n2. Different asset types (logos, photos, etc.) are kept in separate folders\n3. The configuration is flexible, allowing you to change storage organization as needed\n4. The bucket name is also configurable in case you need to use different buckets\n\nThis structure will create paths in your storage like:\n- `studio-assets/my-studio-slug/logos/filename.jpg`\n- `studio-assets/another-studio/photo\n\n\n```tsx dance-book-app/src/hooks/use-upload-file.tsx\nimport { useState } from \"react\";\nimport { createClient } from \"~/lib/supabase/client\";\n\ntype UploadOptions = {\n  /**\n   * The storage bucket to upload to\n   * @default \"studio-assets\"\n   */\n  bucket?: string;\n\n  /**\n   * Optional subfolder path within the bucket (e.g., a studio slug)\n   * This will create a folder structure like: bucket/studioSlug/logos/file.jpg\n   */\n  studioSlug?: string;\n\n  /**\n   * The type of asset being uploaded\n   * @default \"logos\"\n   */\n  assetType?: \"logos\" | \"photos\" | \"documents\" | \"videos\";\n\n  /**\n   * Whether to upsert the file if it already exists\n   * @default false\n   */\n  upsert?: boolean;\n\n  /**\n   * Cache control setting for the file\n   * @default \"3600\"\n   */\n  cacheControl?: string;\n};\n\nexport function useSupabaseUpload() {\n  const [isUploading, setIsUploading] = useState(false);\n  const [progress, setProgress] = useState<Record<string, number>>({});\n  const [uploadedUrl, setUploadedUrl] = useState<string | null>(null);\n\n  /**\n   * Upload a file to Supabase storage\n   * @param file The file to upload\n   * @param options Upload options including studioSlug for organization\n   * @returns The public URL of the uploaded file\n   */\n  const uploadFile = async (\n    file: File,\n    options: UploadOptions = {},\n  ): Promise<string> => {\n    const {\n      bucket = \"studio-assets\",\n      studioSlug,\n      assetType = \"logos\",\n      upsert = false,\n      cacheControl = \"3600\",\n    } = options;\n\n    setIsUploading(true);\n    setProgress({ [file.name]: 0 });\n\n    try {\n      const supabase = createClient();\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${crypto.randomUUID()}.${fileExt}`;\n\n      // Build the file path with studioSlug if provided\n      let filePath = assetType;\n\n      // If studioSlug is provided, use it to organize files\n      if (studioSlug) {\n        filePath = `${studioSlug}/${assetType}`;\n      }\n\n      // Complete the path with the file name\n      filePath = `${filePath}/${fileName}`;\n\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(filePath, file, {\n          cacheControl,\n          upsert,\n        });\n\n      if (error) {\n        throw error;\n      }\n\n      // Get public URL\n      const { data: publicUrlData } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(data.path);\n\n      const url = publicUrlData.publicUrl;\n      setUploadedUrl(url);\n      return url;\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      throw error;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // Manually set progress (can be used with XHR if needed)\n  const updateProgress = (fileName: string, loaded: number, total: number) => {\n    const percentage = (loaded / total) * 100;\n    setProgress({ [fileName]: percentage });\n  };\n\n  return {\n    uploadFile,\n    isUploading,\n    progress,\n    uploadedUrl,\n    updateProgress,\n  };\n}\n```\n\ndiagnostics\ndance-book-app/src/hooks/use-upload-file.tsx\n```tsx\n      // If studioSlug is provided, use it to organize files\n      if (studioSlug) {\n        filePath = `${studioSlug}/${assetType}`;\n// error: Type '`${string}/logos` | `${string}/photos` | `${string}/documents` | `${string}/videos`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n//          Type '`${string}/logos`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n      }\n\n```\n```tsx\n\n      // Complete the path with the file name\n      filePath = `${filePath}/${fileName}`;\n// error: Type '`logos/${string}` | `photos/${string}` | `documents/${string}` | `videos/${string}`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n//          Type '`logos/${string}`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n\n      const { data, error } = await supabase.storage\n```\ndance-book-app/src/hooks/use-controllable-state.tsx\n```tsx\n  prop,\n  defaultProp,\n  onChange = () => {},\n// error: Unexpected empty arrow function.\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n```\n\ncan you fix the diagnostic\n errors\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1802}}},{"id":{"replica_id":0,"value":152},"start":23712,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1803}}},{"id":{"replica_id":0,"value":242},"start":38053,"metadata":{"role":"assistant","status":"Canceled","timestamp":{"replica_id":0,"value":1804}}},{"id":{"replica_id":0,"value":243},"start":43818,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1805}}},{"id":{"replica_id":0,"value":521},"start":53559,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1806}}},{"id":{"replica_id":0,"value":522},"start":85782,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1807}}},{"id":{"replica_id":0,"value":622},"start":90466,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1808}}},{"id":{"replica_id":0,"value":623},"start":101687,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1809}}},{"id":{"replica_id":0,"value":1085},"start":103425,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1810}}},{"id":{"replica_id":0,"value":1379},"start":103484,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1811}}},{"id":{"replica_id":0,"value":1629},"start":107799,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1812}}},{"id":{"replica_id":0,"value":1786},"start":112003,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1813}}},{"id":{"replica_id":0,"value":1787},"start":112011,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1814}}}],"summary":"First, let me implement the studio form with logo upload and opening hours functionality:","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":17452},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":17453,"end":21501},"icon":"Library","label":"next-tw-zod-zustand-shad","metadata":null},{"range":{"start":21502,"end":23584},"icon":"File","label":"dance-book-app/prisma/schema.prisma","metadata":{"path":"dance-book-app/prisma/schema.prisma"}},{"range":{"start":23712,"end":37668},"icon":"File","label":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx","metadata":{"path":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx"}},{"range":{"start":37669,"end":37936},"icon":"File","label":"dance-book-app/src/lib/supabase/client.ts","metadata":{"path":"dance-book-app/src/lib/supabase/client.ts"}},{"range":{"start":43821,"end":53451},"icon":"File","label":"dance-book-app/src/components/file-upload.tsx","metadata":{"path":"dance-book-app/src/components/file-upload.tsx"}},{"range":{"start":85782,"end":90442},"icon":"Warning","label":"Diagnostics: 8 errors","metadata":null},{"range":{"start":85794,"end":87053},"icon":"File","label":"dance-book-app/src/hooks/use-upload-file.tsx","metadata":null},{"range":{"start":85839,"end":86198},"icon":"XCircle","label":"Object literal may only specify known properties, and 'onUploadProgress' does not exist in type 'FileOptions'.","metadata":null},{"range":{"start":86199,"end":86498},"icon":"XCircle","label":"Parameter 'progress' implicitly has an 'any' type.","metadata":null},{"range":{"start":86499,"end":86776},"icon":"XCircle","label":"Unsafe member access .loaded on an `any` value.","metadata":null},{"range":{"start":86777,"end":87053},"icon":"XCircle","label":"Unsafe member access .total on an `any` value.","metadata":null},{"range":{"start":87054,"end":88313},"icon":"File","label":"dance-book-app/src/hooks/use-upload-file.tsx","metadata":null},{"range":{"start":87099,"end":87458},"icon":"XCircle","label":"Object literal may only specify known properties, and 'onUploadProgress' does not exist in type 'FileOptions'.","metadata":null},{"range":{"start":87459,"end":87758},"icon":"XCircle","label":"Parameter 'progress' implicitly has an 'any' type.","metadata":null},{"range":{"start":87759,"end":88036},"icon":"XCircle","label":"Unsafe member access .loaded on an `any` value.","metadata":null},{"range":{"start":88037,"end":88313},"icon":"XCircle","label":"Unsafe member access .total on an `any` value.","metadata":null},{"range":{"start":88314,"end":89096},"icon":"File","label":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx","metadata":null},{"range":{"start":88373,"end":88713},"icon":"XCircle","label":"Argument of type 'File | undefined' is not assignable to parameter of type 'File'.\n  Type 'undefined' is not assignable to type 'File'.","metadata":null},{"range":{"start":88714,"end":89096},"icon":"XCircle","label":"Use a ! assertion to more succinctly remove null and undefined from the type.","metadata":null},{"range":{"start":89097,"end":89879},"icon":"File","label":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx","metadata":null},{"range":{"start":89156,"end":89496},"icon":"XCircle","label":"Argument of type 'File | undefined' is not assignable to parameter of type 'File'.\n  Type 'undefined' is not assignable to type 'File'.","metadata":null},{"range":{"start":89497,"end":89879},"icon":"XCircle","label":"Use a ! assertion to more succinctly remove null and undefined from the type.","metadata":null},{"range":{"start":89880,"end":90140},"icon":"File","label":"dance-book-app/src/hooks/use-controllable-state.tsx","metadata":null},{"range":{"start":89932,"end":90140},"icon":"XCircle","label":"Unexpected empty arrow function.","metadata":null},{"range":{"start":90141,"end":90441},"icon":"File","label":"dance-book-app/src/components/opening-hours.tsx","metadata":null},{"range":{"start":90189,"end":90441},"icon":"XCircle","label":"Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.","metadata":null},{"range":{"start":101687,"end":103380},"icon":"File","label":"dance-book-app/src/hooks/use-upload-file.tsx","metadata":{"path":"dance-book-app/src/hooks/use-upload-file.tsx"}},{"range":{"start":107799,"end":110778},"icon":"File","label":"dance-book-app/src/hooks/use-upload-file.tsx","metadata":{"path":"dance-book-app/src/hooks/use-upload-file.tsx"}},{"range":{"start":110779,"end":111975},"icon":"Warning","label":"Diagnostics: 3 errors","metadata":null},{"range":{"start":110791,"end":111713},"icon":"File","label":"dance-book-app/src/hooks/use-upload-file.tsx","metadata":null},{"range":{"start":110836,"end":111273},"icon":"XCircle","label":"Type '`${string}/logos` | `${string}/photos` | `${string}/documents` | `${string}/videos`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n  Type '`${string}/logos`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.","metadata":null},{"range":{"start":111274,"end":111713},"icon":"XCircle","label":"Type '`logos/${string}` | `photos/${string}` | `documents/${string}` | `videos/${string}`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.\n  Type '`logos/${string}`' is not assignable to type '\"logos\" | \"photos\" | \"documents\" | \"videos\"'.","metadata":null},{"range":{"start":111714,"end":111974},"icon":"File","label":"dance-book-app/src/hooks/use-controllable-state.tsx","metadata":null},{"range":{"start":111766,"end":111974},"icon":"XCircle","label":"Unexpected empty arrow function.","metadata":null}]}