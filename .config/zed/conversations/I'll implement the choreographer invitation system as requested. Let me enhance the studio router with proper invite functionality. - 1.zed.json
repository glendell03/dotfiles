{"id":"2911b648-6971-4f6f-b7e7-3de7d1a12f00","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\nas a senior developer who code with best practices and optimize code\n\nyou are proficient in working in nextjs, supabase, prisma\n\nwe are building a web app were studio can manage the dance class schedules and user can smoothly book and pay for it the studio can invite choreographers and add it as member with a role of \"CHOREOGRAPHERS\"\n\nThese are your task:\n\ncreate an api where we can invite a choreographer without sending an email. as you can see in the studio.ts we have already started coding it but can you make it more functional cause it is not working right now\nthe studio will copy the link and then send it to the choreographer. when open it will be redirected to the \"/invite-accept\" page\nin the page choreographer can accept the invite then upon accepting it will call a trpc api again to update the studioInvitation status and the profile will be added to the studioMember\nwe need to properly handle the unauthenticated user like if the choreographer is not yet registered or logged in the app\nas a senior developer how will you do it.\n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n  staffProcedure,\n} from \"../trpc\";\nimport { type Prisma, type Studio } from \"@prisma/client\";\nimport { Country, State } from \"country-state-city\";\nimport { createClient } from \"~/lib/supabase/server\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid().optional(),\n  slug: z.string().min(3).max(100).optional(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Helper function to enhance studio data with full country and state names\nconst enhanceStudioWithLocationNames = <T extends Studio>(\n  studio: T,\n): (T & { countryName?: string; stateName?: string }) | null => {\n  if (!studio) return null;\n\n  const enhancedStudio = { ...studio } as T & {\n    countryName?: string;\n    stateName?: string;\n  };\n\n  if (studio.country) {\n    const countryData = Country.getCountryByCode(studio.country);\n    enhancedStudio.countryName = countryData?.name;\n  }\n\n  if (studio.state && studio.country) {\n    const stateData = State.getStateByCodeAndCountry(\n      studio.state,\n      studio.country,\n    );\n    enhancedStudio.stateName = stateData?.name;\n  }\n\n  return enhancedStudio;\n};\n\n// Helper function to enhance studio arrays\nconst enhanceStudiosWithLocationNames = <T extends Studio>(\n  studios: T[],\n): Array<(T & { countryName?: string; stateName?: string }) | null> => {\n  return studios.map(enhanceStudioWithLocationNames);\n};\n\nexport type EnhancedStudios = ReturnType<\n  typeof enhanceStudiosWithLocationNames\n>;\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return enhanceStudioWithLocationNames(studio);\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id, slug: input.slug },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return enhanceStudioWithLocationNames(studio);\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        const updatedStudio = await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n\n        return enhanceStudioWithLocationNames(updatedStudio);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          const deletedStudio = await tx.studio.delete({\n            where: { id: input.studioId },\n          });\n\n          return enhanceStudioWithLocationNames(deletedStudio);\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios: enhanceStudiosWithLocationNames(studios),\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        // Enhance studio data in each membership\n        return memberships.map((membership) => ({\n          ...membership,\n          studio: enhanceStudioWithLocationNames(membership.studio),\n        }));\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...member,\n          studio: enhanceStudioWithLocationNames(member.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        const updatedMember = await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...updatedMember,\n          studio: enhanceStudioWithLocationNames(updatedMember.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Rest of the code remains unchanged...\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  getMembers: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        return members;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n\n  inviteChoreographer: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n        role: z\n          .enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"])\n          .default(\"CHOREOGRAPHER\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // 1. Create the Supabase server client\n        const supabase = await createClient({ isAdmin: true });\n\n        // 2. Check for existing member with this email at this studio\n        const existingInvitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            email: input.email,\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (existingInvitation) {\n          return {\n            email: input.email,\n            status: \"already_invited\",\n          };\n        }\n\n        // Store actionLink value\n        let actionLink: string | undefined;\n\n        // 3. Send invitation via Supabase OTP\n        try {\n          const { data, error } = await supabase.auth.admin.generateLink({\n            type: \"magiclink\",\n            email: input.email,\n            options: {\n              data: {\n                studioId: input.studioId,\n                invitedRole: input.role,\n                email: input.email,\n              },\n              redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${input.role}`,\n            },\n          });\n\n          if (error) {\n            throw new TRPCError({\n              code: \"INTERNAL_SERVER_ERROR\",\n              message: \"Failed to send invitation\",\n              cause: error,\n            });\n          }\n\n          // Extract the action_link from the response\n          if (data?.properties?.action_link) {\n            actionLink = data.properties.action_link;\n          }\n        } catch (authError) {\n          console.error(\"Error sending invitation:\", authError);\n          throw new TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to send invitation email\",\n            cause: authError,\n          });\n        }\n\n        // 4. Store the pending invitation in your database with expiration (30 days)\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        await ctx.db.studioInvitation.create({\n          data: {\n            email: input.email,\n            studioId: input.studioId,\n            role: input.role,\n            invitedById: ctx.profile.id,\n            expiresAt: expirationDate,\n            status: \"PENDING\", // Explicitly set status\n          },\n        });\n\n        return {\n          email: input.email,\n          status: \"invited\",\n          actionLink, // Include the action link in the response\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Invite choreographer error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to invite choreographer\",\n          cause: error,\n        });\n      }\n    }),\n\n  acceptInvitation: publicProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Find the pending invitation\n        const invitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            studioId: input.studioId,\n            email: input.email,\n            status: \"PENDING\",\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"No valid invitation found\",\n          });\n        }\n\n        // Check if not expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        const supabase = await createClient({ isAdmin: true });\n        // Get user by email using admin API\n        const { data: userData, error: userError } =\n          await supabase.auth.admin.listUsers();\n\n        if (userError) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"User account not found for this email address\",\n          });\n        }\n\n        // Now you have the user's auth ID\n        const authUser = userData.users.find(\n          (user) => user.email === input.email,\n        );\n\n        // Find the corresponding profile\n        const profile = await ctx.db.profile.findUnique({\n          where: { authId: authUser?.id },\n        });\n\n        if (!profile) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"User profile not found\",\n          });\n        }\n\n        // Check if user is already a member\n        const existingMembership = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: profile.id,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMembership) {\n          // Update invitation status\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"ACCEPTED\" },\n          });\n\n          return {\n            status: \"already_member\",\n            membership: existingMembership,\n          };\n        }\n\n        // Create new membership in a transaction\n        const result = await ctx.db.$transaction(async (tx) => {\n          // Add user to studio\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: profile.id,\n              studioId: input.studioId,\n              role: invitation.role, // Use role from invitation record\n            },\n            include: {\n              studio: true,\n              profile: true,\n            },\n          });\n\n          // Update invitation status\n          await tx.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"ACCEPTED\" },\n          });\n\n          return membership;\n        });\n\n        return {\n          status: \"accepted\",\n          membership: {\n            ...result,\n            studio: enhanceStudioWithLocationNames(result.studio),\n          },\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to accept invitation\",\n          cause: error,\n        });\n      }\n    }),\n\n  listPendingInvitations: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const invitations = await ctx.db.studioInvitation.findMany({\n          where: {\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n          include: {\n            invitedBy: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        return invitations;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list invitations\",\n          cause: error,\n        });\n      }\n    }),\n\n  resendInvitation: adminProcedure\n    .input(\n      z.object({\n        invitationId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Get the invitation\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: { id: input.invitationId },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found\",\n          });\n        }\n\n        // Check if invitation is still pending\n        if (invitation.status !== \"PENDING\") {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Cannot resend invitation with status: ${invitation.status}`,\n          });\n        }\n\n        // Create Supabase client\n        const supabase = await createClient();\n\n        // Resend invitation\n        const { error } = await supabase.auth.admin.generateLink({\n          type: \"magiclink\",\n          email: invitation.email,\n          options: {\n            data: {\n              studioId: invitation.studioId,\n              invitedRole: invitation.role,\n            },\n            redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${invitation.studioId}&role=${invitation.role}`,\n          },\n        });\n\n        if (error) {\n          throw new TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"Failed to resend invitation\",\n            cause: error,\n          });\n        }\n\n        // Update expiration date\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        const updatedInvitation = await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { expiresAt: expirationDate },\n        });\n\n        return {\n          status: \"resent\",\n          invitation: updatedInvitation,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to resend invitation\",\n          cause: error,\n        });\n      }\n    }),\n\n  cancelInvitation: adminProcedure\n    .input(\n      z.object({\n        invitationId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const deletedInvitation = await ctx.db.studioInvitation.update({\n          where: { id: input.invitationId },\n          data: { status: \"CANCELLED\" },\n        });\n\n        return { status: \"cancelled\", invitation: deletedInvitation };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to cancel invitation\",\n          cause: error,\n        });\n      }\n    }),\n});\n```\n\n```prisma dance-book-app/prisma/schema.prisma\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\nmodel Profile {\n  id     String @id @default(uuid()) @db.Uuid\n  authId String @unique @db.Uuid\n\n  // Relationships\n  studioMembers StudioMember[]\n\n  // Timestamps\n  createdAt        DateTime           @default(now()) @db.Timestamp\n  updatedAt        DateTime           @updatedAt @db.Timestamp\n  Booking          Booking[]\n  StudioInvitation StudioInvitation[]\n}\n\nmodel Studio {\n  id          String  @id @default(uuid()) @db.Uuid\n  slug        String  @unique @db.VarChar(100)\n  name        String  @db.VarChar(100)\n  description String? @db.Text\n  address     String  @db.VarChar(255)\n  city        String  @db.VarChar(100)\n  state       String  @db.VarChar(100)\n  postalCode  String  @db.VarChar(20)\n  country     String  @db.Char(2)\n  logo        String? @db.VarChar(255)\n\n  isActive Boolean @default(true)\n\n  openingHours Json? @db.JsonB // Store hours of operation as JSON\n\n  // Relationships\n  members StudioMember[]\n\n  // Timestamps\n  createdAt        DateTime           @default(now()) @db.Timestamp\n  updatedAt        DateTime           @updatedAt @db.Timestamp\n  Schedule         Schedule[]\n  StudioInvitation StudioInvitation[]\n\n  // Indexes\n  @@index([city, country])\n  @@index([isActive])\n  @@index([slug])\n}\n\nenum StudioRole {\n  OWNER\n  ADMIN\n  CHOREOGRAPHER\n  STAFF\n}\n\nmodel StudioMember {\n  id String @id @default(uuid()) @db.Uuid\n\n  // Relationship fields\n  profileId String  @db.Uuid\n  studioId  String  @db.Uuid\n  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)\n  studio    Studio  @relation(fields: [studioId], references: [id], onDelete: Cascade)\n\n  // Role and permissions\n  role StudioRole @default(STAFF)\n\n  choreographerSchedules Schedule[] @relation(\"ChoreographerSchedules\")\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Unique constraint to prevent duplicate memberships\n  @@unique([profileId, studioId])\n  // Indexes for performance\n  @@index([profileId])\n  @@index([studioId])\n  @@index([role])\n}\n\nmodel Schedule {\n  id          String   @id @default(uuid()) @db.Uuid\n  title       String   @db.VarChar(100)\n  description String?  @db.Text\n  startTime   DateTime @db.Timestamp\n  endTime     DateTime @db.Timestamp\n  maxCapacity Int?     @db.Integer\n\n  // Pricing\n  price    Decimal? @db.Decimal(10, 2)\n  currency String?  @db.Char(3) // ISO 4217 currency code\n\n  // Status\n  isActive    Boolean @default(true)\n  isCancelled Boolean @default(false)\n\n  // Location information (room/studio specific)\n  location String? @db.VarChar(100)\n\n  // Relationships\n  studioId        String        @db.Uuid\n  studio          Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  choreographerId String?       @db.Uuid\n  choreographer   StudioMember? @relation(name: \"ChoreographerSchedules\", fields: [choreographerId], references: [id], onDelete: SetNull)\n\n  // For handling bookings\n  bookings Booking[]\n\n  // Dance style/class type\n  danceStyle String? @db.VarChar(50)\n  level      String? @db.VarChar(50)\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Indexes\n  @@index([studioId])\n  @@index([choreographerId])\n  @@index([startTime])\n  @@index([isActive, isCancelled])\n  @@index([danceStyle])\n}\n\nmodel Booking {\n  id     String        @id @default(uuid()) @db.Uuid\n  status BookingStatus @default(RESERVED)\n  notes  String?       @db.Text\n\n  // Relationships\n  scheduleId String   @db.Uuid\n  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)\n  profileId  String   @db.Uuid\n  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)\n\n  // Payment information\n  paymentId String?  @db.Uuid\n  payment   Payment? @relation(fields: [paymentId], references: [id])\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Indexes\n  @@index([scheduleId])\n  @@index([profileId])\n  @@index([status])\n  @@index([createdAt])\n}\n\nenum BookingStatus {\n  RESERVED\n  CONFIRMED\n  CANCELLED\n  ATTENDED\n  NO_SHOW\n}\n\nmodel Payment {\n  id       String        @id @default(uuid()) @db.Uuid\n  amount   Decimal       @db.Decimal(10, 2)\n  currency String        @db.Char(3) // ISO 4217 currency code\n  status   PaymentStatus @default(PENDING)\n\n  // Payment provider details\n  externalId String? @db.VarChar(100) // ID from payment provider\n  provider   String? @db.VarChar(50) // e.g., \"stripe\", \"paypal\"\n\n  // Relationships\n  bookings Booking[]\n\n  // Timestamps\n  createdAt DateTime @default(now()) @db.Timestamp\n  updatedAt DateTime @updatedAt @db.Timestamp\n\n  // Indexes\n  @@index([status])\n  @@index([externalId])\n}\n\nenum PaymentStatus {\n  PENDING\n  COMPLETED\n  FAILED\n  REFUNDED\n}\n\nmodel StudioInvitation {\n  id          String     @id @default(uuid()) @db.Uuid\n  email       String\n  studioId    String     @db.Uuid\n  studio      Studio     @relation(fields: [studioId], references: [id], onDelete: Cascade)\n  role        StudioRole @default(CHOREOGRAPHER)\n  invitedById String     @db.Uuid\n  invitedBy   Profile    @relation(fields: [invitedById], references: [id])\n  status      String     @default(\"PENDING\")\n  createdAt   DateTime   @default(now()) @db.Timestamp\n  expiresAt   DateTime   @db.Timestamp\n\n  @@index([email, studioId])\n  @@index([status])\n}\n```\n\n```tsx dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClient } from \"~/lib/supabase/client\";\nimport { useAuthWithInvites } from \"~/hooks/use-auth-with-invites\";\nimport { Loader2 } from \"lucide-react\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport { api } from \"~/trpc/react\";\nimport { toast } from \"sonner\";\nimport { Input } from \"~/components/ui/input\";\n\ninterface InviteAcceptContentProps {\n  studioId: string;\n  role: string;\n  token?: string;\n  studioName?: string;\n}\n\nexport function InviteAcceptContent({\n  studioId,\n  role,\n  token,\n  studioName = \"Studio\",\n}: InviteAcceptContentProps) {\n  const [error, setError] = useState<string | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [sentEmail, setSentEmail] = useState(false);\n  const router = useRouter();\n  const supabase = createClient();\n\n  // Use the auth hook to handle authentication status\n  const { user, loading: authLoading } = useAuthWithInvites();\n\n  // Get the acceptInvitation mutation\n  const { mutate: acceptInvitation, isPending: isAcceptingInvitation } =\n    api.studio.acceptInvitation.useMutation({\n      onSuccess: (data) => {\n        toast.success(\"Successfully joined studio!\");\n        // Navigate to the studio page\n        if (data.membership.studio?.slug) {\n          router.push(`/studio/${data.membership.studio.slug}`);\n        } else {\n          router.push(`/studios`);\n        }\n      },\n      onError: (error) => {\n        console.error(\"Error accepting invitation:\", error);\n        toast.error(\"Failed to join studio: \" + error.message);\n        setError(error.message);\n        setProcessing(false);\n      },\n    });\n\n  // Handle magic link sign-in\n  const handleMagicLinkSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email.trim()) {\n      toast.error(\"Please enter your email address\");\n      return;\n    }\n\n    try {\n      setProcessing(true);\n\n      // Generate magic link that redirects back to this invitation page\n      const { error } = await supabase.auth.signInWithOtp({\n        email: email.trim(),\n        options: {\n          emailRedirectTo: window.location.href, // Redirect back to this page\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Show success message\n      toast.success(\"Check your email for a sign-in link!\");\n      setSentEmail(true);\n    } catch (err) {\n      console.error(\"Error sending magic link:\", err);\n      toast.error(\n        err instanceof Error ? err.message : \"Failed to send sign-in link\",\n      );\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // When the user clicks \"Join Studio\" button\n  const handleAcceptInvitation = async () => {\n    if (!studioId || !user?.email) return;\n\n    try {\n      setProcessing(true);\n\n      // Accept the invitation using the TRPC mutation\n      acceptInvitation({\n        studioId,\n        role: role as \"ADMIN\" | \"CHOREOGRAPHER\" | \"STAFF\",\n        email: user.email,\n      });\n    } catch (err) {\n      console.error(\"Error accepting invitation:\", err);\n      setError(\n        err instanceof Error ? err.message : \"Failed to accept invitation\",\n      );\n      setProcessing(false);\n    }\n  };\n\n  // Error state\n  if (error) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-red-50\"\n        className=\"mt-4 p-4 text-center\"\n      >\n        <p className=\"mb-3 text-red-700\">{error}</p>\n        <NeoButton onClick={() => router.push(\"/\")} size=\"sm\">\n          Go to Home Page\n        </NeoButton>\n      </NeoCard>\n    );\n  }\n\n  // Processing state\n  if (\n    (processing || authLoading || isAcceptingInvitation) &&\n    studioId &&\n    role\n  ) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-blue-50\"\n        className=\"mb-6 p-4 text-center\"\n      >\n        <div className=\"mb-2 flex justify-center\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n        </div>\n        <p className=\"text-gray-700\">Processing your invitation...</p>\n      </NeoCard>\n    );\n  }\n\n  // Render magic link sign-in form if not signed in\n  if (!user) {\n    return (\n      <>\n        <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n          <p className=\"mb-3 text-center text-lg font-bold\">\n            You've been invited as a\n            <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n              {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n            </span>\n          </p>\n\n          {sentEmail ? (\n            <div className=\"text-center\">\n              <p className=\"mb-4 text-gray-700\">\n                Check your email for a sign-in link!\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                After signing in, you'll be able to accept this invitation.\n              </p>\n            </div>\n          ) : (\n            <form onSubmit={handleMagicLinkSignIn} className=\"mt-4 space-y-4\">\n              <p className=\"mb-2 text-center text-gray-700\">\n                Sign in with your email to accept this invitation\n              </p>\n              <Input\n                type=\"email\"\n                placeholder=\"Your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"w-full\"\n              />\n              <NeoButton\n                type=\"submit\"\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={processing}\n              >\n                {processing ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </NeoButton>\n            </form>\n          )}\n        </NeoCard>\n      </>\n    );\n  }\n\n  // Render the accept invitation UI for signed-in users\n  return (\n    <>\n      <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n        <p className=\"mb-3 text-center text-lg font-bold\">\n          You've been invited as a\n          <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n            {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n          </span>\n        </p>\n        <p className=\"text-center text-gray-700\">\n          You're signed in as{\" \"}\n          <strong className=\"font-bold\">{user.email}</strong>\n        </p>\n      </NeoCard>\n\n      <NeoButton\n        onClick={handleAcceptInvitation}\n        disabled={processing || isAcceptingInvitation}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {processing || isAcceptingInvitation ? (\n          <>\n            <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          <>Join {studioName}</>\n        )}\n      </NeoButton>\n    </>\n  );\n}\n```\n\n```tsx dance-book-app/src/app/(public)/invite-accept/page.tsx\nimport React, { Suspense } from \"react\";\nimport { api, HydrateClient } from \"~/trpc/server\";\nimport { InviteAcceptContent } from \"./invite-accept-content\";\nimport { InviteAcceptSkeleton } from \"./invite-accept-skeleton\";\nimport { MapPin, Building2 } from \"lucide-react\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport Image from \"next/image\";\nimport { notFound } from \"next/navigation\";\n\ninterface InviteAcceptPageProps {\n  searchParams: Promise<{\n    studioId?: string;\n    role?: string;\n    token?: string;\n  }>;\n}\n\n// Server component to display the studio information\nasync function InviteAcceptServer({\n  studioId,\n  role,\n  token,\n}: {\n  studioId?: string;\n  role?: string;\n  token?: string;\n}) {\n  // Return early if no studioId\n  if (!studioId || !role) {\n    return notFound();\n  }\n\n  // Fetch studio data on the server\n  const studioData = await api.studio.findUnique({ id: studioId });\n\n  if (!studioData) {\n    return notFound();\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center p-4 sm:p-8\">\n      <NeoCard className=\"w-full max-w-md overflow-hidden p-0\">\n        {/* Studio Logo/Banner */}\n        <div className=\"neo-border relative h-40 w-full overflow-hidden rounded-xl border-b-4 border-black\">\n          {studioData.logo ? (\n            <Image\n              src={studioData.logo}\n              alt={studioData.name}\n              fill\n              sizes=\"(max-width: 768px) 100vw, 400px\"\n              className=\"object-cover\"\n              unoptimized\n            />\n          ) : (\n            <div className=\"flex h-full w-full items-center justify-center bg-muted\">\n              <Building2 className=\"h-16 w-16 text-muted-foreground\" />\n            </div>\n          )}\n          {/* Fallback Building icon that will show when image errors */}\n          <div className=\"hidden h-full w-full items-center justify-center\">\n            <Building2 className=\"h-16 w-16 text-muted-foreground\" />\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Studio Info */}\n          <div className=\"mb-8\">\n            <h1 className=\"mb-3 text-center text-2xl font-black\">\n              {studioData.name || \"Studio\"}\n            </h1>\n\n            <div className=\"mb-4 flex items-start gap-2\">\n              <MapPin className=\"mt-1 h-5 w-5 flex-shrink-0 text-primary\" />\n              <p className=\"text-md\">\n                {studioData.address},{studioData.city},{\" \"}\n                {studioData.stateName || studioData.state}\n                {studioData.postalCode && `, ${studioData.postalCode}`}\n              </p>\n            </div>\n\n            {studioData.description && (\n              <p className=\"mt-3 text-gray-700\">{studioData.description}</p>\n            )}\n          </div>\n\n          {/* Client component handles authentication */}\n          <InviteAcceptContent\n            token={token}\n            studioId={studioId}\n            role={role}\n            studioName={studioData.name}\n          />\n        </div>\n      </NeoCard>\n    </div>\n  );\n}\n\nexport default async function InviteAcceptPage({\n  searchParams,\n}: InviteAcceptPageProps) {\n  const { studioId, role, token } = await searchParams;\n\n  return (\n    <Suspense fallback={<InviteAcceptSkeleton />}>\n      <InviteAcceptServer studioId={studioId} role={role} token={token} />\n    </Suspense>\n  );\n}\n```\n\n\n    You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.\n    \n        ### Objective\n        - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.\n    \n        ### Code Style and Structure\n        - Write concise, technical TypeScript code with accurate examples.\n        - Use functional and declarative programming patterns; avoid classes.\n        - Favor iteration and modularization over code duplication.\n        - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).\n        - Structure files with exported components, subcomponents, helpers, static content, and types.\n        - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).\n    \n        ### Optimization and Best Practices\n        - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.\n        - Implement dynamic imports for code splitting and optimization.\n        - Use responsive design with a mobile-first approach.\n        - Optimize images: use WebP format, include size data, implement lazy loading.\n    \n        ### Error Handling and Validation\n        - Prioritize error handling and edge cases:\n          - Use early returns for error conditions.\n          - Implement guard clauses to handle preconditions and invalid states early.\n          - Use custom error types for consistent error handling.\n    \n        ### UI and Styling\n        - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.\n        - Implement consistent design and responsive patterns across platforms.\n    \n        ### State Management and Data Fetching\n        - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.\n        - Implement validation using Zod for schema validation.\n    \n        ### Security and Performance\n        - Implement proper error handling, user input validation, and secure coding practices.\n        - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.\n    \n        ### Testing and Documentation\n        - Write unit tests for components using Jest and React Testing Library.\n        - Provide clear and concise comments for complex logic.\n        - Use JSDoc comments for functions and components to improve IDE intellisense.\n    \n        ### Methodology\n        1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.\n        2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.\n        3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.\n    \n        **Process**:\n        1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.\n        2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.\n        3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.\n        4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.\n        5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.\n        \n\n\nI'll implement a complete solution for choreographer invitation functionality. This will include modifying the existing TRPC router, creating necessary API endpoints, and implementing the client-side components for accepting invitations.\n\nLet's start by fixing the studio router's invitation system:\n\n```typescript\n// dance-book-app/src/server/api/routers/studio.ts\n// Add this to the existing file\n\ninviteChoreographerWithLink: adminProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      email: z.string().email(),\n      role: z\n        .enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"])\n        .default(\"CHOREOGRAPHER\"),\n    }),\n  )\n  .mutation(async ({ ctx, input }) => {\n    try {\n      // Check for existing member with this email at this studio\n      const existingMember = await ctx.db.studioMember.findFirst({\n        where: {\n          studio: {\n            id: input.studioId,\n          },\n          profile: {\n            authId: {\n              in: (await ctx.db.$queryRaw`\n                SELECT id FROM auth.users WHERE email = ${input.email}\n              `) as { id: string }[],\n            },\n          },\n        },\n      });\n\n      if (existingMember) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"This user is already a member of this studio\",\n        });\n      }\n\n      // Check for existing pending invitation\n      const existingInvitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          email: input.email,\n          studioId: input.studioId,\n          status: \"PENDING\",\n        },\n      });\n\n      if (existingInvitation) {\n        // Return the existing invitation with a token\n        const token = Buffer.from(\n          JSON.stringify({\n            id: existingInvitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: existingInvitation.role,\n          }),\n        ).toString(\"base64\");\n\n        return {\n          status: \"already_invited\",\n          invitation: existingInvitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${existingInvitation.role}&token=${token}`,\n        };\n      }\n\n      // Store the invitation in the database with expiration (30 days)\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 30);\n\n      const invitation = await ctx.db.studioInvitation.create({\n        data: {\n          email: input.email,\n          studioId: input.studioId,\n          role: input.role,\n          invitedById: ctx.profile.id,\n          expiresAt: expirationDate,\n          status: \"PENDING\",\n        },\n      });\n\n      // Generate a token for the invitation link\n      const token = Buffer.from(\n        JSON.stringify({\n          id: invitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role: input.role,\n        }),\n      ).toString(\"base64\");\n\n      return {\n        status: \"invited\",\n        invitation,\n        inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${input.role}&token=${token}`,\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      console.error(\"Invite choreographer error:\", error);\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to generate invitation link\",\n        cause: error,\n      });\n    }\n  }),\n\nvalidateInvitation: publicProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      email: z.string().email().optional(),\n      token: z.string(),\n    }),\n  )\n  .query(async ({ ctx, input }) => {\n    try {\n      // Decode the token\n      const decodedToken = Buffer.from(input.token, \"base64\").toString(\"utf-8\");\n      const tokenData = JSON.parse(decodedToken) as {\n        id: string;\n        email: string;\n        studioId: string;\n        role: string;\n      };\n\n      if (tokenData.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n\n      // Find the invitation\n      const invitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          id: tokenData.id,\n          email: tokenData.email,\n          studioId: tokenData.studioId,\n          status: \"PENDING\",\n        },\n        include: {\n          studio: true,\n        },\n      });\n\n      if (!invitation) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Invitation not found or already used\",\n        });\n      }\n\n      // Check if expired\n      if (invitation.expiresAt < new Date()) {\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"EXPIRED\" },\n        });\n\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invitation has expired\",\n        });\n      }\n\n      return {\n        valid: true,\n        invitation: {\n          ...invitation,\n          studio: enhanceStudioWithLocationNames(invitation.studio),\n        },\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      console.error(\"Validate invitation error:\", error);\n      throw new TRPCError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid invitation link\",\n        cause: error,\n      });\n    }\n  }),\n\nacceptInvitationWithLink: authedProcedure\n  .input(\n    z.object({\n      token: z.string(),\n    }),\n  )\n  .mutation(async ({ ctx, input }) => {\n    try {\n      // Decode the token\n      const decodedToken = Buffer.from(input.token, \"base64\").toString(\"utf-8\");\n      const tokenData = JSON.parse(decodedToken) as {\n        id: string;\n        email: string;\n        studioId: string;\n        role: string;\n      };\n\n      // Find the invitation\n      const invitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          id: tokenData.id,\n          studioId: tokenData.studioId,\n          status: \"PENDING\",\n        },\n      });\n\n      if (!invitation) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Invitation not found or already used\",\n        });\n      }\n\n      // Check if expired\n      if (invitation.expiresAt < new Date()) {\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"EXPIRED\" },\n        });\n\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invitation has expired\",\n        });\n      }\n\n      // Check if user is already a member\n      const existingMembership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: invitation.studioId,\n          },\n        },\n      });\n\n      if (existingMembership) {\n        // Update invitation status\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"ACCEPTED\" },\n        });\n\n        return {\n          status: \"already_member\",\n          membership: existingMembership,\n        };\n      }\n\n      // Create new membership in a transaction\n      const result = await ctx.db.$transaction(async (tx) => {\n        // Add user to studio\n        const membership = await tx.studioMember.create({\n          data: {\n            profileId: ctx.profile.id,\n            studioId: invitation.studioId,\n            role: invitation.role,\n          },\n          include: {\n            studio: true,\n            profile: true,\n          },\n        });\n\n        // Update invitation status\n        await tx.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"ACCEPTED\" },\n        });\n\n        return membership;\n      });\n\n      return {\n        status: \"accepted\",\n        membership: {\n          ...result,\n          studio: enhanceStudioWithLocationNames(result.studio),\n        },\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to accept invitation\",\n        cause: error,\n      });\n    }\n  }),\n```\n\nNow, let's create a hook to handle authentication specifically for invitation flows:\n\n```typescript\n// dance-book-app/src/hooks/use-auth-with-invites.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { type User } from \"@supabase/supabase-js\";\nimport { createClient } from \"~/lib/supabase/client\";\n\nexport function useAuthWithInvites() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const supabase = createClient();\n\n  useEffect(() => {\n    // Function to get the current session\n    async function getSession() {\n      try {\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session?.user) {\n          setUser(session.user);\n        }\n      } catch (error) {\n        console.error(\"Error getting session:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    // Get initial session\n    void getSession();\n\n    // Listen for auth state changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (_event, session) => {\n        setUser(session?.user ?? null);\n        setLoading(false);\n      }\n    );\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [supabase]);\n\n  return { user, loading };\n}\n```\n\nNext, let's create the skeleton component for the invitation page:\n\n```typescript\n// dance-book-app/src/app/(public)/invite-accept/invite-accept-skeleton.tsx\nimport { Skeleton } from \"~/components/ui/skeleton\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\n\nexport function InviteAcceptSkeleton() {\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center p-4 sm:p-8\">\n      <NeoCard className=\"w-full max-w-md overflow-hidden p-0\">\n        {/* Studio Logo/Banner Skeleton */}\n        <Skeleton className=\"h-40 w-full\" />\n\n        <div className=\"p-6\">\n          {/* Studio Info Skeleton */}\n          <div className=\"mb-8\">\n            <Skeleton className=\"mx-auto mb-3 h-8 w-3/4\" />\n            <div className=\"mb-4 flex items-start gap-2\">\n              <Skeleton className=\"h-5 w-5\" />\n              <Skeleton className=\"h-5 w-full\" />\n            </div>\n            <Skeleton className=\"mt-3 h-16 w-full\" />\n          </div>\n\n          {/* Invitation Content Skeleton */}\n          <Skeleton className=\"mb-6 h-32 w-full\" />\n          <Skeleton className=\"h-12 w-full\" />\n        </div>\n      </NeoCard>\n    </div>\n  );\n}\n```\n\nNow, let's modify the `InviteAcceptContent` component to handle the link-based invitation flow:\n\n```typescript\n// dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport { createClient } from \"~/lib/supabase/client\";\nimport { useAuthWithInvites } from \"~/hooks/use-auth-with-invites\";\nimport { Loader2 } from \"lucide-react\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport { api } from \"~/trpc/react\";\nimport { toast } from \"sonner\";\nimport { Input } from \"~/components/ui/input\";\n\ninterface InviteAcceptContentProps {\n  studioId: string;\n  role: string;\n  token?: string;\n  studioName?: string;\n}\n\nexport function InviteAcceptContent({\n  studioId,\n  role,\n  token,\n  studioName = \"Studio\",\n}: InviteAcceptContentProps) {\n  const [error, setError] = useState<string | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [sentEmail, setSentEmail] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isValidInvitation, setIsValidInvitation] = useState(false);\n  \n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const supabase = createClient();\n\n  // Use the auth hook to handle authentication status\n  const { user, loading: authLoading } = useAuthWithInvites();\n\n  // Validate the invitation token\n  const { data: validationData, isLoading: isValidating } = api.studio.validateInvitation.useQuery(\n    {\n      studioId,\n      token: token || \"\",\n    },\n    {\n      enabled: !!studioId && !!token,\n      retry: false,\n      onError: (err) => {\n        setError(err.message);\n        setIsLoading(false);\n      },\n      onSuccess: () => {\n        setIsValidInvitation(true);\n        setIsLoading(false);\n      },\n    }\n  );\n\n  // Get the acceptInvitationWithLink mutation\n  const { mutate: acceptInvitationWithLink, isPending: isAcceptingInvitation } =\n    api.studio.acceptInvitationWithLink.useMutation({\n      onSuccess: (data) => {\n        toast.success(\"Successfully joined studio!\");\n        // Navigate to the studio page\n        if (data.membership.studio?.slug) {\n          router.push(`/studio/${data.membership.studio.slug}`);\n        } else {\n          router.push(`/studios`);\n        }\n      },\n      onError: (error) => {\n        console.error(\"Error accepting invitation:\", error);\n        toast.error(\"Failed to join studio: \" + error.message);\n        setError(error.message);\n        setProcessing(false);\n      },\n    });\n\n  // Pre-fill email from the invitation if available\n  useEffect(() => {\n    if (validationData?.invitation?.email) {\n      setEmail(validationData.invitation.email);\n    }\n  }, [validationData]);\n\n  // Handle magic link sign-in\n  const handleMagicLinkSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email.trim()) {\n      toast.error(\"Please enter your email address\");\n      return;\n    }\n\n    try {\n      setProcessing(true);\n\n      // Preserve all current query parameters for the redirect\n      const currentUrl = new URL(window.location.href);\n      \n      // Generate magic link that redirects back to this invitation page with all params\n      const { error } = await supabase\n\ncontinue\nLet's continue with the implementation of our choreographer invitation functionality by completing the `InviteAcceptContent` component:\n\n```typescript\n// dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx (continued)\n      // Generate magic link that redirects back to this invitation page with all params\n      const { error } = await supabase.auth.signInWithOtp({\n        email: email.trim(),\n        options: {\n          emailRedirectTo: window.location.href, // Redirect back to this page with all query parameters\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Show success message\n      toast.success(\"Check your email for a sign-in link!\");\n      setSentEmail(true);\n    } catch (err) {\n      console.error(\"Error sending magic link:\", err);\n      toast.error(\n        err instanceof Error ? err.message : \"Failed to send sign-in link\",\n      );\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // When the user clicks \"Join Studio\" button\n  const handleAcceptInvitation = async () => {\n    if (!studioId || !token || !user) return;\n\n    try {\n      setProcessing(true);\n\n      // Accept the invitation using the TRPC mutation with the token\n      acceptInvitationWithLink({\n        token,\n      });\n    } catch (err) {\n      console.error(\"Error accepting invitation:\", err);\n      setError(\n        err instanceof Error ? err.message : \"Failed to accept invitation\",\n      );\n      setProcessing(false);\n    }\n  };\n\n  // Show loading state while validating invitation or checking auth\n  if ((isValidating || isLoading || authLoading) && !error) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-blue-50\"\n        className=\"mb-6 p-4 text-center\"\n      >\n        <div className=\"mb-2 flex justify-center\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n        </div>\n        <p className=\"text-gray-700\">Validating your invitation...</p>\n      </NeoCard>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-red-50\"\n        className=\"mt-4 p-4 text-center\"\n      >\n        <p className=\"mb-3 text-red-700\">{error}</p>\n        <NeoButton onClick={() => router.push(\"/\")} size=\"sm\">\n          Go to Home Page\n        </NeoButton>\n      </NeoCard>\n    );\n  }\n\n  // If invitation is not valid, show error\n  if (!isValidInvitation && !isValidating) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-red-50\"\n        className=\"mt-4 p-4 text-center\"\n      >\n        <p className=\"mb-3 text-red-700\">Invalid invitation link.</p>\n        <NeoButton onClick={() => router.push(\"/\")} size=\"sm\">\n          Go to Home Page\n        </NeoButton>\n      </NeoCard>\n    );\n  }\n\n  // Processing state\n  if (\n    (processing || isAcceptingInvitation) &&\n    studioId &&\n    role\n  ) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-blue-50\"\n        className=\"mb-6 p-4 text-center\"\n      >\n        <div className=\"mb-2 flex justify-center\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n        </div>\n        <p className=\"text-gray-700\">Processing your invitation...</p>\n      </NeoCard>\n    );\n  }\n\n  // Render magic link sign-in form if not signed in\n  if (!user) {\n    return (\n      <>\n        <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n          <p className=\"mb-3 text-center text-lg font-bold\">\n            You've been invited as a\n            <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n              {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n            </span>\n          </p>\n\n          {sentEmail ? (\n            <div className=\"text-center\">\n              <p className=\"mb-4 text-gray-700\">\n                Check your email for a sign-in link!\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                After signing in, you'll be able to accept this invitation.\n              </p>\n            </div>\n          ) : (\n            <form onSubmit={handleMagicLinkSignIn} className=\"mt-4 space-y-4\">\n              <p className=\"mb-2 text-center text-gray-700\">\n                Sign in with your email to accept this invitation\n              </p>\n              <Input\n                type=\"email\"\n                placeholder=\"Your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"w-full\"\n              />\n              <NeoButton\n                type=\"submit\"\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={processing}\n              >\n                {processing ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </NeoButton>\n            </form>\n          )}\n        </NeoCard>\n      </>\n    );\n  }\n\n  // Render the accept invitation UI for signed-in users\n  return (\n    <>\n      <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n        <p className=\"mb-3 text-center text-lg font-bold\">\n          You've been invited as a\n          <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n            {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n          </span>\n        </p>\n        <p className=\"text-center text-gray-700\">\n          You're signed in as{\" \"}\n          <strong className=\"font-bold\">{user.email}</strong>\n        </p>\n      </NeoCard>\n\n      <NeoButton\n        onClick={handleAcceptInvitation}\n        disabled={processing || isAcceptingInvitation}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {processing || isAcceptingInvitation ? (\n          <>\n            <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          <>Join {studioName}</>\n        )}\n      </NeoButton>\n    </>\n  );\n}\n```\n\nNow, let's update the `page.tsx` file for the invite-accept route to properly handle the token parameter:\n\n```typescript\n// dance-book-app/src/app/(public)/invite-accept/page.tsx\nimport React, { Suspense } from \"react\";\nimport { api } from \"~/trpc/server\";\nimport { InviteAcceptContent } from \"./invite-accept-content\";\nimport { InviteAcceptSkeleton } from \"./invite-accept-skeleton\";\nimport { MapPin, Building2 } from \"lucide-react\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport Image from \"next/image\";\nimport { notFound } from \"next/navigation\";\n\ninterface InviteAcceptPageProps {\n  searchParams: {\n    studioId?: string;\n    role?: string;\n    token?: string;\n  };\n}\n\nexport default async function InviteAcceptPage({\n  searchParams,\n}: InviteAcceptPageProps) {\n  const { studioId, role, token } = searchParams;\n\n  // Return early if no studioId or role\n  if (!studioId || !role) {\n    return notFound();\n  }\n\n  return (\n    <Suspense fallback={<InviteAcceptSkeleton />}>\n      <InviteAcceptServer studioId={studioId} role={role} token={token} />\n    </Suspense>\n  );\n}\n\n// Server component to display the studio information\nasync function InviteAcceptServer({\n  studioId,\n  role,\n  token,\n}: {\n  studioId: string;\n  role: string;\n  token?: string;\n}) {\n  let studioData;\n\n  try {\n    // Fetch studio data on the server\n    studioData = await api.studio.findUnique({ id: studioId });\n  } catch (error) {\n    // If studio not found, return 404\n    return notFound();\n  }\n\n  if (!studioData) {\n    return notFound();\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col items-center justify-center p-4 sm:p-8\">\n      <NeoCard className=\"w-full max-w-md overflow-hidden p-0\">\n        {/* Studio Logo/Banner */}\n        <div className=\"neo-border relative h-40 w-full overflow-hidden rounded-xl border-b-4 border-black\">\n          {studioData.logo ? (\n            <Image\n              src={studioData.logo}\n              alt={studioData.name}\n              fill\n              sizes=\"(max-width: 768px) 100vw, 400px\"\n              className=\"object-cover\"\n              unoptimized\n            />\n          ) : (\n            <div className=\"flex h-full w-full items-center justify-center bg-muted\">\n              <Building2 className=\"h-16 w-16 text-muted-foreground\" />\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-6\">\n          {/* Studio Info */}\n          <div className=\"mb-8\">\n            <h1 className=\"mb-3 text-center text-2xl font-black\">\n              {studioData.name || \"Studio\"}\n            </h1>\n\n            <div className=\"mb-4 flex items-start gap-2\">\n              <MapPin className=\"mt-1 h-5 w-5 flex-shrink-0 text-primary\" />\n              <p className=\"text-md\">\n                {studioData.address}, {studioData.city},{\" \"}\n                {studioData.stateName || studioData.state}\n                {studioData.postalCode && `, ${studioData.postalCode}`}\n              </p>\n            </div>\n\n            {studioData.description && (\n              <p className=\"mt-3 text-gray-700\">{studioData.description}</p>\n            )}\n          </div>\n\n          {/* Client component handles authentication */}\n          <InviteAcceptContent\n            token={token}\n            studioId={studioId}\n            role={role}\n            studioName={studioData.name}\n          />\n        </div>\n      </NeoCard>\n    </div>\n  );\n}\n```\n\nNow, let's create a component for the studio owner to generate and copy invitation links:\n\n```typescript\n// dance-book-app/src/app/(app)/studio/[slug]/members/invite-choreographer-dialog.tsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { Copy, Check, Loader2 } from \"lucide-react\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle \n} from \"~/components/ui/dialog\";\nimport { Input } from \"~/components/ui/input\";\nimport { Label } from \"~/components/ui/label\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { api } from \"~/trpc/react\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"~/components/ui/select\";\n\ninterface InviteChoreographerDialogProps {\n  studioId: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onInvited?: () => void;\n}\n\nexport function InviteChoreographerDialog({\n  studioId,\n  isOpen,\n  onClose,\n  onInvited,\n}: InviteChoreographerDialogProps) {\n  const [email, setEmail] = useState(\"\");\n  const [role, setRole] = useState<\"CHOREOGRAPHER\" | \"ADMIN\" | \"STAFF\">(\"CHOREOGRAPHER\");\n  const [inviteLink, setInviteLink] = useState<string | null>(null);\n  const [isCopied, setIsCopied] = useState(false);\n  \n  const { mutate: inviteChoreographer, isPending } = api.studio.inviteChoreographerWithLink.useMutation({\n    onSuccess: (data) => {\n      // Set the invite link from the response\n      setInviteLink(data.inviteLink || null);\n      \n      if (data.status === \"already_invited\") {\n        toast.info(\"This email already has a pending invitation\");\n      } else {\n        toast.success(\"Invitation link created successfully\");\n      }\n      \n      // Optional callback\n      onInvited?.();\n    },\n    onError: (error) => {\n      toast.error(error.message || \"Failed to create invitation link\");\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email) {\n      toast.error(\"Please enter an email address\");\n      return;\n    }\n    \n    // Reset copy state\n    setIsCopied(false);\n    \n    // Create invitation link\n    inviteChoreographer({\n      studioId,\n      email,\n      role,\n    });\n  };\n\n  const handleCopyLink = async () => {\n    if (!inviteLink) return;\n    \n    try {\n      await navigator.clipboard.writeText(inviteLink);\n      setIsCopied(true);\n      toast.success(\"Invitation link copied to clipboard\");\n      \n      // Reset copy state after 3 seconds\n      setTimeout(() => {\n        setIsCopied(false);\n      }, 3000);\n    } catch (err) {\n      toast.error(\"Failed to copy link to clipboard\");\n    }\n  };\n  \n  const handleClose = () => {\n    // Reset state\n    setEmail(\"\");\n    setRole(\"CHOREOGRAPHER\");\n    setInviteLink(null);\n    setIsCopied(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Invite Choreographer</DialogTitle>\n          <DialogDescription>\n            Create an invitation link to send to choreographers.\n          </DialogDescription>\n        </DialogHeader>\n        \n        {!inviteLink ? (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"choreographer@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"role\">Role</Label>\n              <Select \n                value={role} \n                onValueChange={(value) => setRole(value as \"CHOREOGRAPHER\" | \"ADMIN\" | \"STAFF\")}\n              >\n                <SelectTrigger id=\"role\">\n                  <SelectValue placeholder=\"Select role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"CHOREOGRAPHER\">Choreographer</SelectItem>\n                  <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                  <SelectItem value=\"STAFF\">Staff\n                    lets code i 1 by 1 lets start with the studio.ts\n  \n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n  staffProcedure,\n} from \"../trpc\";\nimport { type Prisma, type Studio } from \"@prisma/client\";\nimport { Country, State } from \"country-state-city\";\nimport { createClient } from \"~/lib/supabase/server\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid().optional(),\n  slug: z.string().min(3).max(100).optional(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Helper function to enhance studio data with full country and state names\nconst enhanceStudioWithLocationNames = <T extends Studio>(\n  studio: T,\n): (T & { countryName?: string; stateName?: string }) | null => {\n  if (!studio) return null;\n\n  const enhancedStudio = { ...studio } as T & {\n    countryName?: string;\n    stateName?: string;\n  };\n\n  if (studio.country) {\n    const countryData = Country.getCountryByCode(studio.country);\n    enhancedStudio.countryName = countryData?.name;\n  }\n\n  if (studio.state && studio.country) {\n    const stateData = State.getStateByCodeAndCountry(\n      studio.state,\n      studio.country,\n    );\n    enhancedStudio.stateName = stateData?.name;\n  }\n\n  return enhancedStudio;\n};\n\n// Helper function to enhance studio arrays\nconst enhanceStudiosWithLocationNames = <T extends Studio>(\n  studios: T[],\n): Array<(T & { countryName?: string; stateName?: string }) | null> => {\n  return studios.map(enhanceStudioWithLocationNames);\n};\n\nexport type EnhancedStudios = ReturnType<\n  typeof enhanceStudiosWithLocationNames\n>;\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return enhanceStudioWithLocationNames(studio);\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id, slug: input.slug },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return enhanceStudioWithLocationNames(studio);\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        const updatedStudio = await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n\n        return enhanceStudioWithLocationNames(updatedStudio);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          const deletedStudio = await tx.studio.delete({\n            where: { id: input.studioId },\n          });\n\n          return enhanceStudioWithLocationNames(deletedStudio);\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios: enhanceStudiosWithLocationNames(studios),\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        // Enhance studio data in each membership\n        return memberships.map((membership) => ({\n          ...membership,\n          studio: enhanceStudioWithLocationNames(membership.studio),\n        }));\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...member,\n          studio: enhanceStudioWithLocationNames(member.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        const updatedMember = await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...updatedMember,\n          studio: enhanceStudioWithLocationNames(updatedMember.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Rest of the code remains unchanged...\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  getMembers: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        return members;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n\n  inviteChoreographerWithLink: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n        role: z\n          .enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"])\n          .default(\"CHOREOGRAPHER\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check for existing member with this email at this studio\n        const existingMember = await ctx.db.studioMember.findFirst({\n          where: {\n            studio: {\n              id: input.studioId,\n            },\n            profile: {\n              authId: {\n                in: (await ctx.db.$queryRaw`\n                  SELECT id FROM auth.users WHERE email = ${input.email}\n                `) as { id: string }[],\n              },\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This user is already a member of this studio\",\n          });\n        }\n\n        // Check for existing pending invitation\n        const existingInvitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            email: input.email,\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (existingInvitation) {\n          // Return the existing invitation with a token\n          const token = Buffer.from(\n            JSON.stringify({\n              id: existingInvitation.id,\n              email: input.email,\n              studioId: input.studioId,\n              role: existingInvitation.role,\n            }),\n          ).toString(\"base64\");\n\n          return {\n            status: \"already_invited\",\n            invitation: existingInvitation,\n            inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${existingInvitation.role}&token=${token}`,\n          };\n        }\n\n        // Store the invitation in the database with expiration (30 days)\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        const invitation = await ctx.db.studioInvitation.create({\n          data: {\n            email: input.email,\n            studioId: input.studioId,\n            role: input.role,\n            invitedById: ctx.profile.id,\n            expiresAt: expirationDate,\n            status: \"PENDING\",\n          },\n        });\n\n        // Generate a token for the invitation link\n        const token = Buffer.from(\n          JSON.stringify({\n            id: invitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: input.role,\n          }),\n        ).toString(\"base64\");\n\n        return {\n          status: \"invited\",\n          invitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${input.role}&token=${token}`,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Invite choreographer error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to generate invitation link\",\n          cause: error,\n        });\n      }\n    }),\n\n  validateInvitation: publicProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email().optional(),\n        token: z.string(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        // Decode the token\n        const decodedToken = Buffer.from(input.token, \"base64\").toString(\n          \"utf-8\",\n        );\n        const tokenData = JSON.parse(decodedToken) as {\n          id: string;\n          email: string;\n          studioId: string;\n          role: string;\n        };\n\n        if (tokenData.studioId !== input.studioId) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation link\",\n          });\n        }\n\n        // Find the invitation\n        const invitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            id: tokenData.id,\n            email: tokenData.email,\n            studioId: tokenData.studioId,\n            status: \"PENDING\",\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Check if expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        return {\n          valid: true,\n          invitation: {\n            ...invitation,\n            studio: enhanceStudioWithLocationNames(invitation.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Validate invitation error:\", error);\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n          cause: error,\n        });\n      }\n    }),\n\n  acceptInvitationWithLink: authedProcedure\n    .input(\n      z.object({\n        token: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Decode the token\n        const decodedToken = Buffer.from(input.token, \"base64\").toString(\n          \"utf-8\",\n        );\n        const tokenData = JSON.parse(decodedToken) as {\n          id: string;\n          email: string;\n          studioId: string;\n          role: string;\n        };\n\n        // Find the invitation\n        const invitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Check if expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Check if user is already a member\n        const existingMembership = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n            },\n          },\n        });\n\n        if (existingMembership) {\n          // Update invitation status\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"ACCEPTED\" },\n          });\n\n          return {\n            status: \"already_member\",\n            membership: existingMembership,\n          };\n        }\n\n        // Create new membership in a transaction\n        const result = await ctx.db.$transaction(async (tx) => {\n          // Add user to studio\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n              role: invitation.role,\n            },\n            include: {\n              studio: true,\n              profile: true,\n            },\n          });\n\n          // Update invitation status\n          await tx.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"ACCEPTED\" },\n          });\n\n          return membership;\n        });\n\n        return {\n          status: \"accepted\",\n          membership: {\n            ...result,\n            studio: enhanceStudioWithLocationNames(result.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to accept invitation\",\n          cause: error,\n        });\n      }\n          }),\n});\n```\n\ncan you please validate if the code is correct\nand also please use supabase to get the a data from the auth.users table\n```ts dance-book-app/src/lib/supabase/server.ts\nimport { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createClient(options?: { isAdmin?: boolean }) {\n  const cookieStore = await cookies();\n  const isAdmin = options?.isAdmin ?? false;\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    !isAdmin\n      ? process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n      : process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options),\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    },\n  );\n}\n```\n\n\nThe code in the `studio.ts` router file looks correct overall, but there's one issue with how you're trying to query the Supabase Auth users table. Let's fix that part to properly use the Supabase admin client:\n\n```typescript\n// dance-book-app/src/server/api/routers/studio.ts\n// Modify the existing inviteChoreographerWithLink procedure\n\ninviteChoreographerWithLink: adminProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      email: z.string().email(),\n      role: z\n        .enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"])\n        .default(\"CHOREOGRAPHER\"),\n    }),\n  )\n  .mutation(async ({ ctx, input }) => {\n    try {\n      // Create the Supabase admin client\n      const supabase = await createClient({ isAdmin: true });\n\n      // Check if the email belongs to a registered user\n      const { data: authUsers } = await supabase.auth.admin.listUsers({\n        filter: {\n          email: input.email,\n        },\n      });\n\n      // Get user IDs if they exist\n      const userIds = authUsers?.users?.map(user => user.id) || [];\n      \n      // Check for existing member with this email at this studio\n      const existingMember = userIds.length > 0 ? await ctx.db.studioMember.findFirst({\n        where: {\n          studio: {\n            id: input.studioId,\n          },\n          profile: {\n            authId: {\n              in: userIds,\n            },\n          },\n        },\n      }) : null;\n\n      if (existingMember) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"This user is already a member of this studio\",\n        });\n      }\n\n      // Check for existing pending invitation\n      const existingInvitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          email: input.email,\n          studioId: input.studioId,\n          status: \"PENDING\",\n        },\n      });\n\n      if (existingInvitation) {\n        // Return the existing invitation with a token\n        const token = Buffer.from(\n          JSON.stringify({\n            id: existingInvitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: existingInvitation.role,\n          }),\n        ).toString(\"base64\");\n\n        return {\n          status: \"already_invited\",\n          invitation: existingInvitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${existingInvitation.role}&token=${token}`,\n        };\n      }\n\n      // Store the invitation in the database with expiration (30 days)\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 30);\n\n      const invitation = await ctx.db.studioInvitation.create({\n        data: {\n          email: input.email,\n          studioId: input.studioId,\n          role: input.role,\n          invitedById: ctx.profile.id,\n          expiresAt: expirationDate,\n          status: \"PENDING\",\n        },\n      });\n\n      // Generate a token for the invitation link\n      const token = Buffer.from(\n        JSON.stringify({\n          id: invitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role: input.role,\n        }),\n      ).toString(\"base64\");\n\n      return {\n        status: \"invited\",\n        invitation,\n        inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${input.role}&token=${token}`,\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      console.error(\"Invite choreographer error:\", error);\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to generate invitation link\",\n        cause: error,\n      });\n    }\n  }),\n```\n\nThis modification uses Supabase's admin API to query users by email, which is more secure and reliable than trying to use raw SQL queries directly on the `auth.users` table. Note that:\n\n1. We're creating a Supabase admin client using the service role key\n2. We're using `listUsers` with a filter to find users by email\n3. We're extracting user IDs from the result and checking if any of them are already members of the studio\n\nThis approach is better because:\n- It uses the official Supabase API rather than raw SQL\n- It properly handles the case where the user doesn't exist yet\n- It avoids potential SQL injection vulnerabilities\n\nThe rest of your code looks correct and should work as expected to create and validate invitation links, as well as process acceptances.\n```ts dance-book-app/src/lib/jwt.ts\nimport { type JWTPayload, jwtVerify, SignJWT } from \"jose\";\n\nconst secret = new TextEncoder().encode(\"secret-that-no-one-knows\");\n\nexport async function createJWT(payload: JWTPayload): Promise<string> {\n  const jwt = await new SignJWT(payload)\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime(\"1h\")\n    .sign(secret);\n\n  return jwt;\n}\n\nexport async function verifyJWT(token: string): Promise<JWTPayload | null> {\n  try {\n    const { payload } = await jwtVerify(token, secret);\n    console.log(\"JWT is valid:\", payload);\n    return payload;\n  } catch (error) {\n    console.error(\"Invalid JWT:\", error);\n    return null;\n  }\n}\n```\n\ni have also a jwt here if this will make the token more secure please use this\ndiagnostics\ndance-book-app/src/server/api/routers/studio.ts\n```typescript\n        // Check if the email belongs to a registered user\n        const { data: authUsers } = await supabase.auth.admin.listUsers({\n          filter: {\n// error: Object literal may only specify known properties, and 'filter' does not exist in type 'PageParams'.\n            email: input.email,\n          },\n```\n```typescript\n            studioId: input.studioId,\n            role: input.role,\n            invitedById: ctx.profile.id,\n// error: 'ctx.profile' is possibly 'undefined'.\n            expiresAt: expirationDate,\n            status: \"PENDING\",\n```\n\ncan you also please fix the errors\nLet's fix those TypeScript errors and improve security by using the JWT utilities you provided. Here's the updated code:\n\n```typescript\n// dance-book-app/src/server/api/routers/studio.ts\n// Modified inviteChoreographerWithLink procedure\n\ninviteChoreographerWithLink: adminProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      email: z.string().email(),\n      role: z\n        .enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"])\n        .default(\"CHOREOGRAPHER\"),\n    }),\n  )\n  .mutation(async ({ ctx, input }) => {\n    try {\n      // Create the Supabase admin client\n      const supabase = await createClient({ isAdmin: true });\n\n      // Check if the email belongs to a registered user\n      // Fixed: Supabase admin API doesn't have filter option like this\n      const { data: { users } } = await supabase.auth.admin.listUsers();\n      \n      // Filter users manually to find by email\n      const matchingUsers = users?.filter(user => \n        user.email?.toLowerCase() === input.email.toLowerCase()\n      ) || [];\n      \n      // Get user IDs if they exist\n      const userIds = matchingUsers.map(user => user.id);\n      \n      // Check for existing member with this email at this studio\n      const existingMember = userIds.length > 0 ? await ctx.db.studioMember.findFirst({\n        where: {\n          studio: {\n            id: input.studioId,\n          },\n          profile: {\n            authId: {\n              in: userIds,\n            },\n          },\n        },\n      }) : null;\n\n      if (existingMember) {\n        throw new TRPCError({\n          code: \"CONFLICT\",\n          message: \"This user is already a member of this studio\",\n        });\n      }\n\n      // Check for existing pending invitation\n      const existingInvitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          email: input.email,\n          studioId: input.studioId,\n          status: \"PENDING\",\n        },\n      });\n\n      if (existingInvitation) {\n        // Create a secure JWT token for the existing invitation\n        const token = await createJWT({\n          id: existingInvitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role: existingInvitation.role,\n          type: \"studio-invitation\"\n        });\n\n        return {\n          status: \"already_invited\",\n          invitation: existingInvitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${existingInvitation.role}&token=${token}`,\n        };\n      }\n\n      // Store the invitation in the database with expiration (30 days)\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 30);\n\n      // Fixed: Ensure ctx.profile exists with non-null assertion\n      // This should be safe because adminProcedure ensures an authenticated user\n      const invitation = await ctx.db.studioInvitation.create({\n        data: {\n          email: input.email,\n          studioId: input.studioId,\n          role: input.role,\n          invitedById: ctx.profile!.id,\n          expiresAt: expirationDate,\n          status: \"PENDING\",\n        },\n      });\n\n      // Create a secure JWT token using the jwt.ts utilities\n      const token = await createJWT({\n        id: invitation.id,\n        email: input.email,\n        studioId: input.studioId,\n        role: input.role,\n        type: \"studio-invitation\"\n      });\n\n      return {\n        status: \"invited\",\n        invitation,\n        inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?studioId=${input.studioId}&role=${input.role}&token=${token}`,\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      console.error(\"Invite choreographer error:\", error);\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to generate invitation link\",\n        cause: error,\n      });\n    }\n  }),\n```\n\nNow let's also update the validation and acceptance procedures to use JWT verification:\n\n```typescript\n// Update validateInvitation procedure\nvalidateInvitation: publicProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      email: z.string().email().optional(),\n      token: z.string(),\n    }),\n  )\n  .query(async ({ ctx, input }) => {\n    try {\n      // Verify JWT token\n      const tokenData = await verifyJWT(input.token);\n      \n      if (!tokenData || tokenData.studioId !== input.studioId || !tokenData.id) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n\n      // Find the invitation\n      const invitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          id: tokenData.id as string,\n          email: tokenData.email as string,\n          studioId: tokenData.studioId as string,\n          status: \"PENDING\",\n        },\n        include: {\n          studio: true,\n        },\n      });\n\n      if (!invitation) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Invitation not found or already used\",\n        });\n      }\n\n      // Check if expired\n      if (invitation.expiresAt < new Date()) {\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"EXPIRED\" },\n        });\n\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invitation has expired\",\n        });\n      }\n\n      return {\n        valid: true,\n        invitation: {\n          ...invitation,\n          studio: enhanceStudioWithLocationNames(invitation.studio),\n        },\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      console.error(\"Validate invitation error:\", error);\n      throw new TRPCError({\n        code: \"BAD_REQUEST\",\n        message: \"Invalid invitation link\",\n        cause: error,\n      });\n    }\n  }),\n\n// Update acceptInvitationWithLink procedure\nacceptInvitationWithLink: authedProcedure\n  .input(\n    z.object({\n      token: z.string(),\n    }),\n  )\n  .mutation(async ({ ctx, input }) => {\n    try {\n      // Verify JWT token\n      const tokenData = await verifyJWT(input.token);\n      \n      if (!tokenData || !tokenData.id || !tokenData.studioId || tokenData.type !== \"studio-invitation\") {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n\n      // Find the invitation\n      const invitation = await ctx.db.studioInvitation.findFirst({\n        where: {\n          id: tokenData.id as string,\n          studioId: tokenData.studioId as string,\n          status: \"PENDING\",\n        },\n      });\n\n      if (!invitation) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Invitation not found or already used\",\n        });\n      }\n\n      // Check if expired\n      if (invitation.expiresAt < new Date()) {\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"EXPIRED\" },\n        });\n\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invitation has expired\",\n        });\n      }\n\n      // Ensure ctx.profile exists (authedProcedure guarantees this)\n      if (!ctx.profile) {\n        throw new TRPCError({\n          code: \"UNAUTHORIZED\",\n          message: \"You must be logged in to accept an invitation\",\n        });\n      }\n\n      // Check if user is already a member\n      const existingMembership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: invitation.studioId,\n          },\n        },\n      });\n\n      if (existingMembership) {\n        // Update invitation status\n        await ctx.db.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"ACCEPTED\" },\n        });\n\n        return {\n          status: \"already_member\",\n          membership: existingMembership,\n        };\n      }\n\n      // Create new membership in a transaction\n      const result = await ctx.db.$transaction(async (tx) => {\n        // Add user to studio\n        const membership = await tx.studioMember.create({\n          data: {\n            profileId: ctx.profile!.id,\n            studioId: invitation.studioId,\n            role: invitation.role,\n          },\n          include: {\n            studio: true,\n            profile: true,\n          },\n        });\n\n        // Update invitation status\n        await tx.studioInvitation.update({\n          where: { id: invitation.id },\n          data: { status: \"ACCEPTED\" },\n        });\n\n        return membership;\n      });\n\n      return {\n        status: \"accepted\",\n        membership: {\n          ...result,\n          studio: enhanceStudioWithLocationNames(result.studio),\n        },\n      };\n    } catch (error) {\n      if (error instanceof TRPCError) {\n        throw error;\n      }\n\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to accept invitation\",\n        cause: error,\n      });\n    }\n  }),\n```\n\nThe changes I've made include:\n\n1. Fixed the Supabase admin API usage by:\n   - Properly calling `listUsers()` without a filter parameter\n   - Manually filtering the returned users array to find matching emails\n\n2. Fixed TypeScript errors related to possible undefined values by:\n   - Adding non-null assertions where appropriate (like `ctx.profile!.id`)\n   - Adding additional type checking for token data\n\n3. Enhanced security by:\n   - Using JWT for token generation and validation instead of simple base64 encoding\n   - Adding a \"type\" field to the JWT to ensure it's specifically for studio invitations\n   - Using proper cryptographic verification instead of just decoding\n\n4. Improved error handling:\n   - Added more specific error messages\n   - Added a check for the token type in the acceptance flow\n\nThese changes make the invitation system more secure and robust while fixing the TypeScript errors you were encountering.\n```ts dance-book-app/src/server/api/trpc.ts\n/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { StudioRole, type Profile } from \"@prisma/client\";\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { type AuthUser } from \"@supabase/supabase-js\";\n\nimport { db } from \"~/server/db\";\n\nexport interface CreateTRPCContextOptions {\n  headers: Headers;\n}\n\nexport interface TRPCContext extends CreateTRPCContextOptions {\n  db: typeof db;\n  user?: AuthUser;\n  profile?: Profile;\n}\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: CreateTRPCContextOptions) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<TRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\nconst authMiddleware = t.middleware(async ({ ctx, next }) => {\n  const supabase = createClient();\n  const {\n    data: { user },\n  } = await (await supabase).auth.getUser();\n\n  if (!user) {\n    throw new TRPCError({\n      code: \"UNAUTHORIZED\",\n      message: \"User not found\",\n    });\n  }\n\n  const profile = await ctx.db.profile.findUnique({\n    where: { authId: user.id },\n  });\n\n  if (!profile)\n    throw new TRPCError({\n      code: \"NOT_FOUND\",\n      message: \"Profile not found\",\n    });\n\n  return next({\n    ctx: {\n      ...ctx,\n      user,\n      profile,\n    },\n  });\n});\n\n// Studio role middleware factory - ensures user has required role for a studio\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, input }) => {\n    if (!ctx.user || !ctx.profile) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n\n    // Extract studioId from input\n    const inputObj = input as Record<string, unknown>;\n    const studioId = inputObj.studioId as string | undefined;\n\n    if (!studioId) {\n      throw new TRPCError({\n        code: \"BAD_REQUEST\",\n        message: \"studioId is required for role-based operations\",\n      });\n    }\n\n    // Check if user has the required role for this studio\n    const membership = await ctx.db.studioMember.findUnique({\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n          studioId,\n        },\n      },\n    });\n\n    if (!membership || !allowedRoles.includes(membership.role)) {\n      throw new TRPCError({\n        code: \"FORBIDDEN\",\n        message: \"You don't have the required role for this operation\",\n      });\n    }\n\n    return next({\n      ctx: {\n        ...ctx,\n        studioId,\n        studioMembership: membership,\n      },\n    });\n  });\n};\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\nexport const authedProcedure = publicProcedure.use(authMiddleware);\n\n// Role-based procedures for studios\nexport const ownerProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER]),\n);\n\nexport const adminProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER, StudioRole.ADMIN]),\n);\n\nexport const instructorProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.CHOREOGRAPHER,\n  ]),\n);\n\nexport const staffProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.STAFF,\n  ]),\n);\n```\n\ndiagnostics\ndance-book-app/src/server/api/routers/studio.ts\n```typescript\n            id: tokenData.id as string,\n            email: tokenData.email as string,\n            studioId: tokenData.studioId as string,\n// error: This assertion is unnecessary since it does not change the type of the expression.\n            status: \"PENDING\",\n          },\n```\n```typescript\n\n        if (\n          !tokenData ||\n// error: Prefer using an optional chain expression instead, as it's more concise and easier to read.\n          !tokenData.id ||\n          !tokenData.studioId ||\n          tokenData.type !== \"studio-invitation\"\n```\n```typescript\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile!.id,\n// error: This assertion is unnecessary since it does not change the type of the expression.\n              studioId: invitation.studioId,\n              role: invitation.role,\n```\n\ncan you please fix the errors \"ctx.profile\" is not available in publicProcedure\nYou're right, let's fix those TypeScript errors and address the issue with `ctx.profile` not being available in `publicProcedure`. Here's the updated code:\n\n```typescript\n// dance-book-app/src/server/api/routers/studio.ts\n\n// For the inviteChoreographerWithLink procedure:\n\n\n```tsx dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClient } from \"~/lib/supabase/client\";\nimport { useAuthWithInvites } from \"~/hooks/use-auth-with-invites\";\nimport { Loader2 } from \"lucide-react\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport { api } from \"~/trpc/react\";\nimport { toast } from \"sonner\";\nimport { Input } from \"~/components/ui/input\";\n\ninterface InviteAcceptContentProps {\n  studioId: string;\n  role: string;\n  token?: string;\n  studioName?: string;\n}\n\nexport function InviteAcceptContent({\n  studioId,\n  role,\n  token,\n  studioName = \"Studio\",\n}: InviteAcceptContentProps) {\n  const [error, setError] = useState<string | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [sentEmail, setSentEmail] = useState(false);\n  const router = useRouter();\n  const supabase = createClient();\n\n  // Use the auth hook to handle authentication status\n  const { user, loading: authLoading } = useAuthWithInvites();\n\n  // Get the acceptInvitation mutation\n  const { mutate: acceptInvitation, isPending: isAcceptingInvitation } =\n    api.studio.acceptInvitation.useMutation({\n      onSuccess: (data) => {\n        toast.success(\"Successfully joined studio!\");\n        // Navigate to the studio page\n        if (data.membership.studio?.slug) {\n          router.push(`/studio/${data.membership.studio.slug}`);\n        } else {\n          router.push(`/studios`);\n        }\n      },\n      onError: (error) => {\n        console.error(\"Error accepting invitation:\", error);\n        toast.error(\"Failed to join studio: \" + error.message);\n        setError(error.message);\n        setProcessing(false);\n      },\n    });\n\n  // Handle magic link sign-in\n  const handleMagicLinkSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!email.trim()) {\n      toast.error(\"Please enter your email address\");\n      return;\n    }\n\n    try {\n      setProcessing(true);\n\n      // Generate magic link that redirects back to this invitation page\n      const { error } = await supabase.auth.signInWithOtp({\n        email: email.trim(),\n        options: {\n          emailRedirectTo: window.location.href, // Redirect back to this page\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Show success message\n      toast.success(\"Check your email for a sign-in link!\");\n      setSentEmail(true);\n    } catch (err) {\n      console.error(\"Error sending magic link:\", err);\n      toast.error(\n        err instanceof Error ? err.message : \"Failed to send sign-in link\",\n      );\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // When the user clicks \"Join Studio\" button\n  const handleAcceptInvitation = async () => {\n    if (!studioId || !user?.email) return;\n\n    try {\n      setProcessing(true);\n\n      // Accept the invitation using the TRPC mutation\n      acceptInvitation({\n        studioId,\n        role: role as \"ADMIN\" | \"CHOREOGRAPHER\" | \"STAFF\",\n        email: user.email,\n      });\n    } catch (err) {\n      console.error(\"Error accepting invitation:\", err);\n      setError(\n        err instanceof Error ? err.message : \"Failed to accept invitation\",\n      );\n      setProcessing(false);\n    }\n  };\n\n  // Error state\n  if (error) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-red-50\"\n        className=\"mt-4 p-4 text-center\"\n      >\n        <p className=\"mb-3 text-red-700\">{error}</p>\n        <NeoButton onClick={() => router.push(\"/\")} size=\"sm\">\n          Go to Home Page\n        </NeoButton>\n      </NeoCard>\n    );\n  }\n\n  // Processing state\n  if (\n    (processing || authLoading || isAcceptingInvitation) &&\n    studioId &&\n    role\n  ) {\n    return (\n      <NeoCard\n        variant=\"colored\"\n        colorClassName=\"bg-blue-50\"\n        className=\"mb-6 p-4 text-center\"\n      >\n        <div className=\"mb-2 flex justify-center\">\n          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n        </div>\n        <p className=\"text-gray-700\">Processing your invitation...</p>\n      </NeoCard>\n    );\n  }\n\n  // Render magic link sign-in form if not signed in\n  if (!user) {\n    return (\n      <>\n        <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n          <p className=\"mb-3 text-center text-lg font-bold\">\n            You've been invited as a\n            <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n              {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n            </span>\n          </p>\n\n          {sentEmail ? (\n            <div className=\"text-center\">\n              <p className=\"mb-4 text-gray-700\">\n                Check your email for a sign-in link!\n              </p>\n              <p className=\"text-sm text-gray-500\">\n                After signing in, you'll be able to accept this invitation.\n              </p>\n            </div>\n          ) : (\n            <form onSubmit={handleMagicLinkSignIn} className=\"mt-4 space-y-4\">\n              <p className=\"mb-2 text-center text-gray-700\">\n                Sign in with your email to accept this invitation\n              </p>\n              <Input\n                type=\"email\"\n                placeholder=\"Your email address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"w-full\"\n              />\n              <NeoButton\n                type=\"submit\"\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={processing}\n              >\n                {processing ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </NeoButton>\n            </form>\n          )}\n        </NeoCard>\n      </>\n    );\n  }\n\n  // Render the accept invitation UI for signed-in users\n  return (\n    <>\n      <NeoCard variant=\"colored\" className=\"mb-6 p-4\">\n        <p className=\"mb-3 text-center text-lg font-bold\">\n          You've been invited as a\n          <span className=\"ml-1 inline-block rounded-md bg-primary px-2 py-1 text-white\">\n            {role?.toLowerCase().replace(/^\\w/, (c) => c.toUpperCase())}\n          </span>\n        </p>\n        <p className=\"text-center text-gray-700\">\n          You're signed in as{\" \"}\n          <strong className=\"font-bold\">{user.email}</strong>\n        </p>\n      </NeoCard>\n\n      <NeoButton\n        onClick={handleAcceptInvitation}\n        disabled={processing || isAcceptingInvitation}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {processing || isAcceptingInvitation ? (\n          <>\n            <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          <>Join {studioName}</>\n        )}\n      </NeoButton>\n    </>\n  );\n}\n```\n\n\n```\n\nI've made the following changes to fix the issues:\n\n1. Fixed the issue with `publicProcedure` by:\n   - Properly handling the case where `tokenData` might be null by using optional chaining\n   - Removed unnecessary type assertions that were causing TypeScript errors\n\n2. Fixed assertion errors by:\n   - Using optional chaining (`tokenData?.studioId`) instead of null checks followed by assertions\n   - Removing unnecessary non-null assertions for properties that are guaranteed to exist\n\n3. Fixed the Supabase admin API usage by correctly destructuring the response object:\n   - Changed `const { data: { users } } = await supabase.auth.admin.listUsers();` to \n     `const { data } = await supabase.auth.admin.listUsers();` and then accessing `data?.users`\n\n4. Improved the code for validating tokens in the `publicProcedure` since this procedure doesn't have access to `ctx.profile`, ensuring it works without authentication\n\n5. Removed unnecessary type assertions after the code restructuring\n\nThese changes ensure the code is TypeScript-clean while maintaining the security and functionality of the invitation process.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2880}}},{"id":{"replica_id":0,"value":13},"start":2327,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2881}}},{"id":{"replica_id":0,"value":123},"start":50944,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2882}}},{"id":{"replica_id":0,"value":264},"start":65082,"metadata":{"role":"assistant","status":{"Error":"The final message must be from the user. To provide a system prompt, you must provide the system prompt followed by a user prompt."},"timestamp":{"replica_id":0,"value":2883}}},{"id":{"replica_id":0,"value":265},"start":65083,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2884}}},{"id":{"replica_id":0,"value":287},"start":65092,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2885}}},{"id":{"replica_id":0,"value":288},"start":78878,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2886}}},{"id":{"replica_id":0,"value":549},"start":78947,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2887}}},{"id":{"replica_id":0,"value":690},"start":105471,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2888}}},{"id":{"replica_id":0,"value":889},"start":105544,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2889}}},{"id":{"replica_id":0,"value":1014},"start":106536,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2890}}},{"id":{"replica_id":0,"value":1015},"start":111036,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2891}}},{"id":{"replica_id":0,"value":1489},"start":111816,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2892}}},{"id":{"replica_id":0,"value":1666},"start":112484,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2893}}},{"id":{"replica_id":0,"value":1667},"start":122542,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2894}}},{"id":{"replica_id":0,"value":2446},"start":129546,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":2895}}},{"id":{"replica_id":0,"value":2447},"start":138076,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":2896}}}],"summary":"I'll implement the choreographer invitation system as requested. Let me enhance the studio router with proper invite functionality.","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":2327,"end":30602},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":30603,"end":36331},"icon":"File","label":"dance-book-app/prisma/schema.prisma","metadata":{"path":"dance-book-app/prisma/schema.prisma"}},{"range":{"start":36332,"end":43460},"icon":"File","label":"dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx","metadata":{"path":"dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx"}},{"range":{"start":43461,"end":46892},"icon":"File","label":"dance-book-app/src/app/(public)/invite-accept/page.tsx","metadata":{"path":"dance-book-app/src/app/(public)/invite-accept/page.tsx"}},{"range":{"start":46893,"end":50941},"icon":"Library","label":"next-tw-zod-zustand-shad","metadata":null},{"range":{"start":78950,"end":105423},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":105544,"end":106534},"icon":"File","label":"dance-book-app/src/lib/supabase/server.ts","metadata":{"path":"dance-book-app/src/lib/supabase/server.ts"}},{"range":{"start":111036,"end":111736},"icon":"File","label":"dance-book-app/src/lib/jwt.ts","metadata":{"path":"dance-book-app/src/lib/jwt.ts"}},{"range":{"start":111816,"end":112448},"icon":"Warning","label":"Diagnostics: 2 errors","metadata":null},{"range":{"start":111828,"end":112447},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":null},{"range":{"start":111876,"end":112201},"icon":"XCircle","label":"Object literal may only specify known properties, and 'filter' does not exist in type 'PageParams'.","metadata":null},{"range":{"start":112202,"end":112447},"icon":"XCircle","label":"'ctx.profile' is possibly 'undefined'.","metadata":null},{"range":{"start":122542,"end":128529},"icon":"File","label":"dance-book-app/src/server/api/trpc.ts","metadata":{"path":"dance-book-app/src/server/api/trpc.ts"}},{"range":{"start":128530,"end":129465},"icon":"Warning","label":"Diagnostics: 3 errors","metadata":null},{"range":{"start":128542,"end":129464},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":null},{"range":{"start":128590,"end":128882},"icon":"XCircle","label":"This assertion is unnecessary since it does not change the type of the expression.","metadata":null},{"range":{"start":128883,"end":129149},"icon":"XCircle","label":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","metadata":null},{"range":{"start":129150,"end":129464},"icon":"XCircle","label":"This assertion is unnecessary since it does not change the type of the expression.","metadata":null},{"range":{"start":129821,"end":136949},"icon":"File","label":"dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx","metadata":{"path":"dance-book-app/src/app/(public)/invite-accept/invite-accept-content.tsx"}}]}