{"id":"64f6db44-6fb0-493b-b520-a92cdca73129","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n```tsx dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Calendar,\n  Clock,\n  DollarSign,\n  MapPin,\n  Sparkles,\n  Users,\n  Clipboard,\n  CalendarClock,\n  Settings,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { DatePicker } from \"~/components/ui/neo-date-picker\";\nimport { Checkbox } from \"~/components/ui/checkbox\";\nimport { type StudioMember } from \"@prisma/client\";\nimport { api } from \"~/trpc/react\";\nimport { NeoSeparator } from \"~/components/ui/neo-separator\";\nimport { SKILL_LEVELS_ARRAY, SkillLevelName } from \"~/lib/get-skill-level\";\nimport { DANCE_STYLES_ARRAY, DanceStyleName } from \"~/lib/get-dance-style\";\n\n// Schema for form validation\nconst scheduleFormSchema = z.object({\n  title: z\n    .string()\n    .min(2, \"Title must be at least 2 characters\")\n    .max(100, \"Title must be at most 100 characters\"),\n  description: z.string().optional(),\n  startDate: z.date({ required_error: \"Start date is required\" }),\n  startTime: z.date({ required_error: \"Start time is required\" }),\n  endTime: z.date({ required_error: \"End time is required\" }),\n  maxCapacity: z.number().int().positive().optional(),\n  price: z.number().nonnegative().optional(),\n  currency: z.string().length(3).default(\"USD\"),\n  location: z.string().max(100).optional(),\n  danceStyle: z.union([z.literal(\"none\"), z.nativeEnum(DanceStyleName)]),\n  levelId: z.union([z.literal(\"none\"), z.nativeEnum(SkillLevelName)]),\n  choreographerId: z.string(), // This can handle \"tba\" values\n});\n\ntype ScheduleFormValues = z.infer<typeof scheduleFormSchema>;\n\ninterface ScheduleFormProps {\n  studioId: string;\n  studioSlug: string;\n  choreographers: StudioMember[];\n}\n\nexport function ScheduleForm({\n  studioId,\n  studioSlug,\n  choreographers,\n}: ScheduleFormProps) {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Setup form with default values\n  const form = useForm<ScheduleFormValues>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startDate: new Date(),\n      startTime: new Date(),\n      endTime: new Date(new Date().setHours(new Date().getHours() + 1)),\n      maxCapacity: 20,\n      price: 0,\n      currency: \"USD\",\n      location: \"\",\n      danceStyle: \"none\", // Changed from empty string\n      levelId: \"none\", // Keep this as is or use SkillLevelName.ALL_LEVELS if you prefer\n      choreographerId: \"tba\", // Changed from undefined\n    },\n  });\n\n  // tRPC mutation for creating a schedule\n  const createScheduleMutation = api.schedule.create.useMutation({\n    onSuccess: () => {\n      router.push(`/profile`);\n      router.refresh();\n    },\n  });\n\n  // Process form submission\n  async function onSubmit(data: ScheduleFormValues) {\n    setIsSubmitting(true);\n\n    try {\n      // Combine date and time\n      const startTime = new Date(data.startDate);\n      const startHours = data.startTime.getHours();\n      const startMinutes = data.startTime.getMinutes();\n      startTime.setHours(startHours, startMinutes, 0, 0);\n\n      const endTime = new Date(data.startDate);\n      const endHours = data.endTime.getHours();\n      const endMinutes = data.endTime.getMinutes();\n      endTime.setHours(endHours, endMinutes, 0, 0);\n\n      // Validate end time is after start time\n      if (endTime <= startTime) {\n        form.setError(\"endTime\", {\n          type: \"manual\",\n          message: \"End time must be after start time\",\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      await createScheduleMutation.mutateAsync({\n        studioId,\n        title: data.title,\n        description: data.description,\n        startTime,\n        endTime,\n        maxCapacity: data.maxCapacity,\n        price: data.price,\n        currency: data.currency,\n        location: data.location,\n        danceStyle: data.danceStyle === \"none\" ? undefined : data.danceStyle,\n        levelId: data.levelId === \"none\" ? undefined : data.levelId,\n        choreographerId:\n          data.choreographerId === \"tba\" ? undefined : data.choreographerId,\n      });\n    } catch (error) {\n      console.error(\"Failed to create schedule:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Info Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n            <Clipboard className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Basic Class Information</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Class Title <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"e.g., Hip Hop Beginner's Class\"\n                  {...field}\n                  className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Describe what students will learn in this class...\"\n                  className=\"min-h-[120px] resize-y bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"danceStyle\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Dance Style</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select a dance style\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific style</SelectItem>\n                    {DANCE_STYLES_ARRAY.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"levelId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Skill Level</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select skill level\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific level</SelectItem>\n                    {SKILL_LEVELS_ARRAY.map((level) => (\n                      <SelectItem key={level.id} value={level.id}>\n                        {level.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Schedule Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n            <CalendarClock className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Schedule & Time</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"startDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Date <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <DatePicker\n                  date={field.value}\n                  setDate={field.onChange}\n                  className=\"w-full bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  Start Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select start time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  End Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select end time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Additional Details Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n            <Settings className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Additional Details</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"location\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Location</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., Studio A, Room 101\"\n                    {...field}\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"choreographerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Instructor</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select an instructor\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"tba\">To be announced</SelectItem>\n                    {choreographers.map((choreographer) => (\n                      <SelectItem\n                        key={choreographer.id}\n                        value={choreographer.id}\n                      >\n                        {choreographer.profile.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"maxCapacity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Maximum Capacity</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    placeholder=\"20\"\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                    {...field}\n                    onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Price</FormLabel>\n                <div className=\"flex bg-white dark:bg-black\">\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      step={0.01}\n                      placeholder=\"0.00\"\n                      className=\"flex-1 border-0 bg-transparent p-3\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                    />\n                  </FormControl>\n                  <Select\n                    value={form.watch(\"currency\")}\n                    onValueChange={(value) => form.setValue(\"currency\", value)}\n                  >\n                    <SelectTrigger className=\"w-24 border-0 bg-transparent\">\n                      <SelectValue placeholder=\"USD\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border shadow-neo-sm\">\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"GBP\">GBP</SelectItem>\n                      <SelectItem value=\"CAD\">CAD</SelectItem>\n                      <SelectItem value=\"AUD\">AUD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"pt-6\">\n          <NeoButton\n            type=\"submit\"\n            className=\"w-full transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none\"\n            disabled={isSubmitting}\n          >\n            <Sparkles className=\"mr-2 h-5 w-5\" />\n            {isSubmitting ? \"Creating...\" : \"Create Class Schedule\"}\n          </NeoButton>\n        </div>\n      </form>\n    </Form>\n  );\n}\n```\n\n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n} from \"../trpc\";\nimport { type Prisma, type Studio } from \"@prisma/client\";\nimport { Country, State } from \"country-state-city\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { createJWT, verifyJWT } from \"~/lib/jwt\";\nimport { type AuthUser } from \"@supabase/supabase-js\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid().optional(),\n  slug: z.string().min(3).max(100).optional(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Helper function to enhance studio data with full country and state names\nconst enhanceStudioWithLocationNames = <T extends Studio>(\n  studio: T,\n): (T & { countryName?: string; stateName?: string }) | null => {\n  if (!studio) return null;\n\n  const enhancedStudio = { ...studio } as T & {\n    countryName?: string;\n    stateName?: string;\n  };\n\n  if (studio.country) {\n    const countryData = Country.getCountryByCode(studio.country);\n    enhancedStudio.countryName = countryData?.name;\n  }\n\n  if (studio.state && studio.country) {\n    const stateData = State.getStateByCodeAndCountry(\n      studio.state,\n      studio.country,\n    );\n    enhancedStudio.stateName = stateData?.name;\n  }\n\n  return enhancedStudio;\n};\n\n// Helper function to enhance studio arrays\nconst enhanceStudiosWithLocationNames = <T extends Studio>(\n  studios: T[],\n): Array<(T & { countryName?: string; stateName?: string }) | null> => {\n  return studios.map(enhanceStudioWithLocationNames);\n};\n\nexport type EnhancedStudios = ReturnType<\n  typeof enhanceStudiosWithLocationNames\n>;\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return enhanceStudioWithLocationNames(studio);\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id, slug: input.slug },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return enhanceStudioWithLocationNames(studio);\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        const updatedStudio = await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n\n        return enhanceStudioWithLocationNames(updatedStudio);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          const deletedStudio = await tx.studio.delete({\n            where: { id: input.studioId },\n          });\n\n          return enhanceStudioWithLocationNames(deletedStudio);\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios: enhanceStudiosWithLocationNames(studios),\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        // Enhance studio data in each membership\n        return memberships.map((membership) => ({\n          ...membership,\n          studio: enhanceStudioWithLocationNames(membership.studio),\n        }));\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...member,\n          studio: enhanceStudioWithLocationNames(member.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        const updatedMember = await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...updatedMember,\n          studio: enhanceStudioWithLocationNames(updatedMember.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Rest of the code remains unchanged...\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  getMembers: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        // Create admin client for accessing auth data\n        const supabase = await createClient({ isAdmin: true });\n\n        // Get all auth IDs from member profiles\n        const authIds = members.map((member) => member.profile.authId);\n\n        // Query all users at once\n        const { data: authUsers, error } =\n          await supabase.auth.admin.listUsers();\n\n        if (error) {\n          console.error(\"Failed to fetch auth users:\", error.message);\n          return members;\n        }\n\n        // Filter to only the users we need\n        const relevantAuthUsers = authUsers.users.filter((user) =>\n          authIds.includes(user.id),\n        );\n\n        // Create a map for quick lookups\n        const authUserMap = new Map<string, Partial<AuthUser>>();\n        relevantAuthUsers.forEach((user) => {\n          authUserMap.set(user.id, {\n            id: user.id,\n            email: user.email ?? \"\",\n            email_confirmed_at: user.email_confirmed_at ?? \"\",\n            user_metadata: user.user_metadata || {},\n          });\n        });\n\n        // Combine member data with auth user data\n        const membersWithAuthData = members.map((member) => {\n          const authUser = authUserMap.get(member.profile.authId) ?? null;\n          return {\n            ...member,\n            authUser,\n          };\n        });\n\n        return membersWithAuthData;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n\n  inviteChoreographerWithLink: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Create the Supabase admin client\n        const supabase = await createClient({ isAdmin: true });\n\n        // Check if the email belongs to a registered user\n        const { data } = await supabase.auth.admin.listUsers();\n\n        // Filter users manually to find by email\n        const matchingUsers =\n          data?.users?.filter(\n            (user) => user.email?.toLowerCase() === input.email.toLowerCase(),\n          ) || [];\n\n        // Get user IDs if they exist\n        const userIds = matchingUsers.map((user) => user.id);\n\n        // Check for existing member with this email at this studio\n        const existingMember =\n          userIds.length > 0\n            ? await ctx.db.studioMember.findFirst({\n                where: {\n                  studio: {\n                    id: input.studioId,\n                  },\n                  profile: {\n                    authId: {\n                      in: userIds,\n                    },\n                  },\n                },\n              })\n            : null;\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This user is already a member of this studio\",\n          });\n        }\n\n        // Check for existing pending invitation\n        const existingInvitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            email: input.email,\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (existingInvitation) {\n          // Create a secure JWT token for the existing invitation\n          const token = await createJWT({\n            id: existingInvitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: existingInvitation.role,\n            type: \"studio-invitation\",\n          });\n\n          return {\n            status: \"already_invited\",\n            invitation: existingInvitation,\n            inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${existingInvitation.role}`,\n          };\n        }\n\n        // Store the invitation in the database with expiration (30 days)\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        // Fixed role to CHOREOGRAPHER\n        const role = \"CHOREOGRAPHER\";\n\n        // ctx.profile is guaranteed to exist in authedProcedure\n        const invitation = await ctx.db.studioInvitation.create({\n          data: {\n            email: input.email,\n            studioId: input.studioId,\n            role,\n            invitedById: ctx.profile.id,\n            expiresAt: expirationDate,\n            status: \"PENDING\",\n          },\n        });\n\n        // Create a secure JWT token with all needed data\n        const token = await createJWT({\n          id: invitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role,\n          type: \"studio-invitation\",\n        });\n\n        return {\n          status: \"invited\",\n          invitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${role}`,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Invite choreographer error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to generate invitation link\",\n          cause: error,\n        });\n      }\n    }),\n\n  validateInvitation: publicProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // First check if user is already a member of this studio\n        if (ctx.profile) {\n          const existingMembership = await ctx.db.studioMember.findUnique({\n            where: {\n              profileId_studioId: {\n                profileId: ctx.profile.id,\n                studioId: tokenData.studioId,\n              },\n            },\n            include: {\n              studio: true,\n            },\n          });\n\n          if (existingMembership) {\n            return {\n              valid: true,\n              alreadyMember: true,\n              membership: {\n                ...existingMembership,\n                studio: enhanceStudioWithLocationNames(\n                  existingMembership.studio,\n                ),\n              },\n              invitation: null,\n            };\n          }\n        }\n\n        // Find the invitation with related studio data\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n          },\n          include: {\n            studio: true,\n            invitedBy: true,\n          },\n        });\n\n        if (!invitation) {\n          // Check if there's any invitation with this email and studioId that's been accepted\n          if (tokenData.email) {\n            const acceptedInvitation = await ctx.db.studioInvitation.findFirst({\n              where: {\n                email: tokenData.email,\n                studioId: tokenData.studioId,\n                status: \"ACCEPTED\",\n              },\n              include: {\n                studio: true,\n              },\n            });\n\n            if (acceptedInvitation) {\n              return {\n                valid: true,\n                alreadyAccepted: true,\n                invitation: {\n                  ...acceptedInvitation,\n                  studio: enhanceStudioWithLocationNames(\n                    acceptedInvitation.studio,\n                  ),\n                },\n              };\n            }\n          }\n\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Handle different invitation statuses\n        if (invitation.status === \"ACCEPTED\") {\n          return {\n            valid: true,\n            alreadyAccepted: true,\n            invitation: {\n              ...invitation,\n              studio: enhanceStudioWithLocationNames(invitation.studio),\n            },\n          };\n        }\n\n        if (\n          invitation.status === \"EXPIRED\" ||\n          invitation.expiresAt < new Date()\n        ) {\n          // Update status to expired if it's not already\n          if (invitation.status !== \"EXPIRED\") {\n            await ctx.db.studioInvitation.update({\n              where: { id: invitation.id },\n              data: { status: \"EXPIRED\" },\n            });\n          }\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Return validated invitation with enhanced studio data\n        return {\n          valid: true,\n          invitation: {\n            ...invitation,\n            studio: enhanceStudioWithLocationNames(invitation.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Validate invitation error:\", error);\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n    }),\n\n  // Update acceptInvitationWithLink procedure\n  acceptInvitationWithLink: authedProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // Find the invitation\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n            status: \"PENDING\",\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Check if expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Check if user is already a member\n        const existingMembership = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n            },\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (existingMembership) {\n          // Update invitation status\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return {\n            status: \"already_member\",\n            membership: {\n              ...existingMembership,\n              studio: enhanceStudioWithLocationNames(existingMembership.studio),\n            },\n          };\n        }\n\n        // Create new membership in a transaction\n        const result = await ctx.db.$transaction(async (tx) => {\n          // Add user to studio\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n              role: invitation.role,\n            },\n            include: {\n              studio: true,\n              profile: true,\n            },\n          });\n\n          // Update invitation status\n          await tx.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return membership;\n        });\n\n        return {\n          status: \"accepted\",\n          membership: {\n            ...result,\n            studio: enhanceStudioWithLocationNames(result.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Accept invitation error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to accept invitation\",\n          cause: error,\n        });\n      }\n    }),\n});\n```\n\n\n    You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.\n    \n        ### Objective\n        - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.\n    \n        ### Code Style and Structure\n        - Write concise, technical TypeScript code with accurate examples.\n        - Use functional and declarative programming patterns; avoid classes.\n        - Favor iteration and modularization over code duplication.\n        - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).\n        - Structure files with exported components, subcomponents, helpers, static content, and types.\n        - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).\n    \n        ### Optimization and Best Practices\n        - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.\n        - Implement dynamic imports for code splitting and optimization.\n        - Use responsive design with a mobile-first approach.\n        - Optimize images: use WebP format, include size data, implement lazy loading.\n    \n        ### Error Handling and Validation\n        - Prioritize error handling and edge cases:\n          - Use early returns for error conditions.\n          - Implement guard clauses to handle preconditions and invalid states early.\n          - Use custom error types for consistent error handling.\n    \n        ### UI and Styling\n        - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.\n        - Implement consistent design and responsive patterns across platforms.\n    \n        ### State Management and Data Fetching\n        - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.\n        - Implement validation using Zod for schema validation.\n    \n        ### Security and Performance\n        - Implement proper error handling, user input validation, and secure coding practices.\n        - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.\n    \n        ### Testing and Documentation\n        - Write unit tests for components using Jest and React Testing Library.\n        - Provide clear and concise comments for complex logic.\n        - Use JSDoc comments for functions and components to improve IDE intellisense.\n    \n        ### Methodology\n        1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.\n        2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.\n        3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.\n    \n        **Process**:\n        1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.\n        2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.\n        3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.\n        4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.\n        5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.\n        \nchange the intstructor to \"Choreographer\" in the form\nand fetch the choreographer using the getMembers query\nand implement it in the dropwdown\n\n\nI'll implement the requested changes. Let me fix the instructor field to \"Choreographer\" and properly fetch choreographers using the getMembers query:\n\n```tsx\n\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Calendar,\n  Clock,\n  DollarSign,\n  MapPin,\n  Sparkles,\n  Users,\n  Clipboard,\n  CalendarClock,\n  Settings,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { DatePicker } from \"~/components/ui/neo-date-picker\";\nimport { Checkbox } from \"~/components/ui/checkbox\";\nimport { type StudioMember } from \"@prisma/client\";\nimport { api } from \"~/trpc/react\";\nimport { NeoSeparator } from \"~/components/ui/neo-separator\";\nimport { SKILL_LEVELS_ARRAY, SkillLevelName } from \"~/lib/get-skill-level\";\nimport { DANCE_STYLES_ARRAY, DanceStyleName } from \"~/lib/get-dance-style\";\n\n// Schema for form validation\nconst scheduleFormSchema = z.object({\n  title: z\n    .string()\n    .min(2, \"Title must be at least 2 characters\")\n    .max(100, \"Title must be at most 100 characters\"),\n  description: z.string().optional(),\n  startDate: z.date({ required_error: \"Start date is required\" }),\n  startTime: z.date({ required_error: \"Start time is required\" }),\n  endTime: z.date({ required_error: \"End time is required\" }),\n  maxCapacity: z.number().int().positive().optional(),\n  price: z.number().nonnegative().optional(),\n  currency: z.string().length(3).default(\"USD\"),\n  location: z.string().max(100).optional(),\n  danceStyle: z.union([z.literal(\"none\"), z.nativeEnum(DanceStyleName)]),\n  levelId: z.union([z.literal(\"none\"), z.nativeEnum(SkillLevelName)]),\n  choreographerId: z.string(), // This can handle \"tba\" values\n});\n\ntype ScheduleFormValues = z.infer<typeof scheduleFormSchema>;\n\ninterface ScheduleFormProps {\n  studioId: string;\n  studioSlug: string;\n}\n\nexport function ScheduleForm({ studioId, studioSlug }: ScheduleFormProps) {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Fetch choreographers using getMembers query\n  const { data: choreographersData, isLoading: isLoadingChoreographers } = api.studio.getMembers.useQuery(\n    { studioId, role: \"CHOREOGRAPHER\" },\n    { enabled: !!studioId }\n  );\n\n  const choreographers = choreographersData || [];\n\n  // Setup form with default values\n  const form = useForm<ScheduleFormValues>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startDate: new Date(),\n      startTime: new Date(),\n      endTime: new Date(new Date().setHours(new Date().getHours() + 1)),\n      maxCapacity: 20,\n      price: 0,\n      currency: \"USD\",\n      location: \"\",\n      danceStyle: \"none\",\n      levelId: \"none\",\n      choreographerId: \"tba\",\n    },\n  });\n\n  // tRPC mutation for creating a schedule\n  const createScheduleMutation = api.schedule.create.useMutation({\n    onSuccess: () => {\n      router.push(`/profile`);\n      router.refresh();\n    },\n  });\n\n  // Process form submission\n  async function onSubmit(data: ScheduleFormValues) {\n    setIsSubmitting(true);\n\n    try {\n      // Combine date and time\n      const startTime = new Date(data.startDate);\n      const startHours = data.startTime.getHours();\n      const startMinutes = data.startTime.getMinutes();\n      startTime.setHours(startHours, startMinutes, 0, 0);\n\n      const endTime = new Date(data.startDate);\n      const endHours = data.endTime.getHours();\n      const endMinutes = data.endTime.getMinutes();\n      endTime.setHours(endHours, endMinutes, 0, 0);\n\n      // Validate end time is after start time\n      if (endTime <= startTime) {\n        form.setError(\"endTime\", {\n          type: \"manual\",\n          message: \"End time must be after start time\",\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      await createScheduleMutation.mutateAsync({\n        studioId,\n        title: data.title,\n        description: data.description,\n        startTime,\n        endTime,\n        maxCapacity: data.maxCapacity,\n        price: data.price,\n        currency: data.currency,\n        location: data.location,\n        danceStyle: data.danceStyle === \"none\" ? undefined : data.danceStyle,\n        levelId: data.levelId === \"none\" ? undefined : data.levelId,\n        choreographerId:\n          data.choreographerId === \"tba\" ? undefined : data.choreographerId,\n      });\n    } catch (error) {\n      console.error(\"Failed to create schedule:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Info Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n            <Clipboard className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Basic Class Information</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Class Title <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"e.g., Hip Hop Beginner's Class\"\n                  {...field}\n                  className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Describe what students will learn in this class...\"\n                  className=\"min-h-[120px] resize-y bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"danceStyle\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Dance Style</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select a dance style\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific style</SelectItem>\n                    {DANCE_STYLES_ARRAY.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"levelId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Skill Level</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select skill level\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific level</SelectItem>\n                    {SKILL_LEVELS_ARRAY.map((level) => (\n                      <SelectItem key={level.id} value={level.id}>\n                        {level.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Schedule Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n            <CalendarClock className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Schedule & Time</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"startDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Date <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <DatePicker\n                  date={field.value}\n                  setDate={field.onChange}\n                  className=\"w-full bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  Start Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select start time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  End Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select end time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Additional Details Section Header */}\n        <div className=\"mt-8 flex\ncontinue\nLet me complete the form implementation with the choreographer dropdown:\n\n```tsx\n        {/* Additional Details Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n            <Settings className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Additional Details</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"location\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Location</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., Studio A, Room 101\"\n                    {...field}\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"choreographerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Choreographer</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  disabled={isLoadingChoreographers}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder={isLoadingChoreographers ? \"Loading choreographers...\" : \"Select a choreographer\"} />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"tba\">To be announced</SelectItem>\n                    {choreographers.map((member) => (\n                      <SelectItem \n                        key={member.id} \n                        value={member.id}\n                      >\n                        {member.profile.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"maxCapacity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Maximum Capacity</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    placeholder=\"20\"\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                    {...field}\n                    onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Price</FormLabel>\n                <div className=\"flex bg-white shadow-neo-sm dark:bg-black\">\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      step={0.01}\n                      placeholder=\"0.00\"\n                      className=\"flex-1 border-0 bg-transparent p-3\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                    />\n                  </FormControl>\n                  <Select\n                    value={form.watch(\"currency\")}\n                    onValueChange={(value) => form.setValue(\"currency\", value)}\n                  >\n                    <SelectTrigger className=\"w-24 border-0 bg-transparent\">\n                      <SelectValue placeholder=\"USD\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border shadow-neo-sm\">\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"GBP\">GBP</SelectItem>\n                      <SelectItem value=\"CAD\">CAD</SelectItem>\n                      <SelectItem value=\"AUD\">AUD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"pt-6\">\n          <NeoButton\n            type=\"submit\"\n            className=\"w-full transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none\"\n            disabled={isSubmitting}\n          >\n            <Sparkles className=\"mr-2 h-5 w-5\" />\n            {isSubmitting ? \"Creating...\" : \"Create Class Schedule\"}\n          </NeoButton>\n        </div>\n      </form>\n    </Form>\n  );\n}\n```\n\nThe key changes I've implemented:\n\n1. Changed the label from \"Instructor\" to \"Choreographer\" in the form\n2. Removed the `choreographers` prop from `ScheduleFormProps` interface since we're now fetching them directly with the TRPC query\n3. Added a call to `api.studio.getMembers.useQuery()` with the appropriate parameters:\n   ```tsx\n   const { data: choreographersData, isLoading: isLoadingChoreographers } = api.studio.getMembers.useQuery(\n     { studioId, role: \"CHOREOGRAPHER\" },\n     { enabled: !!studioId }\n   );\n   \n   const choreographers = choreographersData || [];\n   ```\n4. Added loading state handling in the dropdown:\n   ```tsx\n   disabled={isLoadingChoreographers}\n   ```\n   ```tsx\n   <SelectValue placeholder={isLoadingChoreographers ? \"Loading choreographers...\" : \"Select a choreographer\"} />\n   ```\n5. Fixed the map function to properly display choreographer names:\n   ```tsx\n   {choreographers.map((member) => (\n     <SelectItem \n       key={member.id} \n       value={member.id}\n     >\n       {member.profile.name}\n     </SelectItem>\n   ))}\n   ```\n\nThis implementation ensures the choreographers are properly fetched using the API and displayed correctly in the dropdown menu.\n```tsx dance-book-app/src/app/(private)/profile/page.tsx\nimport React, { Suspense } from \"react\";\nimport {\n  BarChart3,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  Users,\n  Building2,\n  ChevronRight,\n} from \"lucide-react\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoBadge } from \"~/components/ui/neo-badge\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { api, HydrateClient } from \"~/trpc/server\";\nimport { ChoreographerInviteDialog } from \"./choreographers-form\";\nimport { type AuthUser } from \"@supabase/supabase-js\";\n\n// Loading skeleton component\nfunction ProfileSkeleton() {\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      {/* Studio header skeleton */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"neo-border h-14 w-14 animate-pulse rounded-xl bg-neutral-200 dark:bg-neutral-800 md:h-16 md:w-16\"></div>\n          <div>\n            <div className=\"h-7 w-48 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800\"></div>\n            <div className=\"mt-2 h-5 w-36 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800\"></div>\n          </div>\n        </div>\n        <div className=\"h-10 w-40 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800 sm:w-48\"></div>\n      </div>\n\n      {/* Stats Section skeleton */}\n      <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {[1, 2, 3, 4].map((i) => (\n          <div\n            key={i}\n            className=\"neo-border h-24 animate-pulse rounded-xl bg-neutral-200 p-3 dark:bg-neutral-800 md:p-5\"\n          ></div>\n        ))}\n      </div>\n\n      {/* Main content area skeleton */}\n      <div className=\"grid gap-6 md:grid-cols-7\">\n        <div className=\"neo-border h-80 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:col-span-4 md:p-5\"></div>\n        <div className=\"neo-border h-80 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:col-span-3 md:p-5\"></div>\n      </div>\n\n      {/* Choreographer Management Section skeleton */}\n      <div className=\"neo-border h-60 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:p-5\"></div>\n    </div>\n  );\n}\n\n// Define types for better type safety\ninterface ClassItem {\n  id: string;\n  name: string;\n  time: string;\n  instructor: string;\n  attendees: number;\n}\n\n// Main profile content component\nasync function ProfileContent() {\n  // Get the current user profile with studio memberships\n  const profile = await api.profile.getCurrent();\n\n  // Get the first studio the user is a member of (if any)\n  const studio = profile.studioMembers[0]?.studio;\n  const studioId = studio?.id ?? \"\";\n\n  // Only fetch choreographers if there's a studio\n  const choreographerMembers = studioId\n    ? await api.studio.getMembers({\n        role: \"CHOREOGRAPHER\",\n        studioId,\n      })\n    : [];\n\n  // Get the studio slug or use a default\n  const studioSlug = studio?.slug ?? \"default-studio\";\n\n  // Create a complete studioData object\n  const studioData = {\n    id: studio?.id ?? \"studio-1\",\n    name: studio?.name ?? \"Your Dance Studio\",\n    slug: studioSlug,\n    logo: studio?.logo,\n    // Add default data for the UI\n    revenue: {\n      total: \"$0.00\",\n      percentageChange: 0,\n    },\n    bookings: {\n      total: \"0\",\n      percentageChange: 0,\n    },\n    classes: {\n      total: \"0\",\n      active: \"0\",\n    },\n    choreographers: {\n      total: choreographerMembers.length,\n    },\n    upcomingClasses: [\n      {\n        id: \"class-1\",\n        name: \"Hip Hop Beginners\",\n        time: \"Today, 5:00 PM\",\n        instructor: \"Jane Smith\",\n        attendees: 12,\n      },\n      {\n        id: \"class-2\",\n        name: \"Contemporary Advanced\",\n        time: \"Tomorrow, 6:30 PM\",\n        instructor: \"John Doe\",\n        attendees: 8,\n      },\n    ] as ClassItem[],\n  };\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      {/* Studio header */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"neo-border relative h-14 w-14 overflow-hidden rounded-xl md:h-16 md:w-16\">\n            {studioData.logo ? (\n              <Image\n                src={studioData.logo}\n                alt={studioData.name}\n                fill\n                sizes=\"(max-width: 768px) 56px, 64px\"\n                className=\"object-cover\"\n              />\n            ) : (\n              <div className=\"flex h-full w-full items-center justify-center bg-muted\">\n                <Building2 className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n            )}\n          </div>\n          <div>\n            <h1 className=\"neo-subtitle text-xl md:text-2xl\">\n              {studioData.name}\n            </h1>\n            <p className=\"text-sm text-muted-foreground md:text-base\">\n              Studio Admin Dashboard\n            </p>\n          </div>\n        </div>\n        <Link href={`/profile/${studioData.slug}/schedules/add`}>\n          <NeoButton className=\"w-full sm:w-auto\">\n            <Calendar className=\"mr-2 h-4 w-4\" />\n            <span className=\"sm:inline\">Add Class Schedule</span>\n          </NeoButton>\n        </Link>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {/* Revenue Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Revenue\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.revenue.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n              <DollarSign className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span\n              className={`text-xs font-medium ${studioData.revenue.percentageChange > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n            >\n              {studioData.revenue.percentageChange > 0 ? \"+\" : \"\"}\n              {studioData.revenue.percentageChange}%\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              from last month\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Bookings Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Total Bookings\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.bookings.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n              <TrendingUp className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span\n              className={`text-xs font-medium ${studioData.bookings.percentageChange > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n            >\n              {studioData.bookings.percentageChange > 0 ? \"+\" : \"\"}\n              {studioData.bookings.percentageChange}%\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              from last month\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Classes Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Classes\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.classes.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n              <Calendar className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span className=\"text-xs font-medium\">\n              {studioData.classes.active} active\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              this week\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Choreographers Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Choreographers\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.choreographers.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-purple-200 text-black shadow-neo-sm\">\n              <Users className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center gap-1\">\n            <div className=\"flex -space-x-2\">\n              {choreographerMembers.slice(0, 3).map((choreographer) => {\n                const authUser = (\n                  choreographer as unknown as { authUser: AuthUser }\n                )?.authUser;\n                return (\n                  <div\n                    key={choreographer.id}\n                    className=\"neo-border h-6 w-6 overflow-hidden rounded-full bg-white\"\n                  >\n                    {authUser.user_metadata.avatar_url ? (\n                      <Image\n                        src={authUser.user_metadata.avatar_url as string}\n                        alt={\n                          (authUser.user_metadata.name as string) ||\n                          \"Choreographer\"\n                        }\n                        width={24}\n                        height={24}\n                        className=\"h-full w-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"flex h-full w-full items-center justify-center bg-purple-100\">\n                        <Users className=\"h-3 w-3 text-purple-500\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              {choreographerMembers.length > 0 ? \"active\" : \"no choreographers\"}\n            </span>\n          </div>\n        </NeoCard>\n      </div>\n\n      {/* Main content area */}\n      <div className=\"grid gap-6 md:grid-cols-7\">\n        {/* Activity chart */}\n        <NeoCard className=\"p-4 md:col-span-4 md:p-5\">\n          <div className=\"mb-4 flex items-center justify-between\">\n            <h3 className=\"text-base font-bold md:text-lg\">Revenue Overview</h3>\n            <NeoBadge className=\"text-xs\">Last 7 days</NeoBadge>\n          </div>\n          <div className=\"flex h-[200px] items-center justify-center rounded-xl border-2 border-dashed border-muted md:h-[300px]\">\n            <div className=\"flex flex-col items-center text-center\">\n              <BarChart3\n                className=\"h-10 w-10 text-muted md:h-12 md:w-12\"\n                strokeWidth={1.5}\n              />\n              <p className=\"mt-2 text-xs text-muted-foreground md:text-sm\">\n                Revenue chart would be displayed here\n              </p>\n            </div>\n          </div>\n        </NeoCard>\n\n        {/* Upcoming classes */}\n        <NeoCard className=\"p-4 md:col-span-3 md:p-5\">\n          <div className=\"mb-4 flex items-center justify-between\">\n            <h3 className=\"text-base font-bold md:text-lg\">Upcoming Classes</h3>\n            <Link href={`/profile/${studioData.slug}/schedules`}>\n              <NeoButton variant=\"outline\" className=\"h-7 text-xs md:h-8\">\n                View All\n              </NeoButton>\n            </Link>\n          </div>\n          <div className=\"space-y-4 md:space-y-5\">\n            {studioData.upcomingClasses.length > 0 ? (\n              studioData.upcomingClasses.map((classItem) => (\n                <div\n                  key={classItem.id}\n                  className=\"flex items-center justify-between\"\n                >\n                  <div>\n                    <p className=\"text-sm font-bold md:text-base\">\n                      {classItem.name}\n                    </p>\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground md:gap-2 md:text-sm\">\n                      <Calendar className=\"h-3 w-3 md:h-3.5 md:w-3.5\" />\n                      <span>{classItem.time}</span>\n                    </div>\n                    <p className=\"text-xs md:text-sm\">{classItem.instructor}</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"flex items-center rounded-full bg-muted px-2 py-0.5 text-xs\">\n                      <Users className=\"mr-1 h-3 w-3 md:h-3.5 md:w-3.5\" />\n                      {classItem.attendees}\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-sm text-muted-foreground\">\n                No upcoming classes\n              </p>\n            )}\n          </div>\n        </NeoCard>\n      </div>\n\n      {/* Choreographer Management Section - Using real choreographer data */}\n      <NeoCard className=\"p-4 md:p-5\">\n        <div className=\"mb-4 flex flex-col justify-between gap-4 sm:flex-row sm:items-center\">\n          <h3 className=\"text-base font-bold md:text-lg\">Choreographers</h3>\n\n          {/* Only show invite dialog if we have a studio to invite to */}\n          {studioId && (\n            <ChoreographerInviteDialog\n              studioId={studioId}\n              studioSlug={studioSlug}\n              buttonClassName=\"w-full sm:w-auto\"\n            />\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n          {choreographerMembers.length > 0 ? (\n            choreographerMembers.map((member) => {\n              const authUser = (member as unknown as { authUser: AuthUser })\n                ?.authUser;\n              return (\n                <Link\n                  key={member.id}\n                  href={`/profile/${studioSlug}/choreographers/${member.id}`}\n                  className=\"block\"\n                >\n                  <div className=\"neo-border flex items-center gap-3 rounded-xl p-3 transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none md:p-4\">\n                    <div className=\"neo-border h-10 w-10 overflow-hidden rounded-full md:h-12 md:w-12\">\n                      {authUser.user_metadata.avatar_url ? (\n                        <Image\n                          src={authUser.user_metadata.avatar_url as string}\n                          alt={\n                            (authUser.user_metadata.name as string) ||\n                            \"Choreographer\"\n                          }\n                          width={48}\n                          height={48}\n                          className=\"h-full w-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"flex h-full w-full items-center justify-center bg-purple-100\">\n                          <Users className=\"h-6 w-6 text-purple-500\" />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-grow\">\n                      <p className=\"text-sm font-bold md:text-base\">\n                        {authUser.user_metadata.name || \"Unnamed Choreographer\"}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground md:text-sm\">\n                        {authUser.email ?? \"No email\"}\n                      </p>\n                    </div>\n                    <div className=\"flex-shrink-0 opacity-70\">\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </div>\n                  </div>\n                </Link>\n              );\n            })\n          ) : (\n            <div className=\"col-span-full rounded-xl border-2 border-dashed border-muted p-8 text-center\">\n              <Users className=\"mx-auto mb-3 h-10 w-10 text-muted-foreground\" />\n              <p className=\"mb-2 font-medium\">No choreographers yet</p>\n              <p className=\"mb-4 text-sm text-muted-foreground\">\n                Add choreographers to assign them to your dance classes.\n              </p>\n\n              {studioId && (\n                <ChoreographerInviteDialog\n                  studioId={studioId}\n                  studioSlug={studioSlug}\n                  buttonLabel=\"Add Your First Choreographer\"\n                  size=\"sm\"\n                />\n              )}\n            </div>\n          )}\n        </div>\n      </NeoCard>\n    </div>\n  );\n}\n\nexport default async function ProfilePage() {\n  await api.profile.getCurrent.prefetch();\n\n  await api.studio.getMembers.prefetch({\n    role: \"CHOREOGRAPHER\",\n    studioId: \"\",\n  });\n\n  return (\n    <HydrateClient>\n      <Suspense fallback={<ProfileSkeleton />}>\n        <ProfileContent />\n      </Suspense>\n    </HydrateClient>\n  );\n}\n```\n\n```tsx dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx\n\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Calendar,\n  Clock,\n  DollarSign,\n  MapPin,\n  Sparkles,\n  Users,\n  Clipboard,\n  CalendarClock,\n  Settings,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { DatePicker } from \"~/components/ui/neo-date-picker\";\nimport { Checkbox } from \"~/components/ui/checkbox\";\nimport { type StudioMember } from \"@prisma/client\";\nimport { api } from \"~/trpc/react\";\nimport { NeoSeparator } from \"~/components/ui/neo-separator\";\nimport { SKILL_LEVELS_ARRAY, SkillLevelName } from \"~/lib/get-skill-level\";\nimport { DANCE_STYLES_ARRAY, DanceStyleName } from \"~/lib/get-dance-style\";\n\n// Schema for form validation\nconst scheduleFormSchema = z.object({\n  title: z\n    .string()\n    .min(2, \"Title must be at least 2 characters\")\n    .max(100, \"Title must be at most 100 characters\"),\n  description: z.string().optional(),\n  startDate: z.date({ required_error: \"Start date is required\" }),\n  startTime: z.date({ required_error: \"Start time is required\" }),\n  endTime: z.date({ required_error: \"End time is required\" }),\n  maxCapacity: z.number().int().positive().optional(),\n  price: z.number().nonnegative().optional(),\n  currency: z.string().length(3).default(\"USD\"),\n  location: z.string().max(100).optional(),\n  danceStyle: z.union([z.literal(\"none\"), z.nativeEnum(DanceStyleName)]),\n  levelId: z.union([z.literal(\"none\"), z.nativeEnum(SkillLevelName)]),\n  choreographerId: z.string(), // This can handle \"tba\" values\n});\n\ntype ScheduleFormValues = z.infer<typeof scheduleFormSchema>;\n\ninterface ScheduleFormProps {\n  studioId: string;\n  studioSlug: string;\n}\n\nexport function ScheduleForm({ studioId, studioSlug }: ScheduleFormProps) {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Fetch choreographers using getMembers query\n  const { data: choreographersData, isLoading: isLoadingChoreographers } =\n    api.studio.getMembers.useQuery(\n      { studioId, role: \"CHOREOGRAPHER\" },\n      { enabled: !!studioId },\n    );\n\n  const choreographers = choreographersData || [];\n\n  // Setup form with default values\n  const form = useForm<ScheduleFormValues>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startDate: new Date(),\n      startTime: new Date(),\n      endTime: new Date(new Date().setHours(new Date().getHours() + 1)),\n      maxCapacity: 20,\n      price: 0,\n      currency: \"USD\",\n      location: \"\",\n      danceStyle: \"none\",\n      levelId: \"none\",\n      choreographerId: \"tba\",\n    },\n  });\n\n  // tRPC mutation for creating a schedule\n  const createScheduleMutation = api.schedule.create.useMutation({\n    onSuccess: () => {\n      router.push(`/profile`);\n      router.refresh();\n    },\n  });\n\n  // Process form submission\n  async function onSubmit(data: ScheduleFormValues) {\n    setIsSubmitting(true);\n\n    try {\n      // Combine date and time\n      const startTime = new Date(data.startDate);\n      const startHours = data.startTime.getHours();\n      const startMinutes = data.startTime.getMinutes();\n      startTime.setHours(startHours, startMinutes, 0, 0);\n\n      const endTime = new Date(data.startDate);\n      const endHours = data.endTime.getHours();\n      const endMinutes = data.endTime.getMinutes();\n      endTime.setHours(endHours, endMinutes, 0, 0);\n\n      // Validate end time is after start time\n      if (endTime <= startTime) {\n        form.setError(\"endTime\", {\n          type: \"manual\",\n          message: \"End time must be after start time\",\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      await createScheduleMutation.mutateAsync({\n        studioId,\n        title: data.title,\n        description: data.description,\n        startTime,\n        endTime,\n        maxCapacity: data.maxCapacity,\n        price: data.price,\n        currency: data.currency,\n        location: data.location,\n        danceStyle: data.danceStyle === \"none\" ? undefined : data.danceStyle,\n        levelId: data.levelId === \"none\" ? undefined : data.levelId,\n        choreographerId:\n          data.choreographerId === \"tba\" ? undefined : data.choreographerId,\n      });\n    } catch (error) {\n      console.error(\"Failed to create schedule:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Info Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n            <Clipboard className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Basic Class Information</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Class Title <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"e.g., Hip Hop Beginner's Class\"\n                  {...field}\n                  className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Describe what students will learn in this class...\"\n                  className=\"min-h-[120px] resize-y bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"danceStyle\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Dance Style</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select a dance style\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific style</SelectItem>\n                    {DANCE_STYLES_ARRAY.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"levelId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Skill Level</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select skill level\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific level</SelectItem>\n                    {SKILL_LEVELS_ARRAY.map((level) => (\n                      <SelectItem key={level.id} value={level.id}>\n                        {level.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Schedule Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n            <CalendarClock className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Schedule & Time</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"startDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Date <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <DatePicker\n                  date={field.value}\n                  setDate={field.onChange}\n                  className=\"w-full bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  Start Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select start time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  End Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select end time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        {/* Additional Details Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n            <Settings className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Additional Details</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"location\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Location</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., Studio A, Room 101\"\n                    {...field}\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"choreographerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Choreographer</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  disabled={isLoadingChoreographers}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue\n                        placeholder={\n                          isLoadingChoreographers\n                            ? \"Loading choreographers...\"\n                            : \"Select a choreographer\"\n                        }\n                      />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"tba\">To be announced</SelectItem>\n                    {choreographers.map((member) => (\n                      <SelectItem key={member.id} value={member.id}>\n                        {member.profile.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"maxCapacity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Maximum Capacity</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    placeholder=\"20\"\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                    {...field}\n                    onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Price</FormLabel>\n                <div className=\"flex bg-white shadow-neo-sm dark:bg-black\">\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      step={0.01}\n                      placeholder=\"0.00\"\n                      className=\"flex-1 border-0 bg-transparent p-3\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                    />\n                  </FormControl>\n                  <Select\n                    value={form.watch(\"currency\")}\n                    onValueChange={(value) => form.setValue(\"currency\", value)}\n                  >\n                    <SelectTrigger className=\"w-24 border-0 bg-transparent\">\n                      <SelectValue placeholder=\"USD\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border shadow-neo-sm\">\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"GBP\">GBP</SelectItem>\n                      <SelectItem value=\"CAD\">CAD</SelectItem>\n                      <SelectItem value=\"AUD\">AUD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"pt-6\">\n          <NeoButton\n            type=\"submit\"\n            className=\"w-full transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none\"\n            disabled={isSubmitting}\n          >\n            <Sparkles className=\"mr-2 h-5 w-5\" />\n            {isSubmitting ? \"Creating...\" : \"Create Class Schedule\"}\n          </NeoButton>\n        </div>\n      </form>\n    </Form>\n  );\n}\n```\n\nto display the data can you make the schedule-form.tsx as reference we can get the user data in the authUser\nI'll update the `schedule-form.tsx` component to display the choreographer names correctly using the authUser data that's available in the getMembers query result. Here's the updated implementation:\n\n```tsx\n\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  Calendar,\n  Clock,\n  DollarSign,\n  MapPin,\n  Sparkles,\n  Users,\n  Clipboard,\n  CalendarClock,\n  Settings,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\nimport { DatePicker } from \"~/components/ui/neo-date-picker\";\nimport { Checkbox } from \"~/components/ui/checkbox\";\nimport { type StudioMember } from \"@prisma/client\";\nimport { api } from \"~/trpc/react\";\nimport { NeoSeparator } from \"~/components/ui/neo-separator\";\nimport { SKILL_LEVELS_ARRAY, SkillLevelName } from \"~/lib/get-skill-level\";\nimport { DANCE_STYLES_ARRAY, DanceStyleName } from \"~/lib/get-dance-style\";\nimport { type AuthUser } from \"@supabase/supabase-js\";\n\n// Schema for form validation\nconst scheduleFormSchema = z.object({\n  title: z\n    .string()\n    .min(2, \"Title must be at least 2 characters\")\n    .max(100, \"Title must be at most 100 characters\"),\n  description: z.string().optional(),\n  startDate: z.date({ required_error: \"Start date is required\" }),\n  startTime: z.date({ required_error: \"Start time is required\" }),\n  endTime: z.date({ required_error: \"End time is required\" }),\n  maxCapacity: z.number().int().positive().optional(),\n  price: z.number().nonnegative().optional(),\n  currency: z.string().length(3).default(\"USD\"),\n  location: z.string().max(100).optional(),\n  danceStyle: z.union([z.literal(\"none\"), z.nativeEnum(DanceStyleName)]),\n  levelId: z.union([z.literal(\"none\"), z.nativeEnum(SkillLevelName)]),\n  choreographerId: z.string(), // This can handle \"tba\" values\n});\n\ntype ScheduleFormValues = z.infer<typeof scheduleFormSchema>;\n\ninterface ScheduleFormProps {\n  studioId: string;\n  studioSlug: string;\n}\n\n// Type for the member with authUser data\ntype MemberWithAuth = StudioMember & {\n  profile: {\n    id: string;\n    name: string;\n    authId: string;\n  };\n  authUser: AuthUser;\n};\n\nexport function ScheduleForm({ studioId, studioSlug }: ScheduleFormProps) {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Fetch choreographers using getMembers query\n  const { data: choreographersData, isLoading: isLoadingChoreographers } =\n    api.studio.getMembers.useQuery(\n      { studioId, role: \"CHOREOGRAPHER\" },\n      { enabled: !!studioId },\n    );\n\n  const choreographers = choreographersData || [];\n\n  // Setup form with default values\n  const form = useForm<ScheduleFormValues>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startDate: new Date(),\n      startTime: new Date(),\n      endTime: new Date(new Date().setHours(new Date().getHours() + 1)),\n      maxCapacity: 20,\n      price: 0,\n      currency: \"USD\",\n      location: \"\",\n      danceStyle: \"none\",\n      levelId: \"none\",\n      choreographerId: \"tba\",\n    },\n  });\n\n  // tRPC mutation for creating a schedule\n  const createScheduleMutation = api.schedule.create.useMutation({\n    onSuccess: () => {\n      router.push(`/profile`);\n      router.refresh();\n    },\n  });\n\n  // Process form submission\n  async function onSubmit(data: ScheduleFormValues) {\n    setIsSubmitting(true);\n\n    try {\n      // Combine date and time\n      const startTime = new Date(data.startDate);\n      const startHours = data.startTime.getHours();\n      const startMinutes = data.startTime.getMinutes();\n      startTime.setHours(startHours, startMinutes, 0, 0);\n\n      const endTime = new Date(data.startDate);\n      const endHours = data.endTime.getHours();\n      const endMinutes = data.endTime.getMinutes();\n      endTime.setHours(endHours, endMinutes, 0, 0);\n\n      // Validate end time is after start time\n      if (endTime <= startTime) {\n        form.setError(\"endTime\", {\n          type: \"manual\",\n          message: \"End time must be after start time\",\n        });\n        setIsSubmitting(false);\n        return;\n      }\n\n      await createScheduleMutation.mutateAsync({\n        studioId,\n        title: data.title,\n        description: data.description,\n        startTime,\n        endTime,\n        maxCapacity: data.maxCapacity,\n        price: data.price,\n        currency: data.currency,\n        location: data.location,\n        danceStyle: data.danceStyle === \"none\" ? undefined : data.danceStyle,\n        levelId: data.levelId === \"none\" ? undefined : data.levelId,\n        choreographerId:\n          data.choreographerId === \"tba\" ? undefined : data.choreographerId,\n      });\n    } catch (error) {\n      console.error(\"Failed to create schedule:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  // Function to get choreographer display name\n  const getChoreographerDisplayName = (member: MemberWithAuth) => {\n    // Try to get name from authUser metadata first\n    if (member.authUser?.user_metadata?.name) {\n      return member.authUser.user_metadata.name as string;\n    }\n    \n    // Fall back to profile name\n    if (member.profile?.name) {\n      return member.profile.name;\n    }\n    \n    // Last resort, use email or a default\n    return member.authUser?.email || \"Unnamed Choreographer\";\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Basic Info Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n            <Clipboard className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Basic Class Information</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Class Title <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <Input\n                  placeholder=\"e.g., Hip Hop Beginner's Class\"\n                  {...field}\n                  className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Describe what students will learn in this class...\"\n                  className=\"min-h-[120px] resize-y bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"danceStyle\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Dance Style</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select a dance style\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific style</SelectItem>\n                    {DANCE_STYLES_ARRAY.map((style) => (\n                      <SelectItem key={style.id} value={style.id}>\n                        {style.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"levelId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Skill Level</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select skill level\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"none\">No specific level</SelectItem>\n                    {SKILL_LEVELS_ARRAY.map((level) => (\n                      <SelectItem key={level.id} value={level.id}>\n                        {level.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Schedule Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n            <CalendarClock className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Schedule & Time</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <FormField\n          control={form.control}\n          name=\"startDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"font-bold\">\n                Date <span className=\"text-red-500\">*</span>\n              </FormLabel>\n              <FormControl>\n                <DatePicker\n                  date={field.value}\n                  setDate={field.onChange}\n                  className=\"w-full bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  Start Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select start time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">\n                  End Time <span className=\"text-red-500\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Select\n                    value={format(field.value, \"HH:mm\")}\n                    onValueChange={(time) => {\n                      const [hours, minutes] = time.split(\":\").map(Number);\n                      const newDate = new Date(field.value);\n                      newDate.setHours(hours);\n                      newDate.setMinutes(minutes);\n                      field.onChange(newDate);\n                    }}\n                  >\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue placeholder=\"Select end time\">\n                        {format(field.value, \"h:mm a\")}\n                      </SelectValue>\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow\ncontinue\nHere's the continuation of the form implementation:\n\n```tsx\n                    <SelectContent className=\"neo-border max-h-56 overflow-y-auto shadow-neo-sm\">\n                      {Array.from({ length: 24 * 4 }, (_, i) => {\n                        const hour = Math.floor(i / 4);\n                        const minute = (i % 4) * 15;\n                        const time = `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`;\n                        const date = new Date();\n                        date.setHours(hour, minute);\n                        return (\n                          <SelectItem key={time} value={time}>\n                            {format(date, \"h:mm a\")}\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Additional Details Section Header */}\n        <div className=\"mt-8 flex items-center gap-3\">\n          <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n            <Settings className=\"h-5 w-5\" strokeWidth={2.5} />\n          </div>\n          <h3 className=\"text-lg font-bold\">Additional Details</h3>\n        </div>\n        <NeoSeparator className=\"my-4\" />\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"location\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Location</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., Studio A, Room 101\"\n                    {...field}\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"choreographerId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Choreographer</FormLabel>\n                <Select\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  disabled={isLoadingChoreographers}\n                >\n                  <FormControl>\n                    <SelectTrigger className=\"bg-white shadow-neo-sm transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none dark:bg-black\">\n                      <SelectValue\n                        placeholder={\n                          isLoadingChoreographers\n                            ? \"Loading choreographers...\"\n                            : \"Select a choreographer\"\n                        }\n                      />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent className=\"neo-border shadow-neo-sm\">\n                    <SelectItem value=\"tba\">To be announced</SelectItem>\n                    {choreographers.map((member) => {\n                      const typedMember = member as unknown as MemberWithAuth;\n                      return (\n                        <SelectItem \n                          key={typedMember.id} \n                          value={typedMember.id}\n                        >\n                          {getChoreographerDisplayName(typedMember)}\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"maxCapacity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Maximum Capacity</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    placeholder=\"20\"\n                    className=\"bg-white p-3 shadow-neo-sm transition-all focus:translate-x-0.5 focus:translate-y-0.5 focus:shadow-none dark:bg-black\"\n                    {...field}\n                    onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"font-bold\">Price</FormLabel>\n                <div className=\"flex bg-white shadow-neo-sm dark:bg-black\">\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      step={0.01}\n                      placeholder=\"0.00\"\n                      className=\"flex-1 border-0 bg-transparent p-3\"\n                      {...field}\n                      onChange={(e) => field.onChange(e.target.valueAsNumber)}\n                    />\n                  </FormControl>\n                  <Select\n                    value={form.watch(\"currency\")}\n                    onValueChange={(value) => form.setValue(\"currency\", value)}\n                  >\n                    <SelectTrigger className=\"w-24 border-0 bg-transparent\">\n                      <SelectValue placeholder=\"USD\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"neo-border shadow-neo-sm\">\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"GBP\">GBP</SelectItem>\n                      <SelectItem value=\"CAD\">CAD</SelectItem>\n                      <SelectItem value=\"AUD\">AUD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"pt-6\">\n          <NeoButton\n            type=\"submit\"\n            className=\"w-full transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none\"\n            disabled={isSubmitting}\n          >\n            <Sparkles className=\"mr-2 h-5 w-5\" />\n            {isSubmitting ? \"Creating...\" : \"Create Class Schedule\"}\n          </NeoButton>\n        </div>\n      </form>\n    </Form>\n  );\n}\n```\n\nThe key changes I've made to properly display choreographer data:\n\n1. Added the `AuthUser` type import from Supabase:\n```tsx\nimport { type AuthUser } from \"@supabase/supabase-js\";\n```\n\n2. Created a proper type definition for members with auth data:\n```tsx\n// Type for the member with authUser data\ntype MemberWithAuth = StudioMember & {\n  profile: {\n    id: string;\n    name: string;\n    authId: string;\n  };\n  authUser: AuthUser;\n};\n```\n\n3. Added a helper function to get the choreographer's display name with a priority order (user_metadata name → profile name → email → default):\n```tsx\n// Function to get choreographer display name\nconst getChoreographerDisplayName = (member: MemberWithAuth) => {\n  // Try to get name from authUser metadata first\n  if (member.authUser?.user_metadata?.name) {\n    return member.authUser.user_metadata.name as string;\n  }\n  \n  // Fall back to profile name\n  if (member.profile?.name) {\n    return member.profile.name;\n  }\n  \n  // Last resort, use email or a default\n  return member.authUser?.email || \"Unnamed Choreographer\";\n};\n```\n\n4. Updated the choreographer dropdown to properly cast and use the member data:\n```tsx\n{choreographers.map((member) => {\n  const typedMember = member as unknown as MemberWithAuth;\n  return (\n    <SelectItem \n      key={typedMember.id} \n      value={typedMember.id}\n    >\n      {getChoreographerDisplayName(typedMember)}\n    </SelectItem>\n  );\n})}\n```\n\nThis implementation now properly accesses and displays the choreographer names from the authUser data, similar to what's done in the profile page. It uses a type-safe approach with proper fallbacks if certain data is not available.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1132}}},{"id":{"replica_id":0,"value":65},"start":56779,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1133}}},{"id":{"replica_id":0,"value":106},"start":56834,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1134}}},{"id":{"replica_id":0,"value":140},"start":56870,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1135}}},{"id":{"replica_id":0,"value":141},"start":71684,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1136}}},{"id":{"replica_id":0,"value":284},"start":71693,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1137}}},{"id":{"replica_id":0,"value":285},"start":78445,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1138}}},{"id":{"replica_id":0,"value":771},"start":116543,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1139}}},{"id":{"replica_id":0,"value":772},"start":131222,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1140}}},{"id":{"replica_id":0,"value":1008},"start":131231,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1141}}},{"id":{"replica_id":0,"value":1009},"start":139689,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1142}}}],"summary":"Looking at the code, I need to update the schedule form to change \"Instructor\" to \"Choreographer\" and use the `getMembers` query to populate the dropdown instead of using the passed `choreographers` prop.","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":21188},"icon":"File","label":"dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx","metadata":{"path":"dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx"}},{"range":{"start":21189,"end":52675},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":52676,"end":56724},"icon":"Library","label":"next-tw-zod-zustand-shad","metadata":null},{"range":{"start":78445,"end":96210},"icon":"File","label":"dance-book-app/src/app/(private)/profile/page.tsx","metadata":{"path":"dance-book-app/src/app/(private)/profile/page.tsx"}},{"range":{"start":96211,"end":116433},"icon":"File","label":"dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx","metadata":{"path":"dance-book-app/src/app/(private)/profile/[slug]/schedules/add/schedule-form.tsx"}}]}