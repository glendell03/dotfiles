{"id":"f8f4c4d9-58ea-48d4-9b0c-2fad7643417e","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n```tsx dance-book-app/src/components/opening-hours.tsx\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport { X, Clock, Plus } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\n// Move these outside the component to prevent recreation on each render\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\n// Pre-generate default time slots - avoid creating these on every add\nconst DEFAULT_TIME_SLOT = [\"09:00\", \"17:00\"];\n\n// Pre-generate common business hours for better performance\nconst COMMON_TIMES = (() => {\n  const times = [];\n  // Standard business hours (7am-10pm)\n  for (let hour = 7; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      times.push(\n        `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`,\n      );\n    }\n  }\n  return times;\n})();\n\nexport function OpeningHoursEditor({\n  value = {},\n  onChange,\n}: OpeningHoursEditorProps) {\n  // Use lazy initialization through a function\n  const [hours, setHours] = useState<OpeningHours>(() => value);\n\n  // Memoize day operations with useCallback\n  const addDay = useCallback(\n    (day: string) => {\n      if (hours[day]) return;\n\n      const newHours = {\n        ...hours,\n        [day]: [...DEFAULT_TIME_SLOT],\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const removeDay = useCallback(\n    (day: string) => {\n      if (!hours[day]) return;\n\n      const newHours = { ...hours };\n      delete newHours[day];\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const updateTime = useCallback(\n    (day: string, index: number, time: string) => {\n      if (!hours[day]) return;\n\n      const newTimes = [...hours[day]];\n      newTimes[index] = time;\n\n      const newHours = {\n        ...hours,\n        [day]: newTimes,\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const copyToAllDays = useCallback(\n    (sourceDay: string) => {\n      const sourceTimes = hours[sourceDay];\n      if (!sourceTimes) return;\n\n      const newHours = { ...hours };\n      DAYS.forEach((day) => {\n        if (day.value !== sourceDay && newHours[day.value]) {\n          newHours[day.value] = [...sourceTimes];\n        }\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  // Toggle day status (add or remove) - simplified and optimized\n  const toggleDay = useCallback(\n    (day: string) => {\n      if (hours[day]) {\n        removeDay(day);\n      } else {\n        addDay(day);\n      }\n    },\n    [hours, addDay, removeDay],\n  );\n\n  // Memoize sorted entries to prevent recreating the array on each render\n  const sortedEntries = useMemo(() => {\n    const dayOrder = DAYS.map((day) => day.value);\n    return Object.entries(hours).sort(\n      (a, b) => dayOrder.indexOf(a[0]) - dayOrder.indexOf(b[0]),\n    );\n  }, [hours]);\n\n  const emptyState = Object.keys(hours).length === 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        {DAYS.map((day) => {\n          const isSelected = !!hours[day.value];\n          return (\n            <DayButton\n              key={day.value}\n              day={day}\n              isSelected={isSelected}\n              onClick={toggleDay}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"space-y-3\">\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n            day={day}\n            times={times}\n            removeDay={removeDay}\n            updateTime={updateTime}\n            copyToAllDays={copyToAllDays}\n          />\n        ))}\n\n        {emptyState && (\n          <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n            <p className=\"text-sm text-muted-foreground\">\n              No opening hours set\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Click a day button above to add hours\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Extract day button to optimize renders\nconst DayButton = React.memo(\n  ({\n    day,\n    isSelected,\n    onClick,\n  }: {\n    day: { value: string; label: string };\n    isSelected: boolean;\n    onClick: (day: string) => void;\n  }) => {\n    // Create handler inside the component to prevent unintended side effects\n    const handleClick = useCallback(\n      (e: React.MouseEvent) => {\n        // Prevent default to avoid any form submission\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(day.value);\n      },\n      [onClick, day.value],\n    );\n\n    return (\n      <Button\n        type=\"button\" // Explicitly set type to button to avoid form submission\n        variant={isSelected ? \"default\" : \"outline\"}\n        size=\"sm\"\n        onClick={handleClick}\n        className={`h-8 transition-colors ${!isSelected ? \"border-dashed\" : \"\"}`}\n      >\n        {!isSelected ? (\n          <>\n            <Plus className=\"mr-1 h-3 w-3\" />\n            {day.label.substring(0, 3)}\n          </>\n        ) : (\n          <>\n            {day.label.substring(0, 3)}\n            <X className=\"ml-1 h-3 w-3\" />\n          </>\n        )}\n      </Button>\n    );\n  },\n);\n\n// Extract the day row into a separate memoized component to reduce re-renders\nconst DayRow = React.memo(\n  ({\n    day,\n    times,\n    removeDay,\n    updateTime,\n    copyToAllDays,\n  }: {\n    day: string;\n    times: string[];\n    removeDay: (day: string) => void;\n    updateTime: (day: string, index: number, time: string) => void;\n    copyToAllDays: (day: string) => void;\n  }) => {\n    const dayLabel = DAYS.find((d) => d.value === day)?.label;\n\n    // Memoize time update handlers to prevent recreation on every render\n    const handleOpenTimeChange = useCallback(\n      (value: string) => {\n        updateTime(day, 0, value);\n      },\n      [day, updateTime],\n    );\n\n    const handleCloseTimeChange = useCallback(\n      (value: string) => {\n        updateTime(day, 1, value);\n      },\n      [day, updateTime],\n    );\n\n    const handleRemoveDay = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        removeDay(day);\n      },\n      [day, removeDay],\n    );\n\n    const handleCopyToAllDays = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        copyToAllDays(day);\n      },\n      [day, copyToAllDays],\n    );\n\n    return (\n      <div className=\"flex flex-col space-y-2 rounded-lg border bg-card p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium capitalize\">{dayLabel}</h4>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              type=\"button\" // Explicitly set type to button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleCopyToAllDays}\n              className=\"h-7 text-xs\"\n            >\n              Copy hours\n            </Button>\n            <Button\n              type=\"button\" // Explicitly set type to button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleRemoveDay}\n              className=\"h-6 w-6 text-destructive\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <SimpleTimeSelect\n            value={times[0]!}\n            onChange={handleOpenTimeChange}\n            placeholder=\"Open\"\n          />\n          <span className=\"text-sm text-muted-foreground\">to</span>\n          <SimpleTimeSelect\n            value={times[1]!}\n            onChange={handleCloseTimeChange}\n            placeholder=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\n// Simplified time select component that doesn't use complex virtualization\nconst SimpleTimeSelect = React.memo(\n  ({\n    value,\n    onChange,\n    placeholder,\n  }: {\n    value: string;\n    onChange: (value: string) => void;\n    placeholder: string;\n  }) => {\n    // Simple callback to prevent recreating functions\n    const handleChange = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n      },\n      [onChange],\n    );\n\n    return (\n      <Select value={value} onValueChange={handleChange}>\n        <SelectTrigger className=\"h-9 w-[110px]\">\n          <SelectValue placeholder={placeholder}>{value}</SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"max-h-[300px]\">\n          {COMMON_TIMES.map((time) => (\n            <SelectItem key={time} value={time}>\n              {time}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    );\n  },\n);\n\n// Add proper displayName for memo components\nDayButton.displayName = \"DayButton\";\nDayRow.displayName = \"DayRow\";\nSimpleTimeSelect.displayName = \"SimpleTimeSelect\";\n```\n\ncan we add \"All\" button in the first item and its functionality all meaning it will pass an array of all day and time\nHere's the implementation with an \"All\" button:\n\n```tsx\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport { X, Clock, Plus } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\n// Move these outside the component to prevent recreation on each render\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\n// Pre-generate default time slots - avoid creating these on every add\nconst DEFAULT_TIME_SLOT = [\"09:00\", \"17:00\"];\n\n// Pre-generate common business hours for better performance\nconst COMMON_TIMES = (() => {\n  const times = [];\n  // Standard business hours (7am-10pm)\n  for (let hour = 7; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      times.push(\n        `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`,\n      );\n    }\n  }\n  return times;\n})();\n\nexport function OpeningHoursEditor({\n  value = {},\n  onChange,\n}: OpeningHoursEditorProps) {\n  // Use lazy initialization through a function\n  const [hours, setHours] = useState<OpeningHours>(() => value);\n\n  // Memoize day operations with useCallback\n  const addDay = useCallback(\n    (day: string) => {\n      if (hours[day]) return;\n\n      const newHours = {\n        ...hours,\n        [day]: [...DEFAULT_TIME_SLOT],\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const removeDay = useCallback(\n    (day: string) => {\n      if (!hours[day]) return;\n\n      const newHours = { ...hours };\n      delete newHours[day];\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const updateTime = useCallback(\n    (day: string, index: number, time: string) => {\n      if (!hours[day]) return;\n\n      const newTimes = [...hours[day]];\n      newTimes[index] = time;\n\n      const newHours = {\n        ...hours,\n        [day]: newTimes,\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const copyToAllDays = useCallback(\n    (sourceDay: string) => {\n      const sourceTimes = hours[sourceDay];\n      if (!sourceTimes) return;\n\n      const newHours = { ...hours };\n      DAYS.forEach((day) => {\n        if (day.value !== sourceDay && newHours[day.value]) {\n          newHours[day.value] = [...sourceTimes];\n        }\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  // Toggle day status (add or remove) - simplified and optimized\n  const toggleDay = useCallback(\n    (day: string) => {\n      if (hours[day]) {\n        removeDay(day);\n      } else {\n        addDay(day);\n      }\n    },\n    [hours, addDay, removeDay],\n  );\n\n  // Toggle all days function\n  const toggleAllDays = useCallback(() => {\n    // If all days are already selected, remove all\n    const allSelected = DAYS.every(day => !!hours[day.value]);\n    \n    if (allSelected) {\n      const newHours = {};\n      setHours(newHours);\n      onChange(newHours);\n    } else {\n      // Otherwise, add all missing days\n      const newHours = { ...hours };\n      DAYS.forEach(day => {\n        if (!newHours[day.value]) {\n          newHours[day.value] = [...DEFAULT_TIME_SLOT];\n        }\n      });\n      setHours(newHours);\n      onChange(newHours);\n    }\n  }, [hours, onChange]);\n\n  // Memoize sorted entries to prevent recreating the array on each render\n  const sortedEntries = useMemo(() => {\n    const dayOrder = DAYS.map((day) => day.value);\n    return Object.entries(hours).sort(\n      (a, b) => dayOrder.indexOf(a[0]) - dayOrder.indexOf(b[0]),\n    );\n  }, [hours]);\n\n  const emptyState = Object.keys(hours).length === 0;\n  const allSelected = DAYS.every(day => !!hours[day.value]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        {/* All button */}\n        <Button\n          type=\"button\"\n          variant={allSelected ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleAllDays}\n          className={`h-8 transition-colors ${!allSelected ? \"border-dashed\" : \"\"}`}\n        >\n          {!allSelected ? (\n            <>\n              <Plus className=\"mr-1 h-3 w-3\" />\n              All\n            </>\n          ) : (\n            <>\n              All\n              <X className=\"ml-1 h-3 w-3\" />\n            </>\n          )}\n        </Button>\n\n        {DAYS.map((day) => {\n          const isSelected = !!hours[day.value];\n          return (\n            <DayButton\n              key={day.value}\n              day={day}\n              isSelected={isSelected}\n              onClick={toggleDay}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"space-y-3\">\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n            day={day}\n            times={times}\n            removeDay={removeDay}\n            updateTime={updateTime}\n            copyToAllDays={copyToAllDays}\n          />\n        ))}\n\n        {emptyState && (\n          <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n            <p className=\"text-sm text-muted-foreground\">\n              No opening hours set\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Click a day button above to add hours\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Extract day button to optimize renders\nconst DayButton = React.memo(\n  ({\n    day,\n    isSelected,\n    onClick,\n  }: {\n    day: { value: string; label: string };\n    isSelected: boolean;\n    onClick: (day: string) => void;\n  }) => {\n    // Create handler inside the component to prevent unintended side effects\n    const handleClick = useCallback(\n      (e: React.MouseEvent) => {\n        // Prevent default to avoid any form submission\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(day.value);\n      },\n      [onClick, day.value],\n    );\n\n    return (\n      <Button\n        type=\"button\" // Explicitly set type to button to avoid form submission\n        variant={isSelected ? \"default\" : \"outline\"}\n        size=\"sm\"\n        onClick={handleClick}\n        className={`h-8 transition-colors ${!isSelected ? \"border-dashed\" : \"\"}`}\n      >\n        {!isSelected ? (\n          <>\n            <Plus className=\"mr-1 h-3 w-3\" />\n            {day.label.substring(0, 3)}\n          </>\n        ) : (\n          <>\n            {day.label.substring(0, 3)}\n            <X className=\"ml-1 h-3 w-3\" />\n          </>\n        )}\n      </Button>\n    );\n  },\n);\n\n// Extract the day row into a separate memoized component to reduce re-renders\nconst DayRow = React.memo(\n  ({\n    day,\n    times,\n    removeDay,\n    updateTime,\n    copyToAllDays,\n  }: {\n    day: string;\n    times: string[];\n    removeDay: (day: string) => void;\n    updateTime: (day: string, index: number, time: string) => void;\n    copyToAllDays: (day: string) => void;\n  }) => {\n    const dayLabel = DAYS.find((d) => d.value === day)?.label;\n\n    // Memoize time update handlers to prevent recreation on every render\n    const handleOpenTimeChange = useCallback(\n      (value: string) => {\n        updateTime(day, 0, value);\n      },\n      [day, updateTime],\n    );\n\n    const handleCloseTimeChange = useCallback(\n      (value: string) => {\n        updateTime(day, 1, value);\n      },\n      [day, updateTime],\n    );\n\n    const handleRemoveDay = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        removeDay(day);\n      },\n      [day, removeDay],\n    );\n\n    const handleCopyToAllDays = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        copyToAllDays(day);\n      },\n      [day, copyToAllDays],\n    );\n\n    return (\n      <div className=\"flex flex-col space-y-2 rounded-lg border bg-card p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium capitalize\">{dayLabel}</h4>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              type=\"button\" // Explicitly set type to button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleCopyToAllDays}\n              className=\"h-7 text-xs\"\n            >\n              Copy hours\n            </Button>\n            <Button\n              type=\"button\" // Explicitly set type to button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleRemoveDay}\n              className=\"h-6 w-6 text-destructive\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <SimpleTimeSelect\n            value={times[0]!}\n            onChange={handleOpenTimeChange}\n            placeholder=\"Open\"\n          />\n          <span className=\"text-sm text-muted-foreground\">to</span>\n          <SimpleTimeSelect\n            value={times[1]!}\n            onChange={handleCloseTimeChange}\n            placeholder=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\n// Simplified time select component that doesn't use complex virtualization\nconst SimpleTimeSelect = React.memo(\n  ({\n    value,\n    onChange,\n    placeholder,\n  }: {\n    value: string;\n    onChange: (value: string) => void;\n    placeholder: string;\n  }) => {\n    // Simple callback to prevent recreating functions\n    const handleChange = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n      },\n      [onChange],\n    );\n\n    return (\n      <Select value={value} onValueChange={handleChange}>\n        <SelectTrigger className=\"h-9 w-[110px]\">\n          <SelectValue placeholder={placeholder}>{value}</SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"max-h-[300px]\">\n          {COMMON_TIMES.map((time) => (\n            <SelectItem key={time} value={time}>\n              {time}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    );\n  },\n);\n\n// Add proper displayName for memo components\nDayButton.displayName = \"DayButton\";\nDayRow.displayName = \"DayRow\";\nSimpleTimeSelect.displayName = \"SimpleTimeSelect\";\n```\n\nI've added:\n\n1. An \"All\" button at the beginning of the day buttons row\n2. A `toggleAllDays` function that:\n   - Adds all days with default time slots when not all days are selected\n   - Removes all days when all days are already selected\n3. An `allSelected` state to track when all days are selected\n\nThis allows users to quickly toggle all days on or off with a single click.\ni mean when we click \"all\" it should only generate 1 card cause it is lagging when we generate all the cards\n```tsx dance-book-app/src/app/(private)/setup/new-studio-form.tsx\n\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Country, State, City } from \"country-state-city\";\nimport {\n  type ICountry,\n  type IState,\n  type ICity,\n} from \"country-state-city/lib/interface\";\nimport { api } from \"~/trpc/react\";\nimport { slugify } from \"~/lib/slugify\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"~/components/ui/form\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"~/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"~/components/ui/popover\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"~/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"~/components/ui/tabs\";\nimport { useRef, useState, useMemo, useEffect } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { FileUploader } from \"~/components/file-upload\";\nimport { OpeningHoursEditor } from \"~/components/opening-hours\";\nimport { useSupabaseUpload } from \"~/hooks/use-upload-file\";\nimport Image from \"next/image\";\n\nconst studioFormSchema = z.object({\n  name: z.string().min(3, \"Studio name must be at least 3 characters\").max(100),\n  slug: z\n    .string()\n    .min(3, \"Slug must be at least 3 characters\")\n    .max(100)\n    .regex(\n      /^[a-z0-9-]+$/,\n      \"Slug can only contain lowercase letters, numbers, and hyphens\",\n    ),\n  description: z.string().optional(),\n  address: z.string().min(5, \"Address is required\"),\n  city: z.string().min(2, \"City is required\"),\n  state: z.string().min(2, \"State/Province is required\"),\n  postalCode: z.string().min(2, \"Postal code is required\"),\n  country: z.string().length(2, \"Please select a country\"),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\ntype FormData = z.infer<typeof studioFormSchema>;\n\nexport default function NewStudioForm() {\n  const router = useRouter();\n  const slugManuallyEditedRef = useRef(false);\n  const [countryOpen, setCountryOpen] = useState(false);\n  const [stateOpen, setStateOpen] = useState(false);\n  const [cityOpen, setCityOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"basic\");\n  const [logoFile, setLogoFile] = useState<File[]>([]);\n  const { uploadFile, isUploading, progress } = useSupabaseUpload();\n\n  // States to store location data - properly typed as arrays\n  const [states, setStates] = useState<IState[]>([]);\n  const [cities, setCities] = useState<ICity[]>([]);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(studioFormSchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Philippines as default country\n      openingHours: {},\n    },\n  });\n\n  // Get all countries with proper typing\n  const countryList = useMemo(() => {\n    // Explicitly cast the return value to ICountry[]\n    const countries = Country.getAllCountries();\n    return countries.sort((a, b) => a.name.localeCompare(b.name));\n  }, []);\n\n  // Watch for country changes to update states\n  const selectedCountry = form.watch(\"country\");\n  useEffect(() => {\n    if (selectedCountry) {\n      // Explicitly cast the return value to IState[]\n      const countryStates = State.getStatesOfCountry(selectedCountry);\n      setStates(countryStates);\n      // Reset state and city when country changes\n      if (form.getValues(\"state\")) {\n        form.setValue(\"state\", \"\");\n        form.setValue(\"city\", \"\");\n        setCities([]);\n      }\n    }\n  }, [selectedCountry, form]);\n\n  // Watch for state changes to update cities\n  const selectedState = form.watch(\"state\");\n  useEffect(() => {\n    if (selectedCountry && selectedState) {\n      // Explicitly cast the return value to ICity[]\n      const stateCities = City.getCitiesOfState(selectedCountry, selectedState);\n      setCities(stateCities);\n      // Reset city when state changes\n      if (form.getValues(\"city\")) {\n        form.setValue(\"city\", \"\");\n      }\n    }\n  }, [selectedState, selectedCountry, form]);\n\n  const createStudio = api.studio.create.useMutation({\n    onSuccess: (data) => {\n      router.push(`/studio/${data.slug}`);\n    },\n  });\n\n  async function onSubmit(data: FormData) {\n    try {\n      // If there's a logo file, upload it first\n      if (logoFile.length > 0 && logoFile[0]) {\n        // Pass the slug to organize files\n        const logoUrl = await uploadFile(logoFile[0], {\n          studioSlug: data.slug,\n          assetType: \"logos\",\n        });\n        data.logo = logoUrl;\n      }\n\n      // Submit the complete data\n      createStudio.mutate(data);\n    } catch (error) {\n      console.error(\"Error creating studio:\", error);\n    }\n  }\n\n  // Optimized name change handler\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const name = e.target.value;\n    form.setValue(\"name\", name);\n\n    // Only auto-update slug if it hasn't been manually edited\n    if (!slugManuallyEditedRef.current) {\n      form.setValue(\"slug\", slugify(name), { shouldValidate: false });\n    }\n  };\n\n  // Handler for slug field to track manual edits\n  const handleSlugChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    slugManuallyEditedRef.current = true;\n    form.setValue(\"slug\", e.target.value);\n  };\n\n  // Reset handler that also resets the manual edit tracking\n  const handleReset = () => {\n    form.reset({\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      postalCode: \"\",\n      country: \"PH\", // Ensure Philippines is still selected after reset\n      openingHours: {},\n    });\n    setLogoFile([]);\n    slugManuallyEditedRef.current = false;\n  };\n\n  // Handle opening hours changes\n  const handleOpeningHoursChange = (hours: Record<string, string[]>) => {\n    form.setValue(\"openingHours\", hours);\n  };\n\n  return (\n    <Card className=\"border-0 shadow-none\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl sm:text-3xl\">\n          Create New Studio\n        </CardTitle>\n        <CardDescription>\n          Set up your dance studio profile to start managing classes,\n          instructors, and students.\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n            <Tabs\n              defaultValue=\"basic\"\n              value={activeTab}\n              onValueChange={setActiveTab}\n              className=\"w-full\"\n            >\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"address\">Address</TabsTrigger>\n                <TabsTrigger value=\"hours\">Opening Hours</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  <div className=\"grid gap-6 sm:grid-cols-2\">\n                    <div className=\"flex flex-col space-y-2\">\n                      <FormLabel className=\"text-sm font-medium\">\n                        <RequiredLabel>Studio Logo</RequiredLabel>\n                      </FormLabel>\n\n                      {form.watch(\"logo\") ? (\n                        <div className=\"relative aspect-square h-48 w-48 overflow-hidden rounded-lg border\">\n                          <Image\n                            src={form.watch(\"logo\")!} // Use ! to assert non-null\n                            alt=\"Studio logo\"\n                            fill\n                            className=\"object-cover\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-2\"\n                            onClick={() => {\n                              form.setValue(\"logo\", undefined);\n                              setLogoFile([]);\n                            }}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      ) : (\n                        <FileUploader\n                          value={logoFile}\n                          onValueChange={setLogoFile}\n                          accept={{\n                            \"image/*\": [\".jpg\", \".jpeg\", \".png\", \".webp\"],\n                          }}\n                          maxSize={1024 * 1024 * 2} // 2MB\n                          maxFileCount={1}\n                          progresses={progress}\n                        />\n                      )}\n                      <FormDescription className=\"text-xs\">\n                        Upload a square logo image (JPG, PNG). Max 2MB.\n                      </FormDescription>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              <RequiredLabel>Studio Name</RequiredLabel>\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Rhythm Dance Academy\"\n                                onChange={handleNameChange}\n                                value={field.value}\n                                onBlur={field.onBlur}\n                                name={field.name}\n                                ref={field.ref}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"slug\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>\n                              <RequiredLabel>URL Slug</RequiredLabel>\n                            </FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"rhythm-dance-academy\"\n                                onChange={handleSlugChange}\n                                value={field.value}\n                                onBlur={field.onBlur}\n                                name={field.name}\n                                ref={field.ref}\n                              />\n                            </FormControl>\n                            <FormDescription>\n                              Used in your studio URL: dancebook.com/studio/\n                              {field.value || \"your-slug\"}\n                            </FormDescription>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Tell us about your studio...\"\n                            className=\"min-h-[100px] resize-y\"\n                            {...field}\n                            value={field.value ?? \"\"}\n                          />\n                        </FormControl>\n                        <FormDescription>\n                          This will appear on your public profile.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-between\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setActiveTab(\"address\")}\n                    >\n                      Next: Address\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"address\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  {/* Country first */}\n                  <FormField\n                    control={form.control}\n                    name=\"country\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>Country</RequiredLabel>\n                        </FormLabel>\n                        <Popover\n                          open={countryOpen}\n                          onOpenChange={setCountryOpen}\n                        >\n                          <PopoverTrigger asChild>\n                            <FormControl>\n                              <Button\n                                variant=\"outline\"\n                                role=\"combobox\"\n                                aria-expanded={countryOpen}\n                                className=\"w-full justify-between\"\n                              >\n                                {field.value ? (\n                                  <>\n                                    <span className=\"mr-2 text-lg\">\n                                      {\n                                        countryList.find(\n                                          (country) =>\n                                            country.isoCode === field.value,\n                                        )?.flag\n                                      }\n                                    </span>\n                                    {\n                                      countryList.find(\n                                        (country) =>\n                                          country.isoCode === field.value,\n                                      )?.name\n                                    }\n                                  </>\n                                ) : (\n                                  \"Select country\"\n                                )}\n                                <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                              </Button>\n                            </FormControl>\n                          </PopoverTrigger>\n                          <PopoverContent className=\"w-full p-0\">\n                            <Command>\n                              <CommandInput placeholder=\"Search country...\" />\n                              <CommandList>\n                                <CommandEmpty>No country found.</CommandEmpty>\n                                <CommandGroup className=\"max-h-[300px] overflow-y-auto\">\n                                  {countryList.map((country) => (\n                                    <CommandItem\n                                      key={country.isoCode}\n                                      value={country.name}\n                                      onSelect={() => {\n                                        form.setValue(\n                                          \"country\",\n                                          country.isoCode,\n                                        );\n                                        setCountryOpen(false);\n                                      }}\n                                    >\n                                      <span className=\"mr-2 text-lg\">\n                                        {country.flag}\n                                      </span>\n                                      <span>{country.name}</span>\n                                      {country.isoCode === field.value && (\n                                        <Check className=\"ml-auto h-4 w-4\" />\n                                      )}\n                                    </CommandItem>\n                                  ))}\n                                </CommandGroup>\n                              </CommandList>\n                            </Command>\n                          </PopoverContent>\n                        </Popover>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* State/Province with dynamic data */}\n                  <FormField\n                    control={form.control}\n                    name=\"state\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>State/Province</RequiredLabel>\n                        </FormLabel>\n                        {states && states.length > 0 ? (\n                          <Popover open={stateOpen} onOpenChange={setStateOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  aria-expanded={stateOpen}\n                                  className=\"w-full justify-between\"\n                                >\n                                  {field.value\n                                    ? states.find(\n                                        (state) =>\n                                          state.isoCode === field.value,\n                                      )?.name\n                                    : \"Select state/province\"}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-full p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search state...\" />\n                                <CommandList>\n                                  <CommandEmpty>No state found.</CommandEmpty>\n                                  <CommandGroup className=\"max-h-[300px] overflow-y-auto\">\n                                    {states.map((state) => (\n                                      <CommandItem\n                                        key={state.isoCode}\n                                        value={state.name}\n                                        onSelect={() => {\n                                          form.setValue(\"state\", state.isoCode);\n                                          setStateOpen(false);\n                                        }}\n                                      >\n                                        <span>{state.name}</span>\n                                        {state.isoCode === field.value && (\n                                          <Check className=\"ml-auto h-4 w-4\" />\n                                        )}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                        ) : (\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter state/province\"\n                              {...field}\n                            />\n                          </FormControl>\n                        )}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* City with dynamic data */}\n                  <FormField\n                    control={form.control}\n                    name=\"city\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>City</RequiredLabel>\n                        </FormLabel>\n                        {cities && cities.length > 0 ? (\n                          <Popover open={cityOpen} onOpenChange={setCityOpen}>\n                            <PopoverTrigger asChild>\n                              <FormControl>\n                                <Button\n                                  variant=\"outline\"\n                                  role=\"combobox\"\n                                  aria-expanded={cityOpen}\n                                  className=\"w-full justify-between\"\n                                >\n                                  {field.value ? field.value : \"Select city\"}\n                                  <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                              </FormControl>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-full p-0\">\n                              <Command>\n                                <CommandInput placeholder=\"Search city...\" />\n                                <CommandList>\n                                  <CommandEmpty>No city found.</CommandEmpty>\n                                  <CommandGroup className=\"max-h-[300px] overflow-y-auto\">\n                                    {cities.map((city) => (\n                                      <CommandItem\n                                        key={city.name}\n                                        value={city.name}\n                                        onSelect={() => {\n                                          form.setValue(\"city\", city.name);\n                                          setCityOpen(false);\n                                        }}\n                                      >\n                                        <span>{city.name}</span>\n                                        {city.name === field.value && (\n                                          <Check className=\"ml-auto h-4 w-4\" />\n                                        )}\n                                      </CommandItem>\n                                    ))}\n                                  </CommandGroup>\n                                </CommandList>\n                              </Command>\n                            </PopoverContent>\n                          </Popover>\n                        ) : (\n                          <FormControl>\n                            <Input placeholder=\"Enter city\" {...field} />\n                          </FormControl>\n                        )}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"postalCode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>Postal Code</RequiredLabel>\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"1000\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          <RequiredLabel>Address</RequiredLabel>\n                        </FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123 Dance Street\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-between\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setActiveTab(\"basic\")}\n                    >\n                      Back\n                    </Button>\n                    <Button type=\"button\" onClick={() => setActiveTab(\"hours\")}>\n                      Next: Opening Hours\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"hours\" className=\"mt-6\">\n                <div className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"openingHours\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <OpeningHoursEditor\n                            value={field.value}\n                            onChange={handleOpeningHoursChange}\n                          />\n                        </FormControl>\n                        <FormDescription className=\"mt-2 text-center text-sm\">\n                          Set your regular business hours. You can add special\n                          hours for classes later.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-between\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setActiveTab(\"address\")}\n                    >\n                      Back\n                    </Button>\n                    <div className=\"flex gap-3\">\n                      <Button\n                        variant=\"outline\"\n                        type=\"button\"\n                        onClick={handleReset}\n                        disabled={createStudio.isPending || isUploading}\n                      >\n                        Reset All\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createStudio.isPending || isUploading}\n                        className=\"min-w-32\"\n                      >\n                        {createStudio.isPending || isUploading\n                          ? \"Creating...\"\n                          : \"Create Studio\"}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Helper to generate required field labels\nconst RequiredLabel = ({ children }: { children: React.ReactNode }) => (\n  <span className=\"flex items-center gap-1\">\n    {children}\n    <span className=\"text-destructive\">*</span>\n  </span>\n);\n```\n\nwe will be generating the data in the onsubmit if  \"all\"\nI understand now. You want a single \"All\" button that generates just one card for all days, rather than 7 individual day cards, to improve performance. Here's the updated implementation:\n\n```tsx\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport { X, Clock, Plus, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\n// Move these outside the component to prevent recreation on each render\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\n// Pre-generate default time slots - avoid creating these on every add\nconst DEFAULT_TIME_SLOT = [\"09:00\", \"17:00\"];\n\n// Pre-generate common business hours for better performance\nconst COMMON_TIMES = (() => {\n  const times = [];\n  // Standard business hours (7am-10pm)\n  for (let hour = 7; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      times.push(\n        `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`,\n      );\n    }\n  }\n  return times;\n})();\n\nexport function OpeningHoursEditor({\n  value = {},\n  onChange,\n}: OpeningHoursEditorProps) {\n  // Use lazy initialization through a function\n  const [hours, setHours] = useState<OpeningHours>(() => value);\n  const [allSelected, setAllSelected] = useState(false);\n\n  // Memoize day operations with useCallback\n  const addDay = useCallback(\n    (day: string) => {\n      if (hours[day]) return;\n\n      const newHours = {\n        ...hours,\n        [day]: [...DEFAULT_TIME_SLOT],\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const removeDay = useCallback(\n    (day: string) => {\n      if (!hours[day]) return;\n\n      const newHours = { ...hours };\n      delete newHours[day];\n\n      setHours(newHours);\n      onChange(newHours);\n      \n      // If we remove a day while in \"all\" mode, exit all mode\n      if (allSelected) {\n        setAllSelected(false);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const updateTime = useCallback(\n    (day: string, index: number, time: string) => {\n      if (!hours[day]) return;\n\n      const newTimes = [...hours[day]];\n      newTimes[index] = time;\n\n      // If we're in \"all\" mode, update all days with the same time\n      if (allSelected) {\n        const newHours = { ...hours };\n        // Update all days with the same time slot\n        DAYS.forEach(d => {\n          if (newHours[d.value]) {\n            const dayTimes = [...newHours[d.value]];\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n          }\n        });\n        \n        setHours(newHours);\n        onChange(newHours);\n      } else {\n        // Normal mode - just update the specific day\n        const newHours = {\n          ...hours,\n          [day]: newTimes,\n        };\n        \n        setHours(newHours);\n        onChange(newHours);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const copyToAllDays = useCallback(\n    (sourceDay: string) => {\n      const sourceTimes = hours[sourceDay];\n      if (!sourceTimes) return;\n\n      const newHours = { ...hours };\n      DAYS.forEach((day) => {\n        if (day.value !== sourceDay && newHours[day.value]) {\n          newHours[day.value] = [...sourceTimes];\n        }\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  // Toggle day status (add or remove) - simplified and optimized\n  const toggleDay = useCallback(\n    (day: string) => {\n      if (allSelected) {\n        // If in all mode, exit all mode first\n        setAllSelected(false);\n      }\n      \n      if (hours[day]) {\n        removeDay(day);\n      } else {\n        addDay(day);\n      }\n    },\n    [hours, addDay, removeDay, allSelected],\n  );\n\n  // Toggle all days function\n  const toggleAllDays = useCallback(() => {\n    if (allSelected) {\n      // If already in \"all\" mode, turn it off and clear all days\n      setAllSelected(false);\n      const newHours = {};\n      setHours(newHours);\n      onChange(newHours);\n    } else {\n      // Enter \"all\" mode - add all days with the same hours\n      setAllSelected(true);\n      \n      // Create a new hours object with all days\n      const newHours: OpeningHours = {};\n      DAYS.forEach(day => {\n        newHours[day.value] = [...DEFAULT_TIME_SLOT];\n      });\n      \n      setHours(newHours);\n      onChange(newHours);\n    }\n  }, [allSelected, onChange]);\n\n  // Memoize sorted entries to prevent recreating the array on each render\n  const sortedEntries = useMemo(() => {\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n    }\n    \n    const dayOrder = DAYS.map((day) => day.value);\n    return Object.entries(hours).sort(\n      (a, b) => dayOrder.indexOf(a[0]) - dayOrder.indexOf(b[0]),\n    );\n  }, [hours, allSelected]);\n\n  const emptyState = Object.keys(hours).length === 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        {/* All button */}\n        <Button\n          type=\"button\"\n          variant={allSelected ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleAllDays}\n          className={`h-8 transition-colors ${!allSelected ? \"border-dashed\" : \"\"}`}\n        >\n          {!allSelected ? (\n            <>\n              <Plus className=\"mr-1 h-3 w-3\" />\n              All\n            </>\n          ) : (\n            <>\n              All\n              <X className=\"ml-1 h-3 w-3\" />\n            </>\n          )}\n        </Button>\n\n        {DAYS.map((day) => {\n          const isSelected = !!hours[day.value];\n          return (\n            <DayButton\n              key={day.value}\n              day={day}\n              isSelected={isSelected}\n              onClick={toggleDay}\n              disabled={allSelected}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"space-y-3\">\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n            day={day}\n            times={times}\n            removeDay={day !== \"all\" ? removeDay : undefined}\n            updateTime={updateTime}\n            copyToAllDays={day !== \"all\" ? copyToAllDays : undefined}\n            isAllMode={day === \"all\"}\n          />\n        ))}\n\n        {emptyState && (\n          <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n            <p className=\"text-sm text-muted-foreground\">\n              No opening hours set\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Click a day button above to add hours\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Extract day button to optimize renders\nconst DayButton = React.memo(\n  ({\n    day,\n    isSelected,\n    onClick,\n    disabled = false,\n  }: {\n    day: { value: string; label: string };\n    isSelected: boolean;\n    onClick: (day: string) => void;\n    disabled?: boolean;\n  }) => {\n    // Create handler inside the component to prevent unintended side effects\n    const handleClick = useCallback(\n      (e: React.MouseEvent) => {\n        // Prevent default to avoid any form submission\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(day.value);\n      },\n      [onClick, day.value],\n    );\n\n    return (\n      <Button\n        type=\"button\" // Explicitly set type to button to avoid form submission\n        variant={isSelected ? \"default\" : \"outline\"}\n        size=\"sm\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={`h-8 transition-colors ${!isSelected ? \"border-dashed\" : \"\"}`}\n      >\n        {!isSelected ? (\n          <>\n            <Plus className=\"mr-1 h-3 w-3\" />\n            {day.label.substring(0, 3)}\n          </>\n        ) : (\n          <>\n            {day.label.substring(0, 3)}\n            <X className=\"ml-1 h-3 w-3\" />\n          </>\n        )}\n      </Button>\n    );\n  },\n);\n\n// Extract the day row into a separate memoized component to reduce re-renders\nconst DayRow = React.memo(\n  ({\n    day,\n    times,\n    removeDay,\n    updateTime,\n    copyToAllDays,\n    isAllMode = false,\n  }: {\n    day: string;\n    times: string[];\n    removeDay?: (day: string) => void;\n    updateTime: (day: string, index: number, time: string) => void;\n    copyToAllDays?: (day: string) => void;\n    isAllMode?: boolean;\n  }) => {\n    // For \"all\" mode, show a special label, otherwise show the day label\n    const dayLabel = isAllMode \n      ? \"All Days\" \n      : DAYS.find((d) => d.value === day)?.label;\n\n    // Memoize time update handlers to prevent recreation on every render\n    const handleOpenTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        const updateDay = isAllMode ? DAYS[0].value : day;\n        updateTime(updateDay, 0, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleCloseTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        const updateDay = isAllMode ? DAYS[0].value : day;\n        updateTime(updateDay, 1, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleRemoveDay = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (removeDay) removeDay(day);\n      },\n      [day, removeDay],\n    );\n\n    const handleCopyToAllDays = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (copyToAllDays) copyToAllDays(day);\n      },\n      [day, copyToAllDays],\n    );\n\n    return (\n      <div className=\"flex flex-col space-y-2 rounded-lg border bg-card p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium capitalize\">\n            {dayLabel}\n            {isAllMode && (\n              <span className=\"ml-2 text-xs text-muted-foreground\">\n                (All days will have the same hours)\n              </span>\n            )}\n          </h4>\n          <div className=\"flex items-center space-x-2\">\n            {!isAllMode && copyToAllDays && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCopyToAllDays}\n                className=\"h-7 text-xs\"\n              >\n                Copy hours\n              </Button>\n            )}\n            {!isAllMode && removeDay && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleRemoveDay}\n                className=\"h-6 w-6 text-destructive\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <SimpleTimeSelect\n            value={times[0]!}\n            onChange={handleOpenTimeChange}\n            placeholder=\"Open\"\n          />\n          <span className=\"text-sm text-muted-foreground\">to</span>\n          <SimpleTimeSelect\n            value={times[1]!}\n            onChange={handleCloseTimeChange}\n            placeholder=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\n// Simplified time select component that doesn't use complex virtualization\nconst SimpleTimeSelect = React.memo(\n  ({\n    value,\n    onChange,\n    placeholder,\n  }: {\n    value: string;\n    onChange: (value: string) => void;\n    placeholder: string;\n  }) => {\n    // Simple callback to prevent recreating functions\n    const handleChange = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n      },\n      [onChange],\n    );\n\n    return (\n      <Select value={value} onValueChange={handleChange}>\n        <SelectTrigger className=\"h-9 w-[110px]\">\n          <SelectValue placeholder={placeholder}>{value}</SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"max-h-[300px]\">\n          {COMMON_TIMES.map((time) => (\n            <SelectItem key={time} value={time}>\n              {time}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    );\n  },\n);\n\n// Add proper displayName for memo components\nDayButton.displayName = \"DayButton\";\nDayRow.displayName = \"DayRow\";\nSimpleTimeSelect.displayName = \"SimpleTimeSelect\";\n```\n\nKey changes:\n\n1. Added a special `allSelected` state to track when \"All\" mode is active\n2. When \"All\" is clicked:\n   - It sets all days to have the same opening hours\n   - But only displays a single card labeled \"All Days\"\n   - Behind the scenes, it still maintains individual day entries in the data\n3. Added logic to disable individual day buttons when in \"All\" mode\n4. Modified `updateTime` to handle special behavior in \"All\" mode - when a time is changed, it changes for all days\n5. Improved the rendering logic to show just one card for \"All\" mode\n6. Added explanatory text in the \"All Days\" card\n7. When in \"All\" mode, clicking the \"All\" button again removes all days\n\nThis approach gives you the performance benefit of showing just one card while maintaining the required data structure for your form submission.\nwhat does copy hours  button function?\nThe \"Copy hours\" button copies the opening hours from one day to all other days that are currently set. Here's how it works:\n\n1. When you click \"Copy hours\" on a specific day's card (like Monday), it takes the time slots from that day (e.g., 09:00-17:00)\n2. It then applies those same time slots to all other days that are already active in your schedule\n3. It doesn't add new days that weren't previously selected\n4. It only updates the time values for days that already exist in the schedule\n\nFor example:\n- If you have Monday (09:00-17:00) and Tuesday (10:00-18:00)\n- When you click \"Copy hours\" on Monday's card\n- Tuesday's hours will change to 09:00-17:00 to match Monday\n\nIt's useful when you want to quickly standardize your hours across multiple days without having to manually adjust each one. The button only appears on individual day cards (not on the \"All Days\" card) because in \"All\" mode, all days already have the same hours.\n```tsx dance-book-app/src/components/opening-hours.tsx\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport { X, Clock, Plus, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\n// Move these outside the component to prevent recreation on each render\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\n// Pre-generate default time slots - avoid creating these on every add\nconst DEFAULT_TIME_SLOT = [\"09:00\", \"17:00\"];\n\n// Pre-generate common business hours for better performance\nconst COMMON_TIMES = (() => {\n  const times = [];\n  // Standard business hours (7am-10pm)\n  for (let hour = 7; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      times.push(\n        `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`,\n      );\n    }\n  }\n  return times;\n})();\n\nexport function OpeningHoursEditor({\n  value = {},\n  onChange,\n}: OpeningHoursEditorProps) {\n  // Use lazy initialization through a function\n  const [hours, setHours] = useState<OpeningHours>(() => value);\n  const [allSelected, setAllSelected] = useState(false);\n\n  // Memoize day operations with useCallback\n  const addDay = useCallback(\n    (day: string) => {\n      if (hours[day]) return;\n\n      const newHours = {\n        ...hours,\n        [day]: [...DEFAULT_TIME_SLOT],\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const removeDay = useCallback(\n    (day: string) => {\n      if (!hours[day]) return;\n\n      const newHours = { ...hours };\n      delete newHours[day];\n\n      setHours(newHours);\n      onChange(newHours);\n\n      // If we remove a day while in \"all\" mode, exit all mode\n      if (allSelected) {\n        setAllSelected(false);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const updateTime = useCallback(\n    (day: string, index: number, time: string) => {\n      if (!hours[day]) return;\n\n      const newTimes = [...hours[day]];\n      newTimes[index] = time;\n\n      // If we're in \"all\" mode, update all days with the same time\n      if (allSelected) {\n        const newHours = { ...hours };\n        // Update all days with the same time slot\n        DAYS.forEach((d) => {\n          if (newHours[d.value]) {\n            const dayTimes = [...newHours[d.value]];\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n          }\n        });\n\n        setHours(newHours);\n        onChange(newHours);\n      } else {\n        // Normal mode - just update the specific day\n        const newHours = {\n          ...hours,\n          [day]: newTimes,\n        };\n\n        setHours(newHours);\n        onChange(newHours);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const copyToAllDays = useCallback(\n    (sourceDay: string) => {\n      const sourceTimes = hours[sourceDay];\n      if (!sourceTimes) return;\n\n      const newHours = { ...hours };\n      DAYS.forEach((day) => {\n        if (day.value !== sourceDay && newHours[day.value]) {\n          newHours[day.value] = [...sourceTimes];\n        }\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  // Toggle day status (add or remove) - simplified and optimized\n  const toggleDay = useCallback(\n    (day: string) => {\n      if (allSelected) {\n        // If in all mode, exit all mode first\n        setAllSelected(false);\n      }\n\n      if (hours[day]) {\n        removeDay(day);\n      } else {\n        addDay(day);\n      }\n    },\n    [hours, addDay, removeDay, allSelected],\n  );\n\n  // Toggle all days function\n  const toggleAllDays = useCallback(() => {\n    if (allSelected) {\n      // If already in \"all\" mode, turn it off and clear all days\n      setAllSelected(false);\n      const newHours = {};\n      setHours(newHours);\n      onChange(newHours);\n    } else {\n      // Enter \"all\" mode - add all days with the same hours\n      setAllSelected(true);\n\n      // Create a new hours object with all days\n      const newHours: OpeningHours = {};\n      DAYS.forEach((day) => {\n        newHours[day.value] = [...DEFAULT_TIME_SLOT];\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    }\n  }, [allSelected, onChange]);\n\n  // Memoize sorted entries to prevent recreating the array on each render\n  const sortedEntries = useMemo(() => {\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n    }\n\n    const dayOrder = DAYS.map((day) => day.value);\n    return Object.entries(hours).sort(\n      (a, b) => dayOrder.indexOf(a[0]) - dayOrder.indexOf(b[0]),\n    );\n  }, [hours, allSelected]);\n\n  const emptyState = Object.keys(hours).length === 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        {/* All button */}\n        <Button\n          type=\"button\"\n          variant={allSelected ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleAllDays}\n          className={`h-8 transition-colors ${!allSelected ? \"border-dashed\" : \"\"}`}\n        >\n          {!allSelected ? (\n            <>\n              <Plus className=\"mr-1 h-3 w-3\" />\n              All\n            </>\n          ) : (\n            <>\n              All\n              <X className=\"ml-1 h-3 w-3\" />\n            </>\n          )}\n        </Button>\n\n        {DAYS.map((day) => {\n          const isSelected = !!hours[day.value];\n          return (\n            <DayButton\n              key={day.value}\n              day={day}\n              isSelected={isSelected}\n              onClick={toggleDay}\n              disabled={allSelected}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"space-y-3\">\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n            day={day}\n            times={times}\n            removeDay={day !== \"all\" ? removeDay : undefined}\n            updateTime={updateTime}\n            copyToAllDays={day !== \"all\" ? copyToAllDays : undefined}\n            isAllMode={day === \"all\"}\n          />\n        ))}\n\n        {emptyState && (\n          <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n            <p className=\"text-sm text-muted-foreground\">\n              No opening hours set\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Click a day button above to add hours\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Extract day button to optimize renders\nconst DayButton = React.memo(\n  ({\n    day,\n    isSelected,\n    onClick,\n    disabled = false,\n  }: {\n    day: { value: string; label: string };\n    isSelected: boolean;\n    onClick: (day: string) => void;\n    disabled?: boolean;\n  }) => {\n    // Create handler inside the component to prevent unintended side effects\n    const handleClick = useCallback(\n      (e: React.MouseEvent) => {\n        // Prevent default to avoid any form submission\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(day.value);\n      },\n      [onClick, day.value],\n    );\n\n    return (\n      <Button\n        type=\"button\" // Explicitly set type to button to avoid form submission\n        variant={isSelected ? \"default\" : \"outline\"}\n        size=\"sm\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={`h-8 transition-colors ${!isSelected ? \"border-dashed\" : \"\"}`}\n      >\n        {!isSelected ? (\n          <>\n            <Plus className=\"mr-1 h-3 w-3\" />\n            {day.label.substring(0, 3)}\n          </>\n        ) : (\n          <>\n            {day.label.substring(0, 3)}\n            <X className=\"ml-1 h-3 w-3\" />\n          </>\n        )}\n      </Button>\n    );\n  },\n);\n\n// Extract the day row into a separate memoized component to reduce re-renders\nconst DayRow = React.memo(\n  ({\n    day,\n    times,\n    removeDay,\n    updateTime,\n    isAllMode = false,\n  }: {\n    day: string;\n    times: string[];\n    removeDay?: (day: string) => void;\n    updateTime: (day: string, index: number, time: string) => void;\n    isAllMode?: boolean;\n  }) => {\n    // For \"all\" mode, show a special label, otherwise show the day label\n    const dayLabel = isAllMode\n      ? \"All Days\"\n      : DAYS.find((d) => d.value === day)?.label;\n\n    // Memoize time update handlers to prevent recreation on every render\n    const handleOpenTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        const updateDay = isAllMode ? DAYS?.[0]?.value : day;\n        updateTime(updateDay!, 0, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleCloseTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        const updateDay = isAllMode ? DAYS?.[0]?.value : day;\n        updateTime(updateDay!, 1, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleRemoveDay = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (removeDay) removeDay(day);\n      },\n      [day, removeDay],\n    );\n\n    return (\n      <div className=\"flex flex-col space-y-2 rounded-lg border bg-card p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium capitalize\">\n            {dayLabel}\n            {isAllMode && (\n              <span className=\"ml-2 text-xs text-muted-foreground\">\n                (All days will have the same hours)\n              </span>\n            )}\n          </h4>\n          <div className=\"flex items-center space-x-2\">\n            {!isAllMode && removeDay && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleRemoveDay}\n                className=\"h-6 w-6 text-destructive\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <SimpleTimeSelect\n            value={times[0]!}\n            onChange={handleOpenTimeChange}\n            placeholder=\"Open\"\n          />\n          <span className=\"text-sm text-muted-foreground\">to</span>\n          <SimpleTimeSelect\n            value={times[1]!}\n            onChange={handleCloseTimeChange}\n            placeholder=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\n// Simplified time select component that doesn't use complex virtualization\nconst SimpleTimeSelect = React.memo(\n  ({\n    value,\n    onChange,\n    placeholder,\n  }: {\n    value: string;\n    onChange: (value: string) => void;\n    placeholder: string;\n  }) => {\n    // Simple callback to prevent recreating functions\n    const handleChange = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n      },\n      [onChange],\n    );\n\n    return (\n      <Select value={value} onValueChange={handleChange}>\n        <SelectTrigger className=\"h-9 w-[110px]\">\n          <SelectValue placeholder={placeholder}>{value}</SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"max-h-[300px]\">\n          {COMMON_TIMES.map((time) => (\n            <SelectItem key={time} value={time}>\n              {time}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    );\n  },\n);\n\n// Add proper displayName for memo components\nDayButton.displayName = \"DayButton\";\nDayRow.displayName = \"DayRow\";\nSimpleTimeSelect.displayName = \"SimpleTimeSelect\";\n```\n\ndiagnostics\ndance-book-app/src/components/opening-hours.tsx\n```tsx\n        DAYS.forEach((d) => {\n          if (newHours[d.value]) {\n            const dayTimes = [...newHours[d.value]];\n// error: Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n```\n```tsx\n            const dayTimes = [...newHours[d.value]];\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n// error: Unsafe assignment of type `any[]` to a variable of type `TimeSlot`.\n          }\n        });\n```\n```tsx\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n// error: Object is possibly 'undefined'.\n    }\n\n```\n```tsx\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n// error: Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.\n    }\n\n```\n```tsx\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'Key | null | undefined'.\n//          Type 'TimeSlot' is not assignable to type 'Key | null | undefined'.\n            day={day}\n            times={times}\n```\n```tsx\n          <DayRow\n            key={day}\n            day={day}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'string'.\n//          Type 'undefined' is not assignable to type 'string'.\n            times={times}\n            removeDay={day !== \"all\" ? removeDay : undefined}\n```\n```tsx\n            key={day}\n            day={day}\n            times={times}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'string[]'.\n//          Type 'undefined' is not assignable to type 'string[]'.\n            removeDay={day !== \"all\" ? removeDay : undefined}\n            updateTime={updateTime}\n```\ndance-book-app/src/components/opening-hours.tsx\n```tsx\n        DAYS.forEach((d) => {\n          if (newHours[d.value]) {\n            const dayTimes = [...newHours[d.value]];\n// error: Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n```\n```tsx\n            const dayTimes = [...newHours[d.value]];\n            dayTimes[index] = time;\n            newHours[d.value] = dayTimes;\n// error: Unsafe assignment of type `any[]` to a variable of type `TimeSlot`.\n          }\n        });\n```\n```tsx\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n// error: Object is possibly 'undefined'.\n    }\n\n```\n```tsx\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      return [[\"all\", hours[DAYS[0].value] || DEFAULT_TIME_SLOT]];\n// error: Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.\n    }\n\n```\n```tsx\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'Key | null | undefined'.\n//          Type 'TimeSlot' is not assignable to type 'Key | null | undefined'.\n            day={day}\n            times={times}\n```\n```tsx\n          <DayRow\n            key={day}\n            day={day}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'string'.\n//          Type 'undefined' is not assignable to type 'string'.\n            times={times}\n            removeDay={day !== \"all\" ? removeDay : undefined}\n```\n```tsx\n            key={day}\n            day={day}\n            times={times}\n// error: Type 'string | TimeSlot | undefined' is not assignable to type 'string[]'.\n//          Type 'undefined' is not assignable to type 'string[]'.\n            removeDay={day !== \"all\" ? removeDay : undefined}\n            updateTime={updateTime}\n```\n\ncan you fix  the errors\nHere's the fixed version with all TypeScript errors resolved:\n\n```tsx\nimport React, { useMemo, useState, useCallback } from \"react\";\nimport { X, Clock, Plus } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"~/components/ui/select\";\n\ntype TimeSlot = string[];\ntype OpeningHours = Record<string, TimeSlot>;\n\ninterface OpeningHoursEditorProps {\n  value?: OpeningHours;\n  onChange: (hours: OpeningHours) => void;\n}\n\n// Move these outside the component to prevent recreation on each render\nconst DAYS = [\n  { value: \"monday\", label: \"Monday\" },\n  { value: \"tuesday\", label: \"Tuesday\" },\n  { value: \"wednesday\", label: \"Wednesday\" },\n  { value: \"thursday\", label: \"Thursday\" },\n  { value: \"friday\", label: \"Friday\" },\n  { value: \"saturday\", label: \"Saturday\" },\n  { value: \"sunday\", label: \"Sunday\" },\n];\n\n// Pre-generate default time slots - avoid creating these on every add\nconst DEFAULT_TIME_SLOT = [\"09:00\", \"17:00\"];\n\n// Pre-generate common business hours for better performance\nconst COMMON_TIMES = (() => {\n  const times = [];\n  // Standard business hours (7am-10pm)\n  for (let hour = 7; hour <= 22; hour++) {\n    for (let minute = 0; minute < 60; minute += 15) {\n      times.push(\n        `${hour.toString().padStart(2, \"0\")}:${minute.toString().padStart(2, \"0\")}`,\n      );\n    }\n  }\n  return times;\n})();\n\nexport function OpeningHoursEditor({\n  value = {},\n  onChange,\n}: OpeningHoursEditorProps) {\n  // Use lazy initialization through a function\n  const [hours, setHours] = useState<OpeningHours>(() => value);\n  const [allSelected, setAllSelected] = useState(false);\n\n  // Memoize day operations with useCallback\n  const addDay = useCallback(\n    (day: string) => {\n      if (hours[day]) return;\n\n      const newHours = {\n        ...hours,\n        [day]: [...DEFAULT_TIME_SLOT],\n      };\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  const removeDay = useCallback(\n    (day: string) => {\n      if (!hours[day]) return;\n\n      const newHours = { ...hours };\n      delete newHours[day];\n\n      setHours(newHours);\n      onChange(newHours);\n\n      // If we remove a day while in \"all\" mode, exit all mode\n      if (allSelected) {\n        setAllSelected(false);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const updateTime = useCallback(\n    (day: string, index: number, time: string) => {\n      if (!hours[day]) return;\n\n      const newTimes = [...hours[day]];\n      newTimes[index] = time;\n\n      // If we're in \"all\" mode, update all days with the same time\n      if (allSelected) {\n        const newHours = { ...hours };\n        // Update all days with the same time slot\n        DAYS.forEach((d) => {\n          const dayValue = d.value;\n          if (newHours[dayValue]) {\n            // Type assertion to ensure TS knows this is a TimeSlot\n            const dayTimes = [...(newHours[dayValue] as TimeSlot)];\n            dayTimes[index] = time;\n            newHours[dayValue] = dayTimes;\n          }\n        });\n\n        setHours(newHours);\n        onChange(newHours);\n      } else {\n        // Normal mode - just update the specific day\n        const newHours = {\n          ...hours,\n          [day]: newTimes,\n        };\n\n        setHours(newHours);\n        onChange(newHours);\n      }\n    },\n    [hours, onChange, allSelected],\n  );\n\n  const copyToAllDays = useCallback(\n    (sourceDay: string) => {\n      const sourceTimes = hours[sourceDay];\n      if (!sourceTimes) return;\n\n      const newHours = { ...hours };\n      DAYS.forEach((day) => {\n        if (day.value !== sourceDay && newHours[day.value]) {\n          newHours[day.value] = [...sourceTimes];\n        }\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    },\n    [hours, onChange],\n  );\n\n  // Toggle day status (add or remove) - simplified and optimized\n  const toggleDay = useCallback(\n    (day: string) => {\n      if (allSelected) {\n        // If in all mode, exit all mode first\n        setAllSelected(false);\n      }\n\n      if (hours[day]) {\n        removeDay(day);\n      } else {\n        addDay(day);\n      }\n    },\n    [hours, addDay, removeDay, allSelected],\n  );\n\n  // Toggle all days function\n  const toggleAllDays = useCallback(() => {\n    if (allSelected) {\n      // If already in \"all\" mode, turn it off and clear all days\n      setAllSelected(false);\n      const newHours = {};\n      setHours(newHours);\n      onChange(newHours);\n    } else {\n      // Enter \"all\" mode - add all days with the same hours\n      setAllSelected(true);\n\n      // Create a new hours object with all days\n      const newHours: OpeningHours = {};\n      DAYS.forEach((day) => {\n        newHours[day.value] = [...DEFAULT_TIME_SLOT];\n      });\n\n      setHours(newHours);\n      onChange(newHours);\n    }\n  }, [allSelected, onChange]);\n\n  // Memoize sorted entries to prevent recreating the array on each render\n  const sortedEntries = useMemo(() => {\n    if (allSelected) {\n      // In \"all\" mode, we'll just display one representative entry\n      // First day might be undefined, so use nullish coalescing\n      const firstDayValue = DAYS[0]?.value ?? '';\n      const firstDayHours = hours[firstDayValue] ?? DEFAULT_TIME_SLOT;\n      return [[\"all\", firstDayHours]];\n    }\n\n    const dayOrder = DAYS.map((day) => day.value);\n    return Object.entries(hours).sort(\n      (a, b) => dayOrder.indexOf(a[0]) - dayOrder.indexOf(b[0]),\n    );\n  }, [hours, allSelected]);\n\n  const emptyState = Object.keys(hours).length === 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center gap-2\">\n        {/* All button */}\n        <Button\n          type=\"button\"\n          variant={allSelected ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={toggleAllDays}\n          className={`h-8 transition-colors ${!allSelected ? \"border-dashed\" : \"\"}`}\n        >\n          {!allSelected ? (\n            <>\n              <Plus className=\"mr-1 h-3 w-3\" />\n              All\n            </>\n          ) : (\n            <>\n              All\n              <X className=\"ml-1 h-3 w-3\" />\n            </>\n          )}\n        </Button>\n\n        {DAYS.map((day) => {\n          const isSelected = !!hours[day.value];\n          return (\n            <DayButton\n              key={day.value}\n              day={day}\n              isSelected={isSelected}\n              onClick={toggleDay}\n              disabled={allSelected}\n            />\n          );\n        })}\n      </div>\n\n      <div className=\"space-y-3\">\n        {sortedEntries.map(([day, times]) => (\n          <DayRow\n            key={day.toString()} // Explicitly convert to string for React key\n            day={day.toString()} // Explicitly convert to string\n            times={times as string[]} // Type assertion to ensure TS knows this is a string[]\n            removeDay={day !== \"all\" ? removeDay : undefined}\n            updateTime={updateTime}\n            isAllMode={day === \"all\"}\n          />\n        ))}\n\n        {emptyState && (\n          <div className=\"flex h-20 flex-col items-center justify-center rounded-lg border border-dashed\">\n            <p className=\"text-sm text-muted-foreground\">\n              No opening hours set\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              Click a day button above to add hours\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Extract day button to optimize renders\nconst DayButton = React.memo(\n  ({\n    day,\n    isSelected,\n    onClick,\n    disabled = false,\n  }: {\n    day: { value: string; label: string };\n    isSelected: boolean;\n    onClick: (day: string) => void;\n    disabled?: boolean;\n  }) => {\n    // Create handler inside the component to prevent unintended side effects\n    const handleClick = useCallback(\n      (e: React.MouseEvent) => {\n        // Prevent default to avoid any form submission\n        e.preventDefault();\n        e.stopPropagation();\n        onClick(day.value);\n      },\n      [onClick, day.value],\n    );\n\n    return (\n      <Button\n        type=\"button\" // Explicitly set type to button to avoid form submission\n        variant={isSelected ? \"default\" : \"outline\"}\n        size=\"sm\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={`h-8 transition-colors ${!isSelected ? \"border-dashed\" : \"\"}`}\n      >\n        {!isSelected ? (\n          <>\n            <Plus className=\"mr-1 h-3 w-3\" />\n            {day.label.substring(0, 3)}\n          </>\n        ) : (\n          <>\n            {day.label.substring(0, 3)}\n            <X className=\"ml-1 h-3 w-3\" />\n          </>\n        )}\n      </Button>\n    );\n  },\n);\n\n// Extract the day row into a separate memoized component to reduce re-renders\nconst DayRow = React.memo(\n  ({\n    day,\n    times,\n    removeDay,\n    updateTime,\n    isAllMode = false,\n  }: {\n    day: string;\n    times: string[];\n    removeDay?: (day: string) => void;\n    updateTime: (day: string, index: number, time: string) => void;\n    isAllMode?: boolean;\n  }) => {\n    // For \"all\" mode, show a special label, otherwise show the day label\n    const dayLabel = isAllMode\n      ? \"All Days\"\n      : DAYS.find((d) => d.value === day)?.label ?? day;\n\n    // Memoize time update handlers to prevent recreation on every render\n    const handleOpenTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        // Make sure to handle potential undefined values\n        const updateDay = isAllMode ? (DAYS[0]?.value ?? day) : day;\n        updateTime(updateDay, 0, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleCloseTimeChange = useCallback(\n      (value: string) => {\n        // For \"all\" mode, use the first day's value for updates\n        // Make sure to handle potential undefined values\n        const updateDay = isAllMode ? (DAYS[0]?.value ?? day) : day;\n        updateTime(updateDay, 1, value);\n      },\n      [day, updateTime, isAllMode],\n    );\n\n    const handleRemoveDay = useCallback(\n      (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (removeDay) removeDay(day);\n      },\n      [day, removeDay],\n    );\n\n    return (\n      <div className=\"flex flex-col space-y-2 rounded-lg border bg-card p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h4 className=\"text-sm font-medium capitalize\">\n            {dayLabel}\n            {isAllMode && (\n              <span className=\"ml-2 text-xs text-muted-foreground\">\n                (All days will have the same hours)\n              </span>\n            )}\n          </h4>\n          <div className=\"flex items-center space-x-2\">\n            {!isAllMode && removeDay && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleRemoveDay}\n                className=\"h-6 w-6 text-destructive\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          <SimpleTimeSelect\n            value={times[0] ?? \"\"}\n            onChange={handleOpenTimeChange}\n            placeholder=\"Open\"\n          />\n          <span className=\"text-sm text-muted-foreground\">to</span>\n          <SimpleTimeSelect\n            value={times[1] ?? \"\"}\n            onChange={handleCloseTimeChange}\n            placeholder=\"Close\"\n          />\n        </div>\n      </div>\n    );\n  },\n);\n\n// Simplified time select component that doesn't use complex virtualization\nconst SimpleTimeSelect = React.memo(\n  ({\n    value,\n    onChange,\n    placeholder,\n  }: {\n    value: string;\n    onChange: (value: string) => void;\n    placeholder: string;\n  }) => {\n    // Simple callback to prevent recreating functions\n    const handleChange = useCallback(\n      (newValue: string) => {\n        onChange(newValue);\n      },\n      [onChange],\n    );\n\n    return (\n      <Select value={value} onValueChange={handleChange}>\n        <SelectTrigger className=\"h-9 w-[110px]\">\n          <SelectValue placeholder={placeholder}>{value}</SelectValue>\n        </SelectTrigger>\n        <SelectContent className=\"max-h-[300px]\">\n          {COMMON_TIMES.map((time) => (\n            <SelectItem key={time} value={time}>\n              {time}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    );\n  },\n);\n\n// Add proper displayName for memo components\nDayButton.displayName = \"DayButton\";\nDayRow.displayName = \"DayRow\";\nSimpleTimeSelect.displayName = \"SimpleTimeSelect\";\n```\n\nKey fixes:\n\n1. Fixed type issues in `updateTime` function by adding proper type assertions\n   ```tsx\n   const dayTimes = [...(newHours[dayValue] as TimeSlot)];\n   ```\n\n2. Fixed the sortedEntries handling with proper nullish checks:\n   ```tsx\n   const firstDayValue = DAYS[0]?.value ?? '';\n   const firstDayHours = hours[firstDayValue] ?? DEFAULT_TIME_SLOT;\n   return [[\"all\", firstDayHours]];\n   ```\n\n3. Fixed the type issues in the map function with explicit type conversions:\n   ```tsx\n   key={day.toString()}\n   day={day.toString()}\n   times={times as string[]}\n   ```\n\n4. Added nullish coalescing to handle potential undefined values:\n   ```tsx\n   const dayLabel = isAllMode\n     ? \"All Days\"\n     : DAYS.find((d) => d.value === day)?.label ?? day;\n   ```\n\n5. Fixed potential null/undefined issues in handlers:\n   ```tsx\n   const updateDay = isAllMode ? (DAYS[0]?.value ?? day) : day;\n   ```\n\n6. Added null checks in the SimpleTimeSelect:\n   ```tsx\n   value={times[0] ?? \"\"}\n   ```\n\nThese changes address all the TypeScript errors while maintaining the same functionality.\n\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1225}}},{"id":{"replica_id":0,"value":92},"start":10998,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1226}}},{"id":{"replica_id":0,"value":93},"start":22191,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1227}}},{"id":{"replica_id":0,"value":342},"start":22300,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1228}}},{"id":{"replica_id":0,"value":461},"start":49983,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1229}}},{"id":{"replica_id":0,"value":462},"start":63835,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1230}}},{"id":{"replica_id":0,"value":741},"start":63874,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1231}}},{"id":{"replica_id":0,"value":742},"start":64815,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1232}}},{"id":{"replica_id":0,"value":948},"start":81256,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":1233}}},{"id":{"replica_id":0,"value":949},"start":95099,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":1234}}}],"summary":"# Adding \"All\" Button for Day Selection","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":10879},"icon":"File","label":"dance-book-app/src/components/opening-hours.tsx","metadata":{"path":"dance-book-app/src/components/opening-hours.tsx"}},{"range":{"start":22300,"end":49925},"icon":"File","label":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx","metadata":{"path":"dance-book-app/src/app/(private)/setup/new-studio-form.tsx"}},{"range":{"start":64815,"end":77058},"icon":"File","label":"dance-book-app/src/components/opening-hours.tsx","metadata":{"path":"dance-book-app/src/components/opening-hours.tsx"}},{"range":{"start":77059,"end":81231},"icon":"Warning","label":"Diagnostics: 7 errors","metadata":null},{"range":{"start":77071,"end":79150},"icon":"File","label":"dance-book-app/src/components/opening-hours.tsx","metadata":null},{"range":{"start":77119,"end":77430},"icon":"XCircle","label":"Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.","metadata":null},{"range":{"start":77431,"end":77674},"icon":"XCircle","label":"Unsafe assignment of type `any[]` to a variable of type `TimeSlot`.","metadata":null},{"range":{"start":77675,"end":77892},"icon":"XCircle","label":"Object is possibly 'undefined'.","metadata":null},{"range":{"start":77893,"end":78185},"icon":"XCircle","label":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","metadata":null},{"range":{"start":78186,"end":78510},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'Key | null | undefined'.\n  Type 'TimeSlot' is not assignable to type 'Key | null | undefined'.","metadata":null},{"range":{"start":78511,"end":78819},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.","metadata":null},{"range":{"start":78820,"end":79150},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'string[]'.\n  Type 'undefined' is not assignable to type 'string[]'.","metadata":null},{"range":{"start":79151,"end":81230},"icon":"File","label":"dance-book-app/src/components/opening-hours.tsx","metadata":null},{"range":{"start":79199,"end":79510},"icon":"XCircle","label":"Type 'TimeSlot | undefined' must have a '[Symbol.iterator]()' method that returns an iterator.","metadata":null},{"range":{"start":79511,"end":79754},"icon":"XCircle","label":"Unsafe assignment of type `any[]` to a variable of type `TimeSlot`.","metadata":null},{"range":{"start":79755,"end":79972},"icon":"XCircle","label":"Object is possibly 'undefined'.","metadata":null},{"range":{"start":79973,"end":80265},"icon":"XCircle","label":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","metadata":null},{"range":{"start":80266,"end":80590},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'Key | null | undefined'.\n  Type 'TimeSlot' is not assignable to type 'Key | null | undefined'.","metadata":null},{"range":{"start":80591,"end":80899},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.","metadata":null},{"range":{"start":80900,"end":81230},"icon":"XCircle","label":"Type 'string | TimeSlot | undefined' is not assignable to type 'string[]'.\n  Type 'undefined' is not assignable to type 'string[]'.","metadata":null}]}