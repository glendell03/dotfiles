{"id":"348759e0-e2bd-4a07-85b7-b6e19f3cd116","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n```ts dance-book-app/src/app/auth/callback/route.ts\nimport { NextResponse } from \"next/server\";\n// The client you created from the Server-Side Auth instructions\nimport { createClient } from \"~/lib/supabase/server\";\nimport { db } from \"~/server/db\";\n\nexport async function GET(request: Request) {\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get(\"code\");\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get(\"next\") ?? \"/\";\n\n  if (code) {\n    const supabase = await createClient();\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n    if (!error) {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      const authId = user?.id;\n\n      if (authId) {\n        const profile = await db.profile.findUnique({\n          where: {\n            authId,\n          },\n        });\n\n        if (!profile) {\n          await db.profile.create({\n            data: {\n              authId,\n            },\n          });\n        }\n      }\n\n      const forwardedHost = request.headers.get(\"x-forwarded-host\"); // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === \"development\";\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`);\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`);\n      } else {\n        return NextResponse.redirect(`${origin}${next}`);\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`);\n}\n```\n\nif success redirect to /schedules\nHere's the fix with the redirect changed to /schedules on successful authentication:\n\n```ts\nimport { NextResponse } from \"next/server\";\n// The client you created from the Server-Side Auth instructions\nimport { createClient } from \"~/lib/supabase/server\";\nimport { db } from \"~/server/db\";\n\nexport async function GET(request: Request) {\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get(\"code\");\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get(\"next\") ?? \"/schedules\";\n\n  if (code) {\n    const supabase = await createClient();\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n    if (!error) {\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      const authId = user?.id;\n\n      if (authId) {\n        const profile = await db.profile.findUnique({\n          where: {\n            authId,\n          },\n        });\n\n        if (!profile) {\n          await db.profile.create({\n            data: {\n              authId,\n            },\n          });\n        }\n      }\n\n      const forwardedHost = request.headers.get(\"x-forwarded-host\"); // original origin before load balancer\n      const isLocalEnv = process.env.NODE_ENV === \"development\";\n      if (isLocalEnv) {\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\n        return NextResponse.redirect(`${origin}${next}`);\n      } else if (forwardedHost) {\n        return NextResponse.redirect(`https://${forwardedHost}${next}`);\n      } else {\n        return NextResponse.redirect(`${origin}${next}`);\n      }\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`);\n}\n```\n\nI changed the default value for the `next` variable from \"/\" to \"/schedules\" so successful authentication will redirect to /schedules instead of the homepage.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":45}}},{"id":{"replica_id":0,"value":30},"start":3051,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":46}}},{"id":{"replica_id":0,"value":31},"start":4999,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":47}}}],"summary":"Supabase Auth Callback Redirect Fix","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":3016},"icon":"File","label":"dance-book-app/src/app/auth/callback/route.ts","metadata":{"path":"dance-book-app/src/app/auth/callback/route.ts"}}]}