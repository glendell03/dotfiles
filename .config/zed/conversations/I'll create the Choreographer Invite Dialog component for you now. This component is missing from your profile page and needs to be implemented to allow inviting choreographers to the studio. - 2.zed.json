{"id":"d2c2eb8d-3892-4863-9fbd-476bd3f04dce","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n```tsx dance-book-app/src/app/(private)/profile/page.tsx\nimport React, { Suspense } from \"react\";\nimport {\n  BarChart3,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  Users,\n  Plus,\n  Building2,\n  ChevronRight,\n} from \"lucide-react\";\nimport { NeoCard } from \"~/components/ui/neo-card\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoBadge } from \"~/components/ui/neo-badge\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { api, HydrateClient } from \"~/trpc/server\";\nimport { ChoreographerInviteDialog } from \"./choreographers-form\";\n\n// Loading skeleton component\nfunction ProfileSkeleton() {\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      {/* Studio header skeleton */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"neo-border h-14 w-14 animate-pulse rounded-xl bg-neutral-200 dark:bg-neutral-800 md:h-16 md:w-16\"></div>\n          <div>\n            <div className=\"h-7 w-48 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800\"></div>\n            <div className=\"mt-2 h-5 w-36 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800\"></div>\n          </div>\n        </div>\n        <div className=\"h-10 w-40 animate-pulse rounded bg-neutral-200 dark:bg-neutral-800 sm:w-48\"></div>\n      </div>\n\n      {/* Stats Section skeleton */}\n      <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {[1, 2, 3, 4].map((i) => (\n          <div\n            key={i}\n            className=\"neo-border h-24 animate-pulse rounded-xl bg-neutral-200 p-3 dark:bg-neutral-800 md:p-5\"\n          ></div>\n        ))}\n      </div>\n\n      {/* Main content area skeleton */}\n      <div className=\"grid gap-6 md:grid-cols-7\">\n        <div className=\"neo-border h-80 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:col-span-4 md:p-5\"></div>\n        <div className=\"neo-border h-80 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:col-span-3 md:p-5\"></div>\n      </div>\n\n      {/* Choreographer Management Section skeleton */}\n      <div className=\"neo-border h-60 animate-pulse rounded-xl bg-neutral-200 p-4 dark:bg-neutral-800 md:p-5\"></div>\n    </div>\n  );\n}\n\n// Define types for better type safety\ninterface Choreographer {\n  id: string;\n  name: string;\n  avatar: string;\n  specialization: string;\n}\n\ninterface ClassItem {\n  id: string;\n  name: string;\n  time: string;\n  instructor: string;\n  attendees: number;\n}\n\n// Main profile content component\nasync function ProfileContent() {\n  // Get the current user profile with studio memberships\n  const profile = await api.profile.getCurrent();\n  const studioId = profile.studioMembers[0]?.studio?.id ?? \"\";\n  const choreographers = studioId\n    ? await api.studio.getMembers({\n        role: \"CHOREOGRAPHER\",\n        studioId,\n      })\n    : [];\n\n  console.dir({ choreographers }, { depth: null });\n\n  // Get the studio slug or use a default\n  const studioSlug = profile.studioMembers[0]?.studio?.slug ?? \"default-studio\";\n\n  // Create a complete studioData object with static data to prevent type errors\n  const studioData = {\n    id: profile.studioMembers[0]?.studio?.id ?? \"studio-1\",\n    name: profile.studioMembers[0]?.studio?.name ?? \"Your Dance Studio\",\n    slug: studioSlug,\n    logo: profile.studioMembers[0]?.studio?.logo,\n    // Add mock data for the UI to render correctly\n    revenue: {\n      total: \"$0.00\",\n      percentageChange: 0,\n    },\n    bookings: {\n      total: \"0\",\n      percentageChange: 0,\n    },\n    classes: {\n      total: \"0\",\n      active: \"0\",\n    },\n    choreographers: {\n      // TODO: This should be not based on the lenght of the array\n      total: choreographers.length,\n      featured: [\n        {\n          id: \"choreo-1\",\n          name: \"Jane Smith\",\n          avatar: \"/placeholder-avatar.jpg\",\n          specialization: \"Hip Hop\",\n        },\n        {\n          id: \"choreo-2\",\n          name: \"John Doe\",\n          avatar: \"/placeholder-avatar.jpg\",\n          specialization: \"Contemporary\",\n        },\n        {\n          id: \"choreo-3\",\n          name: \"Alice Wonder\",\n          avatar: \"/placeholder-avatar.jpg\",\n          specialization: \"Ballet\",\n        },\n      ] as Choreographer[],\n    },\n    upcomingClasses: [\n      {\n        id: \"class-1\",\n        name: \"Hip Hop Beginners\",\n        time: \"Today, 5:00 PM\",\n        instructor: \"Jane Smith\",\n        attendees: 12,\n      },\n      {\n        id: \"class-2\",\n        name: \"Contemporary Advanced\",\n        time: \"Tomorrow, 6:30 PM\",\n        instructor: \"John Doe\",\n        attendees: 8,\n      },\n    ] as ClassItem[],\n  };\n\n  return (\n    <div className=\"space-y-6 p-4 md:p-6\">\n      {/* Studio header */}\n      <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"neo-border relative h-14 w-14 overflow-hidden rounded-xl md:h-16 md:w-16\">\n            {studioData.logo ? (\n              <Image\n                src={studioData.logo}\n                alt={studioData.name}\n                fill\n                sizes=\"(max-width: 768px) 56px, 64px\"\n                className=\"object-cover\"\n              />\n            ) : (\n              <div className=\"flex h-full w-full items-center justify-center bg-muted\">\n                <Building2 className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n            )}\n            {/* Fallback Building icon that will show when image errors */}\n            <div className=\"hidden h-full w-full items-center justify-center\">\n              <Building2 className=\"h-8 w-8 text-muted-foreground\" />\n            </div>\n          </div>\n          <div>\n            <h1 className=\"neo-subtitle text-xl md:text-2xl\">\n              {studioData.name}\n            </h1>\n            <p className=\"text-sm text-muted-foreground md:text-base\">\n              Studio Admin Dashboard\n            </p>\n          </div>\n        </div>\n        <Link href={`/profile/${studioData.slug}/schedules/add`}>\n          <NeoButton className=\"w-full sm:w-auto\">\n            <Calendar className=\"mr-2 h-4 w-4\" />\n            <span className=\"sm:inline\">Add Class Schedule</span>\n          </NeoButton>\n        </Link>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-4\">\n        {/* Revenue Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Revenue\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.revenue.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-yellow-200 text-black shadow-neo-sm\">\n              <DollarSign className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span\n              className={`text-xs font-medium ${studioData.revenue.percentageChange > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n            >\n              {studioData.revenue.percentageChange > 0 ? \"+\" : \"\"}\n              {studioData.revenue.percentageChange}%\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              from last month\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Bookings Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Total Bookings\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.bookings.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-blue-200 text-black shadow-neo-sm\">\n              <TrendingUp className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span\n              className={`text-xs font-medium ${studioData.bookings.percentageChange > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n            >\n              {studioData.bookings.percentageChange > 0 ? \"+\" : \"\"}\n              {studioData.bookings.percentageChange}%\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              from last month\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Classes Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Classes\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.classes.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-green-200 text-black shadow-neo-sm\">\n              <Calendar className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <span className=\"text-xs font-medium\">\n              {studioData.classes.active} active\n            </span>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              this week\n            </span>\n          </div>\n        </NeoCard>\n\n        {/* Choreographers Stat */}\n        <NeoCard className=\"p-3 md:p-5\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground md:text-sm\">\n                Choreographers\n              </p>\n              <h3 className=\"text-xl font-bold md:text-2xl\">\n                {studioData.choreographers.total}\n              </h3>\n            </div>\n            <div className=\"neo-border flex h-10 w-10 items-center justify-center rounded-full bg-purple-200 text-black shadow-neo-sm\">\n              <Users className=\"h-5 w-5\" strokeWidth={2.5} />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center gap-1\">\n            <div className=\"flex -space-x-2\">\n              {studioData.choreographers.featured\n                .slice(0, 3)\n                .map((choreographer) => (\n                  <div\n                    key={choreographer.id}\n                    className=\"neo-border h-6 w-6 overflow-hidden rounded-full bg-white\"\n                  >\n                    <Image\n                      src={choreographer.avatar}\n                      alt={choreographer.name}\n                      width={24}\n                      height={24}\n                      className=\"h-full w-full object-cover\"\n                    />\n                  </div>\n                ))}\n            </div>\n            <span className=\"ml-1.5 text-xs text-muted-foreground\">\n              featured\n            </span>\n          </div>\n        </NeoCard>\n      </div>\n\n      {/* Main content area */}\n      <div className=\"grid gap-6 md:grid-cols-7\">\n        {/* Activity chart */}\n        <NeoCard className=\"p-4 md:col-span-4 md:p-5\">\n          <div className=\"mb-4 flex items-center justify-between\">\n            <h3 className=\"text-base font-bold md:text-lg\">Revenue Overview</h3>\n            <NeoBadge className=\"text-xs\">Last 7 days</NeoBadge>\n          </div>\n          <div className=\"flex h-[200px] items-center justify-center rounded-xl border-2 border-dashed border-muted md:h-[300px]\">\n            <div className=\"flex flex-col items-center text-center\">\n              <BarChart3\n                className=\"h-10 w-10 text-muted md:h-12 md:w-12\"\n                strokeWidth={1.5}\n              />\n              <p className=\"mt-2 text-xs text-muted-foreground md:text-sm\">\n                Revenue chart would be displayed here\n              </p>\n            </div>\n          </div>\n        </NeoCard>\n\n        {/* Upcoming classes */}\n        <NeoCard className=\"p-4 md:col-span-3 md:p-5\">\n          <div className=\"mb-4 flex items-center justify-between\">\n            <h3 className=\"text-base font-bold md:text-lg\">Upcoming Classes</h3>\n            <Link href={`/profile/${studioData.slug}/schedules`}>\n              <NeoButton variant=\"outline\" className=\"h-7 text-xs md:h-8\">\n                View All\n              </NeoButton>\n            </Link>\n          </div>\n          <div className=\"space-y-4 md:space-y-5\">\n            {studioData.upcomingClasses.length > 0 ? (\n              studioData.upcomingClasses.map((classItem) => (\n                <div\n                  key={classItem.id}\n                  className=\"flex items-center justify-between\"\n                >\n                  <div>\n                    <p className=\"text-sm font-bold md:text-base\">\n                      {classItem.name}\n                    </p>\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground md:gap-2 md:text-sm\">\n                      <Calendar className=\"h-3 w-3 md:h-3.5 md:w-3.5\" />\n                      <span>{classItem.time}</span>\n                    </div>\n                    <p className=\"text-xs md:text-sm\">{classItem.instructor}</p>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"flex items-center rounded-full bg-muted px-2 py-0.5 text-xs\">\n                      <Users className=\"mr-1 h-3 w-3 md:h-3.5 md:w-3.5\" />\n                      {classItem.attendees}\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p className=\"text-center text-sm text-muted-foreground\">\n                No upcoming classes\n              </p>\n            )}\n          </div>\n        </NeoCard>\n      </div>\n\n      {/* Choreographer Management Section - Improved */}\n      <NeoCard className=\"p-4 md:p-5\">\n        <div className=\"mb-4 flex flex-col justify-between gap-4 sm:flex-row sm:items-center\">\n          <h3 className=\"text-base font-bold md:text-lg\">Choreographers</h3>\n\n          {/* Replace this Link with the ChoreographerInviteDialog */}\n          <ChoreographerInviteDialog\n            studioId={studioData.id}\n            studioSlug={studioData.slug}\n            buttonClassName=\"w-full sm:w-auto\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n          {studioData.choreographers.featured.map((choreographer) => (\n            <Link\n              key={choreographer.id}\n              href={`/profile/${studioData.slug}/choreographers/${choreographer.id}`}\n              className=\"block\"\n            >\n              <div className=\"neo-border flex items-center gap-3 rounded-xl p-3 transition-all hover:translate-x-0.5 hover:translate-y-0.5 hover:shadow-none md:p-4\">\n                <div className=\"neo-border h-10 w-10 overflow-hidden rounded-full md:h-12 md:w-12\">\n                  <Image\n                    src={choreographer.avatar}\n                    alt={choreographer.name}\n                    width={48}\n                    height={48}\n                    className=\"h-full w-full object-cover\"\n                  />\n                </div>\n                <div className=\"flex-grow\">\n                  <p className=\"text-sm font-bold md:text-base\">\n                    {choreographer.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground md:text-sm\">\n                    {choreographer.specialization}\n                  </p>\n                </div>\n                <div className=\"flex-shrink-0 opacity-70\">\n                  <ChevronRight className=\"h-4 w-4\" />\n                </div>\n              </div>\n            </Link>\n          ))}\n\n          {studioData.choreographers.featured.length === 0 && (\n            <div className=\"col-span-full rounded-xl border-2 border-dashed border-muted p-8 text-center\">\n              <Users className=\"mx-auto mb-3 h-10 w-10 text-muted-foreground\" />\n              <p className=\"mb-2 font-medium\">No choreographers yet</p>\n              <p className=\"mb-4 text-sm text-muted-foreground\">\n                Add choreographers to assign them to your dance classes.\n              </p>\n\n              {/* Replace this Link with the ChoreographerInviteDialog */}\n              <ChoreographerInviteDialog\n                studioId={studioData.id}\n                studioSlug={studioData.slug}\n                buttonLabel=\"Add Your First Choreographer\"\n                size=\"sm\"\n              />\n            </div>\n          )}\n        </div>\n      </NeoCard>\n    </div>\n  );\n}\n\nexport default async function ProfilePage() {\n  // Only prefetch the procedure that exists\n  await api.profile.getCurrent.prefetch();\n  await api.studio.getMembers.prefetch({ role: \"CHOREOGRAPHER\", studioId: \"\" });\n\n  return (\n    <HydrateClient>\n      <Suspense fallback={<ProfileSkeleton />}>\n        <ProfileContent />\n      </Suspense>\n    </HydrateClient>\n  );\n}\n```\n\n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n  staffProcedure,\n} from \"../trpc\";\nimport { type Prisma, type Studio } from \"@prisma/client\";\nimport { Country, State } from \"country-state-city\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { createJWT, verifyJWT } from \"~/lib/jwt\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid().optional(),\n  slug: z.string().min(3).max(100).optional(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Helper function to enhance studio data with full country and state names\nconst enhanceStudioWithLocationNames = <T extends Studio>(\n  studio: T,\n): (T & { countryName?: string; stateName?: string }) | null => {\n  if (!studio) return null;\n\n  const enhancedStudio = { ...studio } as T & {\n    countryName?: string;\n    stateName?: string;\n  };\n\n  if (studio.country) {\n    const countryData = Country.getCountryByCode(studio.country);\n    enhancedStudio.countryName = countryData?.name;\n  }\n\n  if (studio.state && studio.country) {\n    const stateData = State.getStateByCodeAndCountry(\n      studio.state,\n      studio.country,\n    );\n    enhancedStudio.stateName = stateData?.name;\n  }\n\n  return enhancedStudio;\n};\n\n// Helper function to enhance studio arrays\nconst enhanceStudiosWithLocationNames = <T extends Studio>(\n  studios: T[],\n): Array<(T & { countryName?: string; stateName?: string }) | null> => {\n  return studios.map(enhanceStudioWithLocationNames);\n};\n\nexport type EnhancedStudios = ReturnType<\n  typeof enhanceStudiosWithLocationNames\n>;\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return enhanceStudioWithLocationNames(studio);\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id, slug: input.slug },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return enhanceStudioWithLocationNames(studio);\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        const updatedStudio = await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n\n        return enhanceStudioWithLocationNames(updatedStudio);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          const deletedStudio = await tx.studio.delete({\n            where: { id: input.studioId },\n          });\n\n          return enhanceStudioWithLocationNames(deletedStudio);\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios: enhanceStudiosWithLocationNames(studios),\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        // Enhance studio data in each membership\n        return memberships.map((membership) => ({\n          ...membership,\n          studio: enhanceStudioWithLocationNames(membership.studio),\n        }));\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...member,\n          studio: enhanceStudioWithLocationNames(member.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        const updatedMember = await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...updatedMember,\n          studio: enhanceStudioWithLocationNames(updatedMember.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Rest of the code remains unchanged...\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  getMembers: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        type AuthUser = {\n          id: string;\n          email: string;\n          email_confirmed_at: string | null;\n          user_metadata: Record<string, unknown>;\n        };\n\n        // Create admin client for accessing auth data\n        const supabase = await createClient({ isAdmin: true });\n\n        // Get all auth IDs from member profiles\n        const authIds = members.map((member) => member.profile.authId);\n\n        // Query all users at once\n        const { data: authUsers, error } =\n          await supabase.auth.admin.listUsers();\n\n        if (error) {\n          console.error(\"Failed to fetch auth users:\", error.message);\n          return members;\n        }\n\n        // Filter to only the users we need\n        const relevantAuthUsers = authUsers.users.filter((user) =>\n          authIds.includes(user.id),\n        );\n\n        // Create a map for quick lookups\n        const authUserMap = new Map<string, AuthUser>();\n        relevantAuthUsers.forEach((user) => {\n          authUserMap.set(user.id, {\n            id: user.id,\n            email: user.email ?? \"\",\n            email_confirmed_at: user.email_confirmed_at ?? \"\",\n            user_metadata: user.user_metadata || {},\n          });\n        });\n\n        // Combine member data with auth user data\n        const membersWithAuthData = members.map((member) => {\n          const authUser = authUserMap.get(member.profile.authId) || null;\n          return {\n            ...member,\n            authUser,\n          };\n        });\n\n        return membersWithAuthData;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n\n  inviteChoreographerWithLink: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Create the Supabase admin client\n        const supabase = await createClient({ isAdmin: true });\n\n        // Check if the email belongs to a registered user\n        const { data } = await supabase.auth.admin.listUsers();\n\n        // Filter users manually to find by email\n        const matchingUsers =\n          data?.users?.filter(\n            (user) => user.email?.toLowerCase() === input.email.toLowerCase(),\n          ) || [];\n\n        // Get user IDs if they exist\n        const userIds = matchingUsers.map((user) => user.id);\n\n        // Check for existing member with this email at this studio\n        const existingMember =\n          userIds.length > 0\n            ? await ctx.db.studioMember.findFirst({\n                where: {\n                  studio: {\n                    id: input.studioId,\n                  },\n                  profile: {\n                    authId: {\n                      in: userIds,\n                    },\n                  },\n                },\n              })\n            : null;\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This user is already a member of this studio\",\n          });\n        }\n\n        // Check for existing pending invitation\n        const existingInvitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            email: input.email,\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (existingInvitation) {\n          // Create a secure JWT token for the existing invitation\n          const token = await createJWT({\n            id: existingInvitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: existingInvitation.role,\n            type: \"studio-invitation\",\n          });\n\n          return {\n            status: \"already_invited\",\n            invitation: existingInvitation,\n            inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${existingInvitation.role}`,\n          };\n        }\n\n        // Store the invitation in the database with expiration (30 days)\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        // Fixed role to CHOREOGRAPHER\n        const role = \"CHOREOGRAPHER\";\n\n        // ctx.profile is guaranteed to exist in authedProcedure\n        const invitation = await ctx.db.studioInvitation.create({\n          data: {\n            email: input.email,\n            studioId: input.studioId,\n            role,\n            invitedById: ctx.profile.id,\n            expiresAt: expirationDate,\n            status: \"PENDING\",\n          },\n        });\n\n        // Create a secure JWT token with all needed data\n        const token = await createJWT({\n          id: invitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role,\n          type: \"studio-invitation\",\n        });\n\n        return {\n          status: \"invited\",\n          invitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${role}`,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Invite choreographer error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to generate invitation link\",\n          cause: error,\n        });\n      }\n    }),\n\n  validateInvitation: publicProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // First check if user is already a member of this studio\n        if (ctx.profile) {\n          const existingMembership = await ctx.db.studioMember.findUnique({\n            where: {\n              profileId_studioId: {\n                profileId: ctx.profile.id,\n                studioId: tokenData.studioId,\n              },\n            },\n            include: {\n              studio: true,\n            },\n          });\n\n          if (existingMembership) {\n            return {\n              valid: true,\n              alreadyMember: true,\n              membership: {\n                ...existingMembership,\n                studio: enhanceStudioWithLocationNames(\n                  existingMembership.studio,\n                ),\n              },\n              invitation: null,\n            };\n          }\n        }\n\n        // Find the invitation with related studio data\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n          },\n          include: {\n            studio: true,\n            invitedBy: true,\n          },\n        });\n\n        if (!invitation) {\n          // Check if there's any invitation with this email and studioId that's been accepted\n          if (tokenData.email) {\n            const acceptedInvitation = await ctx.db.studioInvitation.findFirst({\n              where: {\n                email: tokenData.email,\n                studioId: tokenData.studioId,\n                status: \"ACCEPTED\",\n              },\n              include: {\n                studio: true,\n              },\n            });\n\n            if (acceptedInvitation) {\n              return {\n                valid: true,\n                alreadyAccepted: true,\n                invitation: {\n                  ...acceptedInvitation,\n                  studio: enhanceStudioWithLocationNames(\n                    acceptedInvitation.studio,\n                  ),\n                },\n              };\n            }\n          }\n\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Handle different invitation statuses\n        if (invitation.status === \"ACCEPTED\") {\n          return {\n            valid: true,\n            alreadyAccepted: true,\n            invitation: {\n              ...invitation,\n              studio: enhanceStudioWithLocationNames(invitation.studio),\n            },\n          };\n        }\n\n        if (\n          invitation.status === \"EXPIRED\" ||\n          invitation.expiresAt < new Date()\n        ) {\n          // Update status to expired if it's not already\n          if (invitation.status !== \"EXPIRED\") {\n            await ctx.db.studioInvitation.update({\n              where: { id: invitation.id },\n              data: { status: \"EXPIRED\" },\n            });\n          }\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Return validated invitation with enhanced studio data\n        return {\n          valid: true,\n          invitation: {\n            ...invitation,\n            studio: enhanceStudioWithLocationNames(invitation.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Validate invitation error:\", error);\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n    }),\n\n  // Update acceptInvitationWithLink procedure\n  acceptInvitationWithLink: authedProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // Find the invitation\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n            status: \"PENDING\",\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Check if expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Check if user is already a member\n        const existingMembership = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n            },\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (existingMembership) {\n          // Update invitation status\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return {\n            status: \"already_member\",\n            membership: {\n              ...existingMembership,\n              studio: enhanceStudioWithLocationNames(existingMembership.studio),\n            },\n          };\n        }\n\n        // Create new membership in a transaction\n        const result = await ctx.db.$transaction(async (tx) => {\n          // Add user to studio\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n              role: invitation.role,\n            },\n            include: {\n              studio: true,\n              profile: true,\n            },\n          });\n\n          // Update invitation status\n          await tx.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return membership;\n        });\n\n        return {\n          status: \"accepted\",\n          membership: {\n            ...result,\n            studio: enhanceStudioWithLocationNames(result.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Accept invitation error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to accept invitation\",\n          cause: error,\n        });\n      }\n    }),\n});\n```\n\nconst membersWithAuthData: {\n    authUser: AuthUser | null;\n    profile: {\n        id: string;\n        authId: string;\n        createdAt: Date;\n        updatedAt: Date;\n    };\n    id: string;\n    createdAt: Date;\n    updatedAt: Date;\n    role: $Enums.StudioRole;\n    studioId: string;\n    profileId: string;\n}[]\n\nabove is the return type \n\nbut why when i use it i got this\nconst choreographers: ({\n    profile: {\n        id: string;\n        authId: string;\n        createdAt: Date;\n        updatedAt: Date;\n    };\n} & {\n    id: string;\n    createdAt: Date;\n    updatedAt: Date;\n    role: $Enums.StudioRole;\n    studioId: string;\n    profileId: string;\n})[]\nI'll create the missing `choreographers-form.tsx` component for your application. This component will allow users to invite choreographers to their studio.\n\n```tsx\n// dance-book-app/src/app/(private)/profile/choreographers-form.tsx\n\"use client\";\n\nimport { useState } from \"react\";\nimport { Loader2, Plus, Send, X } from \"lucide-react\";\nimport { NeoDialog, NeoDialogContent, NeoDialogTitle, NeoDialogDescription, NeoDialogHeader, NeoDialogFooter } from \"~/components/ui/neo-dialog\";\nimport { NeoButton } from \"~/components/ui/neo-button\";\nimport { NeoInput } from \"~/components/ui/neo-input\";\nimport { api } from \"~/trpc/react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\n\nconst emailSchema = z.string().email(\"Please enter a valid email address\");\n\ninterface ChoreographerInviteDialogProps {\n  studioId: string;\n  studioSlug: string;\n  buttonLabel?: string;\n  buttonClassName?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function ChoreographerInviteDialog({\n  studioId,\n  studioSlug,\n  buttonLabel = \"Add Choreographer\",\n  buttonClassName = \"\",\n  size,\n}: ChoreographerInviteDialogProps) {\n  const [open, setOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [inviteLink, setInviteLink] = useState(\"\");\n  const [inviteCopied, setInviteCopied] = useState(false);\n\n  // Use the TRPC mutation to invite a choreographer\n  const inviteMutation = api.studio.inviteChoreographerWithLink.useMutation({\n    onSuccess: (data) => {\n      setInviteLink(data.inviteLink);\n      toast.success(\n        data.status === \"already_invited\"\n          ? \"Found existing invitation for this email\"\n          : \"Invitation link created successfully\"\n      );\n    },\n    onError: (error) => {\n      toast.error(error.message || \"Failed to create invitation\");\n    },\n  });\n\n  const handleCopyInvite = async () => {\n    try {\n      await navigator.clipboard.writeText(inviteLink);\n      setInviteCopied(true);\n      toast.success(\"Invitation link copied to clipboard\");\n      \n      // Reset the copied state after 3 seconds\n      setTimeout(() => {\n        setInviteCopied(false);\n      }, 3000);\n    } catch (err) {\n      toast.error(\"Failed to copy to clipboard. Please try manually selecting the link.\");\n    }\n  };\n\n  const handleInvite = () => {\n    // Validate email\n    try {\n      emailSchema.parse(email);\n      setEmailError(\"\");\n      \n      // Send invitation\n      inviteMutation.mutate({\n        studioId,\n        email,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        setEmailError(error.errors[0]?.message || \"Invalid email\");\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setEmail(\"\");\n    setEmailError(\"\");\n    setInviteLink(\"\");\n    setInviteCopied(false);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    // Wait for dialog close animation before resetting form\n    setTimeout(resetForm, 300);\n  };\n\n  return (\n    <>\n      <NeoButton \n        onClick={() => setOpen(true)} \n        className={buttonClassName}\n        size={size}\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        {buttonLabel}\n      </NeoButton>\n      \n      <NeoDialog open={open} onOpenChange={(isOpen) => {\n        setOpen(isOpen);\n        if (!isOpen) handleClose();\n      }}>\n        <NeoDialogContent className=\"sm:max-w-md\">\n          <NeoDialogHeader>\n            <NeoDialogTitle>Invite Choreographer</NeoDialogTitle>\n            <NeoDialogDescription>\n              Send an invitation link to a choreographer to join your studio.\n            </NeoDialogDescription>\n          </NeoDialogHeader>\n          \n          {!inviteLink ? (\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email address\n                </label>\n                <NeoInput\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"choreographer@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className={emailError ? \"border-red-500\" : \"\"}\n                />\n                {emailError && (\n                  <p className=\"text-sm text-red-500\">{emailError}</p>\n                )}\nthe issue here is the typescript type \ni am using trpc here \nThe issue is that the return type of your `api.studio.getMembers` call isn't including the `authUser` property in the type definition, even though it's being returned in the actual data.\n\nHere's a fix for this issue:\n\n```tsx\n// dance-book-app/src/app/(private)/profile/page.tsx\n\n// Add this type definition to match what's returned from the API\ninterface MemberWithAuthUser {\n  id: string;\n  createdAt: Date;\n  updatedAt: Date;\n  role: string;\n  studioId: string;\n  profileId: string;\n  profile: {\n    id: string;\n    authId: string;\n    createdAt: Date;\n    updatedAt: Date;\n  };\n  authUser: {\n    id: string;\n    email: string;\n    email_confirmed_at: string | null;\n    user_metadata: Record<string, unknown>;\n  } | null;\n}\n\nasync function ProfileContent() {\n  // Get the current user profile with studio memberships\n  const profile = await api.profile.getCurrent();\n  const studioId = profile.studioMembers[0]?.studio?.id ?? \"\";\n  \n  // Add explicit type to match what's returned from the API\n  const choreographers = studioId\n    ? await api.studio.getMembers({\n        role: \"CHOREOGRAPHER\",\n        studioId,\n      }) as MemberWithAuthUser[]\n    : [];\n\n  // Rest of the component remains the same\n  // ...\n}\n```\n\nThe issue is a TypeScript type definition mismatch between what the server is returning and what the client is expecting. The server's router is returning an enhanced object with `authUser`, but the TypeScript type definition doesn't include this. \n\nBy explicitly typing the result of the `getMembers` call to include the `authUser` property, we ensure TypeScript understands the correct shape of the data.\nwhy do i need to create a new type for the return value of the api call?\n\nYou're right to question that - you shouldn't need to create a new type for the return value. The return type should be properly inferred from the TRPC router definition.\n\nThe issue is that there's a disconnect between the TypeScript type defined in your server router and what's actually being returned. In your `studioRouter.ts`, the `getMembers` procedure is returning the members with auth data, but the TypeScript types aren't being fully propagated to the client.\n\nHere are cleaner ways to fix it:\n\n### Option 1: Use type assertion only where needed\n\n```tsx\nasync function ProfileContent() {\n  // Get the current user profile with studio memberships\n  const profile = await api.profile.getCurrent();\n  const studioId = profile.studioMembers[0]?.studio?.id ?? \"\";\n  const choreographers = studioId\n    ? await api.studio.getMembers({\n        role: \"CHOREOGRAPHER\",\n        studioId,\n      })\n    : [];\n\n  // Now you can safely access choreographers.authUser if needed\n  // If you need to access authUser somewhere, only then use type assertion:\n  // const email = (choreographer as any).authUser?.email;\n\n  console.dir({ choreographers }, { depth: null });\n  // ...\n}\n```\n\n### Option 2: Define proper return type in the router\n\nThe better approach is to fix the return type in your router definition. In your `studioRouter.ts`, update the `getMembers` procedure to explicitly define its return type:\n\n```ts\n// In studioRouter.ts\ngetMembers: authedProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n    }),\n  )\n  .output(z.array(\n    z.object({\n      id: z.string(),\n      createdAt: z.date(),\n      updatedAt: z.date(),\n      role: z.string(),\n      studioId: z.string(),\n      profileId: z.string(),\n      profile: z.object({\n        id: z.string(),\n        authId: z.string(),\n        createdAt: z.date(),\n        updatedAt: z.date(),\n      }),\n      authUser: z.object({\n        id: z.string(),\n        email: z.string(),\n        email_confirmed_at: z.string().nullable(),\n        user_metadata: z.record(z.unknown()),\n      }).nullable(),\n    })\n  ))\n  .query(async ({ ctx, input }) => {\n    // Existing implementation\n    // ...\n  })\n```\n\nBy adding the `.output()` schema, TRPC will properly infer the return type throughout your application.\n\nYou don't need to create a new type just to handle the API call return value - this indicates there's a gap in your type definitions that should be addressed at the source.\n```ts dance-book-app/src/server/api/routers/studio.ts\nimport { z } from \"zod\";\nimport { TRPCError } from \"@trpc/server\";\nimport {\n  createTRPCRouter,\n  publicProcedure,\n  authedProcedure,\n  adminProcedure,\n  ownerProcedure,\n  staffProcedure,\n} from \"../trpc\";\nimport { type Prisma, type Studio } from \"@prisma/client\";\nimport { Country, State } from \"country-state-city\";\nimport { createClient } from \"~/lib/supabase/server\";\nimport { createJWT, verifyJWT } from \"~/lib/jwt\";\n\n// Validation schemas\nconst studioCreateSchema = z.object({\n  name: z.string().min(2).max(100),\n  slug: z.string().min(3).max(100),\n  description: z.string().optional(),\n  address: z.string().min(5).max(255),\n  city: z.string().min(2).max(100),\n  state: z.string().min(2).max(100),\n  postalCode: z.string().min(3).max(20),\n  country: z.string().length(2),\n  logo: z.string().url().optional(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n});\n\nconst studioUpdateSchema = z.object({\n  studioId: z.string().uuid(), // Changed from 'id' to 'studioId' for consistency with middleware\n  name: z.string().min(2).max(100).optional(),\n  slug: z.string().min(3).max(100).optional(),\n  description: z.string().optional().nullable(),\n  address: z.string().min(5).max(255).optional(),\n  city: z.string().min(2).max(100).optional(),\n  state: z.string().min(2).max(100).optional(),\n  postalCode: z.string().min(3).max(20).optional(),\n  country: z.string().length(2).optional(),\n  logo: z.string().url().optional().nullable(),\n  openingHours: z.record(z.string(), z.array(z.string())).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Finder schema with exclusive fields, similar to profile router\nconst studioFindSchema = z.object({\n  id: z.string().uuid().optional(),\n  slug: z.string().min(3).max(100).optional(),\n});\n\nconst studioQuerySchema = z.object({\n  page: z.number().min(1).default(1),\n  orderBy: z\n    .enum([\"name\", \"city\", \"createdAt\", \"updatedAt\"])\n    .default(\"createdAt\"),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  search: z.string().optional(),\n  city: z.string().optional(),\n  country: z.string().optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Helper function to enhance studio data with full country and state names\nconst enhanceStudioWithLocationNames = <T extends Studio>(\n  studio: T,\n): (T & { countryName?: string; stateName?: string }) | null => {\n  if (!studio) return null;\n\n  const enhancedStudio = { ...studio } as T & {\n    countryName?: string;\n    stateName?: string;\n  };\n\n  if (studio.country) {\n    const countryData = Country.getCountryByCode(studio.country);\n    enhancedStudio.countryName = countryData?.name;\n  }\n\n  if (studio.state && studio.country) {\n    const stateData = State.getStateByCodeAndCountry(\n      studio.state,\n      studio.country,\n    );\n    enhancedStudio.stateName = stateData?.name;\n  }\n\n  return enhancedStudio;\n};\n\n// Helper function to enhance studio arrays\nconst enhanceStudiosWithLocationNames = <T extends Studio>(\n  studios: T[],\n): Array<(T & { countryName?: string; stateName?: string }) | null> => {\n  return studios.map(enhanceStudioWithLocationNames);\n};\n\nexport type EnhancedStudios = ReturnType<\n  typeof enhanceStudiosWithLocationNames\n>;\n\nexport const studioRouter = createTRPCRouter({\n  // Create a new studio\n  create: authedProcedure\n    .input(studioCreateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to create the studio and add the creator as owner\n        return await ctx.db.$transaction(async (tx) => {\n          // Create the studio first\n          const studio = await tx.studio.create({\n            data: {\n              name: input.name,\n              slug: input.slug,\n              description: input.description,\n              address: input.address,\n              city: input.city,\n              state: input.state,\n              postalCode: input.postalCode,\n              country: input.country,\n              logo: input.logo,\n              openingHours: input.openingHours as object,\n            },\n          });\n\n          // Add the creator as an owner\n          await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: studio.id,\n              role: \"OWNER\",\n            },\n          });\n\n          return enhanceStudioWithLocationNames(studio);\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to create studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Find a unique studio, similar to profile router\n  findUnique: publicProcedure\n    .input(studioFindSchema)\n    .query(async ({ ctx, input }) => {\n      const studio = await ctx.db.studio.findUnique({\n        where: { id: input.id, slug: input.slug },\n        include: {\n          members: {\n            include: {\n              profile: true,\n            },\n          },\n        },\n      });\n\n      if (!studio) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Studio not found\",\n        });\n      }\n\n      return enhanceStudioWithLocationNames(studio);\n    }),\n\n  // Update a studio - using adminProcedure which already checks for OWNER or ADMIN role\n  update: adminProcedure\n    .input(studioUpdateSchema)\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Extract the studioId and remove it from the data to be updated\n        const { studioId, ...updateData } = input;\n\n        const updatedStudio = await ctx.db.studio.update({\n          where: { id: studioId },\n          data: {\n            ...updateData,\n            openingHours: updateData.openingHours as object | undefined,\n            updatedAt: new Date(),\n          },\n        });\n\n        return enhanceStudioWithLocationNames(updatedStudio);\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to update not found\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Delete a studio - using ownerProcedure which already checks for OWNER role\n  delete: ownerProcedure\n    .input(z.object({ studioId: z.string().uuid() }))\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Use a transaction to delete all related data\n        return await ctx.db.$transaction(async (tx) => {\n          // First delete all studio memberships\n          await tx.studioMember.deleteMany({\n            where: { studioId: input.studioId },\n          });\n\n          // Then delete the studio itself\n          const deletedStudio = await tx.studio.delete({\n            where: { id: input.studioId },\n          });\n\n          return enhanceStudioWithLocationNames(deletedStudio);\n        });\n      } catch (error) {\n        if (\n          error instanceof Error &&\n          error.message.includes(\"Record to delete does not exist\")\n        ) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Studio not found\",\n          });\n        }\n\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to delete studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // List all studios with filtering, sorting, and pagination\n  list: publicProcedure\n    .input(studioQuerySchema)\n    .query(async ({ ctx, input }) => {\n      try {\n        const { page, orderBy, order, search, city, country, isActive } = input;\n\n        // Build query options for pagination\n        const paginationOptions: Prisma.StudioFindManyArgs = {\n          orderBy: {\n            [orderBy]: order,\n          },\n        };\n\n        // Add filtering conditions\n        const whereConditions: Prisma.StudioWhereInput = {};\n\n        if (search) {\n          whereConditions.OR = [\n            {\n              name: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              description: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n            {\n              address: {\n                contains: search,\n                mode: \"insensitive\" as Prisma.QueryMode,\n              },\n            },\n          ];\n        }\n\n        if (city) {\n          whereConditions.city = {\n            contains: city,\n            mode: \"insensitive\" as Prisma.QueryMode,\n          };\n        }\n\n        if (country) {\n          whereConditions.country = country;\n        }\n\n        if (isActive !== undefined) {\n          whereConditions.isActive = isActive;\n        }\n\n        if (Object.keys(whereConditions).length > 0) {\n          paginationOptions.where = whereConditions;\n        }\n\n        // Execute pagination query with extension\n        const [studios, meta] = await ctx.db.studio\n          .paginate(paginationOptions)\n          .withPages({\n            page,\n          });\n\n        return {\n          studios: enhanceStudiosWithLocationNames(studios),\n          meta,\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to list studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Get studios managed by the current user\n  myStudios: authedProcedure\n    .input(\n      z\n        .object({\n          role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n        })\n        .optional(),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        const whereConditions: Prisma.StudioMemberWhereInput = {\n          profileId: ctx.profile.id,\n        };\n\n        if (input?.role) {\n          whereConditions.role = input.role;\n        }\n\n        const memberships = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            studio: true,\n          },\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        });\n\n        // Enhance studio data in each membership\n        return memberships.map((membership) => ({\n          ...membership,\n          studio: enhanceStudioWithLocationNames(membership.studio),\n        }));\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve your studios\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Add a member to a studio - using adminProcedure which checks for OWNER or ADMIN role\n  addMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by adminProcedure\n        profileId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).default(\"STAFF\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Check if the member already exists\n        const existingMember = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: input.profileId,\n              studioId: input.studioId,\n            },\n          },\n        });\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This person is already a member of this studio\",\n          });\n        }\n\n        // Create the member\n        const member = await ctx.db.studioMember.create({\n          data: {\n            profileId: input.profileId,\n            studioId: input.studioId,\n            role: input.role,\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...member,\n          studio: enhanceStudioWithLocationNames(member.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to add member to studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Custom procedure for updating members - we need specific logic for role restrictions\n  updateMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n        role: z.enum([\"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to update\n      const memberToUpdate = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToUpdate) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToUpdate.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if trying to update someone with a higher role\n      if (\n        memberToUpdate.role === \"OWNER\" ||\n        (ctx.studioMembership.role === \"ADMIN\" &&\n          memberToUpdate.role === \"ADMIN\")\n      ) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"You cannot modify members with equal or higher roles\",\n        });\n      }\n\n      try {\n        // Update the member\n        const updatedMember = await ctx.db.studioMember.update({\n          where: { id: input.memberId },\n          data: {\n            role: input.role,\n            updatedAt: new Date(),\n          },\n          include: {\n            profile: true,\n            studio: true,\n          },\n        });\n\n        // Enhance studio data in the response\n        return {\n          ...updatedMember,\n          studio: enhanceStudioWithLocationNames(updatedMember.studio),\n        };\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to update studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  // Rest of the code remains unchanged...\n  removeMember: adminProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Required by adminProcedure\n        memberId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Get the member to remove\n      const memberToRemove = await ctx.db.studioMember.findUnique({\n        where: { id: input.memberId },\n      });\n\n      if (!memberToRemove) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"Member not found\",\n        });\n      }\n\n      // Verify this member belongs to the studio in the input\n      if (memberToRemove.studioId !== input.studioId) {\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Member does not belong to specified studio\",\n        });\n      }\n\n      // Check if attempting to remove an owner (only the owner themselves can remove their ownership)\n      const isSelf = memberToRemove.profileId === ctx?.profile?.id;\n\n      if (memberToRemove.role === \"OWNER\" && !isSelf) {\n        throw new TRPCError({\n          code: \"FORBIDDEN\",\n          message: \"Studio owners cannot be removed by others\",\n        });\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: input.memberId },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to remove studio member\",\n          cause: error,\n        });\n      }\n    }),\n\n  leaveStudio: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Find the user's membership\n      const membership = await ctx.db.studioMember.findUnique({\n        where: {\n          profileId_studioId: {\n            profileId: ctx.profile.id,\n            studioId: input.studioId,\n          },\n        },\n      });\n\n      if (!membership) {\n        throw new TRPCError({\n          code: \"NOT_FOUND\",\n          message: \"You are not a member of this studio\",\n        });\n      }\n\n      // Check if they're the sole owner\n      if (membership.role === \"OWNER\") {\n        const ownersCount = await ctx.db.studioMember.count({\n          where: {\n            studioId: input.studioId,\n            role: \"OWNER\",\n          },\n        });\n\n        if (ownersCount <= 1) {\n          throw new TRPCError({\n            code: \"FORBIDDEN\",\n            message:\n              \"You cannot leave as you are the only owner. Transfer ownership first or delete the studio.\",\n          });\n        }\n      }\n\n      try {\n        return await ctx.db.studioMember.delete({\n          where: { id: membership.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to leave studio\",\n          cause: error,\n        });\n      }\n    }),\n\n  getMembers: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(), // Already required by staffProcedure\n        role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n      }),\n    )\n    .output(z.array(\n        z.object({\n          id: z.string(),\n          createdAt: z.date(),\n          updatedAt: z.date(),\n          role: z.string(),\n          studioId: z.string(),\n          profileId: z.string(),\n          profile: z.object({\n            id: z.string(),\n            authId: z.string(),\n            createdAt: z.date(),\n            updatedAt: z.date(),\n          }),\n          authUser: z.object({\n            id: z.string(),\n            email: z.string(),\n            email_confirmed_at: z.string().nullable(),\n            user_metadata: z.record(z.unknown()),\n          }).nullable(),\n        })\n      ))\n    .query(async ({ ctx, input }) => {\n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n      };\n\n      if (input.role) {\n        whereConditions.role = input.role;\n      }\n\n      try {\n        const members = await ctx.db.studioMember.findMany({\n          where: whereConditions,\n          include: {\n            profile: true,\n          },\n          orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n        });\n\n        type AuthUser = {\n          id: string;\n          email: string;\n          email_confirmed_at: string | null;\n          user_metadata: Record<string, unknown>;\n        };\n\n        // Create admin client for accessing auth data\n        const supabase = await createClient({ isAdmin: true });\n\n        // Get all auth IDs from member profiles\n        const authIds = members.map((member) => member.profile.authId);\n\n        // Query all users at once\n        const { data: authUsers, error } =\n          await supabase.auth.admin.listUsers();\n\n        if (error) {\n          console.error(\"Failed to fetch auth users:\", error.message);\n          return members;\n        }\n\n        // Filter to only the users we need\n        const relevantAuthUsers = authUsers.users.filter((user) =>\n          authIds.includes(user.id),\n        );\n\n        // Create a map for quick lookups\n        const authUserMap = new Map<string, AuthUser>();\n        relevantAuthUsers.forEach((user) => {\n          authUserMap.set(user.id, {\n            id: user.id,\n            email: user.email ?? \"\",\n            email_confirmed_at: user.email_confirmed_at ?? \"\",\n            user_metadata: user.user_metadata || {},\n          });\n        });\n\n        // Combine member data with auth user data\n        const membersWithAuthData = members.map((member) => {\n          const authUser = authUserMap.get(member.profile.authId) ?? null;\n          return {\n            ...member,\n            authUser,\n          };\n        });\n\n        return membersWithAuthData;\n      } catch (error) {\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to retrieve studio members\",\n          cause: error,\n        });\n      }\n    }),\n\n  inviteChoreographerWithLink: authedProcedure\n    .input(\n      z.object({\n        studioId: z.string().uuid(),\n        email: z.string().email(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Create the Supabase admin client\n        const supabase = await createClient({ isAdmin: true });\n\n        // Check if the email belongs to a registered user\n        const { data } = await supabase.auth.admin.listUsers();\n\n        // Filter users manually to find by email\n        const matchingUsers =\n          data?.users?.filter(\n            (user) => user.email?.toLowerCase() === input.email.toLowerCase(),\n          ) || [];\n\n        // Get user IDs if they exist\n        const userIds = matchingUsers.map((user) => user.id);\n\n        // Check for existing member with this email at this studio\n        const existingMember =\n          userIds.length > 0\n            ? await ctx.db.studioMember.findFirst({\n                where: {\n                  studio: {\n                    id: input.studioId,\n                  },\n                  profile: {\n                    authId: {\n                      in: userIds,\n                    },\n                  },\n                },\n              })\n            : null;\n\n        if (existingMember) {\n          throw new TRPCError({\n            code: \"CONFLICT\",\n            message: \"This user is already a member of this studio\",\n          });\n        }\n\n        // Check for existing pending invitation\n        const existingInvitation = await ctx.db.studioInvitation.findFirst({\n          where: {\n            email: input.email,\n            studioId: input.studioId,\n            status: \"PENDING\",\n          },\n        });\n\n        if (existingInvitation) {\n          // Create a secure JWT token for the existing invitation\n          const token = await createJWT({\n            id: existingInvitation.id,\n            email: input.email,\n            studioId: input.studioId,\n            role: existingInvitation.role,\n            type: \"studio-invitation\",\n          });\n\n          return {\n            status: \"already_invited\",\n            invitation: existingInvitation,\n            inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${existingInvitation.role}`,\n          };\n        }\n\n        // Store the invitation in the database with expiration (30 days)\n        const expirationDate = new Date();\n        expirationDate.setDate(expirationDate.getDate() + 30);\n\n        // Fixed role to CHOREOGRAPHER\n        const role = \"CHOREOGRAPHER\";\n\n        // ctx.profile is guaranteed to exist in authedProcedure\n        const invitation = await ctx.db.studioInvitation.create({\n          data: {\n            email: input.email,\n            studioId: input.studioId,\n            role,\n            invitedById: ctx.profile.id,\n            expiresAt: expirationDate,\n            status: \"PENDING\",\n          },\n        });\n\n        // Create a secure JWT token with all needed data\n        const token = await createJWT({\n          id: invitation.id,\n          email: input.email,\n          studioId: input.studioId,\n          role,\n          type: \"studio-invitation\",\n        });\n\n        return {\n          status: \"invited\",\n          invitation,\n          inviteLink: `${process.env.NEXT_PUBLIC_APP_URL}/invite-accept?token=${token}&studioId=${input.studioId}&role=${role}`,\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Invite choreographer error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to generate invitation link\",\n          cause: error,\n        });\n      }\n    }),\n\n  validateInvitation: publicProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .query(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // First check if user is already a member of this studio\n        if (ctx.profile) {\n          const existingMembership = await ctx.db.studioMember.findUnique({\n            where: {\n              profileId_studioId: {\n                profileId: ctx.profile.id,\n                studioId: tokenData.studioId,\n              },\n            },\n            include: {\n              studio: true,\n            },\n          });\n\n          if (existingMembership) {\n            return {\n              valid: true,\n              alreadyMember: true,\n              membership: {\n                ...existingMembership,\n                studio: enhanceStudioWithLocationNames(\n                  existingMembership.studio,\n                ),\n              },\n              invitation: null,\n            };\n          }\n        }\n\n        // Find the invitation with related studio data\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n          },\n          include: {\n            studio: true,\n            invitedBy: true,\n          },\n        });\n\n        if (!invitation) {\n          // Check if there's any invitation with this email and studioId that's been accepted\n          if (tokenData.email) {\n            const acceptedInvitation = await ctx.db.studioInvitation.findFirst({\n              where: {\n                email: tokenData.email,\n                studioId: tokenData.studioId,\n                status: \"ACCEPTED\",\n              },\n              include: {\n                studio: true,\n              },\n            });\n\n            if (acceptedInvitation) {\n              return {\n                valid: true,\n                alreadyAccepted: true,\n                invitation: {\n                  ...acceptedInvitation,\n                  studio: enhanceStudioWithLocationNames(\n                    acceptedInvitation.studio,\n                  ),\n                },\n              };\n            }\n          }\n\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Handle different invitation statuses\n        if (invitation.status === \"ACCEPTED\") {\n          return {\n            valid: true,\n            alreadyAccepted: true,\n            invitation: {\n              ...invitation,\n              studio: enhanceStudioWithLocationNames(invitation.studio),\n            },\n          };\n        }\n\n        if (\n          invitation.status === \"EXPIRED\" ||\n          invitation.expiresAt < new Date()\n        ) {\n          // Update status to expired if it's not already\n          if (invitation.status !== \"EXPIRED\") {\n            await ctx.db.studioInvitation.update({\n              where: { id: invitation.id },\n              data: { status: \"EXPIRED\" },\n            });\n          }\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Return validated invitation with enhanced studio data\n        return {\n          valid: true,\n          invitation: {\n            ...invitation,\n            studio: enhanceStudioWithLocationNames(invitation.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Validate invitation error:\", error);\n        throw new TRPCError({\n          code: \"BAD_REQUEST\",\n          message: \"Invalid invitation link\",\n        });\n      }\n    }),\n\n  // Update acceptInvitationWithLink procedure\n  acceptInvitationWithLink: authedProcedure\n    .input(\n      z.object({\n        token: z.string().min(1, \"Token is required\"),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        // Verify JWT token\n        const tokenData = await verifyJWT(input.token);\n\n        // Early return for invalid token data\n        if (!tokenData) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation token\",\n          });\n        }\n\n        // Validate token contents\n        if (\n          typeof tokenData.id !== \"string\" ||\n          typeof tokenData.studioId !== \"string\" ||\n          tokenData.type !== \"studio-invitation\"\n        ) {\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid invitation format\",\n          });\n        }\n\n        // Find the invitation\n        const invitation = await ctx.db.studioInvitation.findUnique({\n          where: {\n            id: tokenData.id,\n            studioId: tokenData.studioId,\n            status: \"PENDING\",\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (!invitation) {\n          throw new TRPCError({\n            code: \"NOT_FOUND\",\n            message: \"Invitation not found or already used\",\n          });\n        }\n\n        // Check if expired\n        if (invitation.expiresAt < new Date()) {\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: { status: \"EXPIRED\" },\n          });\n\n          throw new TRPCError({\n            code: \"BAD_REQUEST\",\n            message: \"Invitation has expired\",\n          });\n        }\n\n        // Check if user is already a member\n        const existingMembership = await ctx.db.studioMember.findUnique({\n          where: {\n            profileId_studioId: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n            },\n          },\n          include: {\n            studio: true,\n          },\n        });\n\n        if (existingMembership) {\n          // Update invitation status\n          await ctx.db.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return {\n            status: \"already_member\",\n            membership: {\n              ...existingMembership,\n              studio: enhanceStudioWithLocationNames(existingMembership.studio),\n            },\n          };\n        }\n\n        // Create new membership in a transaction\n        const result = await ctx.db.$transaction(async (tx) => {\n          // Add user to studio\n          const membership = await tx.studioMember.create({\n            data: {\n              profileId: ctx.profile.id,\n              studioId: invitation.studioId,\n              role: invitation.role,\n            },\n            include: {\n              studio: true,\n              profile: true,\n            },\n          });\n\n          // Update invitation status\n          await tx.studioInvitation.update({\n            where: { id: invitation.id },\n            data: {\n              status: \"ACCEPTED\",\n            },\n          });\n\n          return membership;\n        });\n\n        return {\n          status: \"accepted\",\n          membership: {\n            ...result,\n            studio: enhanceStudioWithLocationNames(result.studio),\n          },\n        };\n      } catch (error) {\n        if (error instanceof TRPCError) {\n          throw error;\n        }\n\n        console.error(\"Accept invitation error:\", error);\n        throw new TRPCError({\n          code: \"INTERNAL_SERVER_ERROR\",\n          message: \"Failed to accept invitation\",\n          cause: error,\n        });\n      }\n    }),\n});\n```\n\n 'authUser' is declared here.\nwhy im getting this error?\nI see the issue. The problem is that even though you've added the correct output schema using `.output(z.array(...))` for the `getMembers` procedure, there's likely a type initialization issue with the `authUser` property.\n\nThe error \"authUser is declared here\" suggests that TypeScript recognizes the property exists in the type definition, but there might be an inconsistency in how it's being used or initialized.\n\nLet's fix the issue:\n\n1. First, let me explain why this is happening: \n   - You defined the output type correctly with the Zod schema\n   - But in the implementation, when you return `members` in the error case (`if (error)`), those members don't have the `authUser` property yet\n\n2. The fix is to ensure we always return objects with the same shape:\n\n```ts\n// In the getMembers procedure, update the error handling:\n\nif (error) {\n  console.error(\"Failed to fetch auth users:\", error.message);\n  // Return members with null authUser property to maintain consistent shape\n  return members.map(member => ({\n    ...member,\n    authUser: null\n  }));\n}\n```\n\nThis ensures that even in the error case, we're still returning objects with the same shape as specified in the output schema.\n\nWhen using your updated code in `page.tsx`, you should now be able to access the `authUser` property without type errors.\n\nTo use it in your component:\n\n```tsx\n// In your ProfileContent component:\nasync function ProfileContent() {\n  // Get the current user profile with studio memberships\n  const profile = await api.profile.getCurrent();\n  const studioId = profile.studioMembers[0]?.studio?.id ?? \"\";\n  const choreographers = studioId\n    ? await api.studio.getMembers({\n        role: \"CHOREOGRAPHER\",\n        studioId,\n      })\n    : [];\n\n  // Now you can safely access choreographers.authUser\n  const choreographerEmails = choreographers.map(c => c.authUser?.email).filter(Boolean);\n  console.log('Choreographer emails:', choreographerEmails);\n\n  // Rest of component...\n}\n```\n\nThe key is to maintain type consistency between what you declare in the `.output()` schema and what you actually return from the procedure.\ndiagnostics\ndance-book-app/src/server/api/routers/studio.ts\n```typescript\n        })\n      ))\n    .query(async ({ ctx, input }) => {\n// error: Argument of type '({ ctx, input }: ProcedureResolverOptions<TRPCContext, object, { db: DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { $allModels: { paginate: () => Paginator<{ pages: { limit: number; includePageCount: true; }; }>; }; ... 6 more ...; studioInvitation: { ...; }; }; query: {}; client: {}; }, Pr...' is not assignable to parameter of type 'ProcedureResolver<TRPCContext, object, { db: DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { $allModels: { paginate: () => Paginator<{ pages: { limit: number; includePageCount: true; }; }>; }; ... 6 more ...; studioInvitation: { ...; }; }; query: {}; client: {}; }, PrismaClientOptions>, Type...'.\n//          Type 'Promise<({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]>' is not assignable to type 'MaybePromise<{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }[]>'.\n//            Type 'Promise<({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]>' is not assignable to type 'Promise<{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }[]>'.\n//              Type '({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]' is not assignable to type '{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: \n      const whereConditions: Prisma.StudioMemberWhereInput = {\n        studioId: input.studioId,\n```\n\ncan you fix the error \nThe error is happening because the `.output()` schema doesn't match what your procedure returns. Specifically, when there's an error fetching auth users, you're returning the `members` array without adding the `authUser` property.\n\nHere's how to fix it:\n\n```ts\ngetMembers: authedProcedure\n  .input(\n    z.object({\n      studioId: z.string().uuid(),\n      role: z.enum([\"OWNER\", \"ADMIN\", \"CHOREOGRAPHER\", \"STAFF\"]).optional(),\n    }),\n  )\n  .query(async ({ ctx, input }) => {\n    const whereConditions: Prisma.StudioMemberWhereInput = {\n      studioId: input.studioId,\n    };\n\n    if (input.role) {\n      whereConditions.role = input.role;\n    }\n\n    try {\n      const members = await ctx.db.studioMember.findMany({\n        where: whereConditions,\n        include: {\n          profile: true,\n        },\n        orderBy: [{ role: \"asc\" }, { createdAt: \"asc\" }],\n      });\n\n      type AuthUser = {\n        id: string;\n        email: string;\n        email_confirmed_at: string | null;\n        user_metadata: Record<string, unknown>;\n      };\n\n      // Create admin client for accessing auth data\n      const supabase = await createClient({ isAdmin: true });\n\n      // Get all auth IDs from member profiles\n      const authIds = members.map((member) => member.profile.authId);\n\n      // Query all users at once\n      const { data: authUsers, error } =\n        await supabase.auth.admin.listUsers();\n\n      // Initialize membersWithAuthData with null authUser\n      let membersWithAuthData = members.map(member => ({\n        ...member,\n        authUser: null as AuthUser | null\n      }));\n\n      if (!error && authUsers) {\n        // Filter to only the users we need\n        const relevantAuthUsers = authUsers.users.filter((user) =>\n          authIds.includes(user.id),\n        );\n\n        // Create a map for quick lookups\n        const authUserMap = new Map<string, AuthUser>();\n        relevantAuthUsers.forEach((user) => {\n          authUserMap.set(user.id, {\n            id: user.id,\n            email: user.email ?? \"\",\n            email_confirmed_at: user.email_confirmed_at ?? \"\",\n            user_metadata: user.user_metadata || {},\n          });\n        });\n\n        // Combine member data with auth user data\n        membersWithAuthData = members.map((member) => {\n          const authUser = authUserMap.get(member.profile.authId) ?? null;\n          return {\n            ...member,\n            authUser,\n          };\n        });\n      } else if (error) {\n        console.error(\"Failed to fetch auth users:\", error.message);\n      }\n\n      return membersWithAuthData;\n    } catch (error) {\n      throw new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        message: \"Failed to retrieve studio members\",\n        cause: error,\n      });\n    }\n  })\n  .output(z.array(\n    z.object({\n      id: z.string(),\n      createdAt: z.date(),\n      updatedAt: z.date(),\n      role: z.string(),\n      studioId: z.string(),\n      profileId: z.string(),\n      profile: z.object({\n        id: z.string(),\n        authId: z.string(),\n        createdAt: z.date(),\n        updatedAt: z.date(),\n      }),\n      authUser: z.object({\n        id: z.string(),\n        email: z.string(),\n        email_confirmed_at: z.string().nullable(),\n        user_metadata: z.record(z.unknown()),\n      }).nullable(),\n    })\n  )),\n```\n\nThe key changes:\n\n1. Moved the `.output()` after the `.query()` function for better readability (this doesn't affect the behavior)\n2. Always initialize the `membersWithAuthData` array with the correct shape (including null `authUser` property)\n3. Only update the auth user data if there's no error\n4. Return the properly shaped data in all cases\n\nThis ensures that the return type always matches the output schema, fixing the TypeScript error.\ni think .output will not fix the error ","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":790}}},{"id":{"replica_id":0,"value":61},"start":50895,"metadata":{"role":"assistant","status":"Canceled","timestamp":{"replica_id":0,"value":791}}},{"id":{"replica_id":0,"value":62},"start":55215,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":792}}},{"id":{"replica_id":0,"value":130},"start":55254,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":793}}},{"id":{"replica_id":0,"value":171},"start":55276,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":794}}},{"id":{"replica_id":0,"value":172},"start":56903,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":795}}},{"id":{"replica_id":0,"value":283},"start":56977,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":796}}},{"id":{"replica_id":0,"value":284},"start":59500,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":797}}},{"id":{"replica_id":0,"value":370},"start":91782,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":798}}},{"id":{"replica_id":0,"value":425},"start":91809,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":799}}},{"id":{"replica_id":0,"value":426},"start":93928,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":800}}},{"id":{"replica_id":0,"value":566},"start":96227,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":801}}},{"id":{"replica_id":0,"value":567},"start":99981,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":802}}}],"summary":"I'll create the Choreographer Invite Dialog component for you now. This component is missing from your profile page and needs to be implemented to allow inviting choreographers to the studio.","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":18616},"icon":"File","label":"dance-book-app/src/app/(private)/profile/page.tsx","metadata":{"path":"dance-book-app/src/app/(private)/profile/page.tsx"}},{"range":{"start":18617,"end":50237},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":59500,"end":91751},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":{"path":"dance-book-app/src/server/api/routers/studio.ts"}},{"range":{"start":93928,"end":96203},"icon":"Warning","label":"Diagnostics: 1 errors","metadata":null},{"range":{"start":93940,"end":96202},"icon":"File","label":"dance-book-app/src/server/api/routers/studio.ts","metadata":null},{"range":{"start":93988,"end":96202},"icon":"XCircle","label":"Argument of type '({ ctx, input }: ProcedureResolverOptions<TRPCContext, object, { db: DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { $allModels: { paginate: () => Paginator<{ pages: { limit: number; includePageCount: true; }; }>; }; ... 6 more ...; studioInvitation: { ...; }; }; query: {}; client: {}; }, Pr...' is not assignable to parameter of type 'ProcedureResolver<TRPCContext, object, { db: DynamicClientExtensionThis<TypeMap<InternalArgs & { result: {}; model: { $allModels: { paginate: () => Paginator<{ pages: { limit: number; includePageCount: true; }; }>; }; ... 6 more ...; studioInvitation: { ...; }; }; query: {}; client: {}; }, PrismaClientOptions>, Type...'.\n  Type 'Promise<({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]>' is not assignable to type 'MaybePromise<{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }[]>'.\n    Type 'Promise<({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]>' is not assignable to type 'Promise<{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }[]>'.\n      Type '({ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; })[]' is not assignable to type '{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }[]'.\n        Property 'authUser' is missing in type '{ profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; } & { studioId: string; id: string; createdAt: Date; updatedAt: Date; profileId: string; role: StudioRole; }' but required in type '{ studioId: string; id: string; createdAt: Date; updatedAt: Date; profile: { id: string; createdAt: Date; updatedAt: Date; authId: string; }; profileId: string; role: string; authUser: { ...; } | null; }'.","metadata":null}]}