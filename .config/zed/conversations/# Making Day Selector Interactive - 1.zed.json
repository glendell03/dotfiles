{"id":"1a303bb6-0f8d-4ff3-a94a-744808989431","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n\n    You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.\n    \n        ### Objective\n        - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.\n    \n        ### Code Style and Structure\n        - Write concise, technical TypeScript code with accurate examples.\n        - Use functional and declarative programming patterns; avoid classes.\n        - Favor iteration and modularization over code duplication.\n        - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).\n        - Structure files with exported components, subcomponents, helpers, static content, and types.\n        - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).\n    \n        ### Optimization and Best Practices\n        - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.\n        - Implement dynamic imports for code splitting and optimization.\n        - Use responsive design with a mobile-first approach.\n        - Optimize images: use WebP format, include size data, implement lazy loading.\n    \n        ### Error Handling and Validation\n        - Prioritize error handling and edge cases:\n          - Use early returns for error conditions.\n          - Implement guard clauses to handle preconditions and invalid states early.\n          - Use custom error types for consistent error handling.\n    \n        ### UI and Styling\n        - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.\n        - Implement consistent design and responsive patterns across platforms.\n    \n        ### State Management and Data Fetching\n        - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.\n        - Implement validation using Zod for schema validation.\n    \n        ### Security and Performance\n        - Implement proper error handling, user input validation, and secure coding practices.\n        - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.\n    \n        ### Testing and Documentation\n        - Write unit tests for components using Jest and React Testing Library.\n        - Provide clear and concise comments for complex logic.\n        - Use JSDoc comments for functions and components to improve IDE intellisense.\n    \n        ### Methodology\n        1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.\n        2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.\n        3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.\n    \n        **Process**:\n        1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.\n        2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.\n        3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.\n        4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.\n        5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.\n        \n```tsx dance-book-app/src/components/calendar/day-selector.tsx\n\"use client\";\nimport { useState } from \"react\";\nimport { format, addDays, subDays } from \"date-fns\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport { cn } from \"~/lib/utils\";\n\nconst DaySelector = () => {\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n\n  const days = Array.from({ length: 5 }, (_, i) => {\n    const date =\n      i - 3 < 0\n        ? subDays(selectedDate, Math.abs(i - 3))\n        : addDays(selectedDate, i - 3);\n    return date;\n  });\n\n  const handlePrevDay = () => {\n    setSelectedDate(subDays(selectedDate, 1));\n  };\n\n  const handleNextDay = () => {\n    setSelectedDate(addDays(selectedDate, 1));\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-4xl px-4 py-8\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-3xl font-bold text-gray-800\">\n          {format(selectedDate, \"MMMM yyyy\")}\n        </h2>\n      </div>\n\n      <div className=\"flex w-full items-center justify-between gap-2\">\n        {days.map((date, index) => {\n          const isSelected = index === 2;\n\n          if (isSelected) {\n            return (\n              <div key={date.toString()} className=\"flex items-center gap-1\">\n                <Button\n                  onClick={handlePrevDay}\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-14 w-14 rounded-full text-gray-700\"\n                >\n                  <ChevronLeftIcon className=\"h-6 w-6\" />\n                </Button>\n\n                <div\n                  className={cn(\n                    \"flex h-20 w-20 flex-col items-center justify-center rounded-full\",\n                    \"bg-black font-bold text-white\",\n                  )}\n                >\n                  <span className=\"text-3xl\">{format(date, \"d\")}</span>\n                  <span className=\"text-xs uppercase\">{format(date, \"E\")}</span>\n                </div>\n\n                <Button\n                  onClick={handleNextDay}\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-14 w-14 rounded-full text-gray-700\"\n                >\n                  <ChevronRightIcon className=\"h-6 w-6\" />\n                </Button>\n              </div>\n            );\n          }\n\n          return (\n            <div\n              key={date.toString()}\n              className={cn(\n                \"flex h-20 w-20 flex-col items-center justify-center rounded-full\",\n                \"font-medium text-gray-500\",\n              )}\n            >\n              <span className=\"text-3xl\">{format(date, \"d\")}</span>\n              <span className=\"text-xs uppercase\">{format(date, \"E\")}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DaySelector;\n```\n\nin this component can we make the day selectable when i click on it, it will be the selected date\nHere's an improved version of your day selector component that makes each day clickable:\n\n```tsx\n\"use client\";\nimport { useState } from \"react\";\nimport { format, addDays, subDays } from \"date-fns\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport { Button } from \"~/components/ui/button\";\nimport { cn } from \"~/lib/utils\";\n\ntype DaySelectorProps = {\n  onDateChange?: (date: Date) => void;\n  initialDate?: Date;\n};\n\nconst DaySelector = ({\n  onDateChange,\n  initialDate = new Date(),\n}: DaySelectorProps) => {\n  const [currentDate, setCurrentDate] = useState<Date>(initialDate);\n  const [selectedDay, setSelectedDay] = useState<number>(2); // Middle day (today)\n\n  const days = Array.from({ length: 5 }, (_, i) => {\n    return i - 2 < 0\n      ? subDays(currentDate, Math.abs(i - 2))\n      : addDays(currentDate, i - 2);\n  });\n\n  const handlePrevDay = () => {\n    setCurrentDate(subDays(currentDate, 1));\n    // Notify parent component if callback provided\n    onDateChange?.(subDays(days[selectedDay], 1));\n  };\n\n  const handleNextDay = () => {\n    setCurrentDate(addDays(currentDate, 1));\n    // Notify parent component if callback provided\n    onDateChange?.(addDays(days[selectedDay], 1));\n  };\n\n  const handleDayClick = (index: number) => {\n    // Update selected day\n    setSelectedDay(index);\n    // Notify parent component if callback provided\n    onDateChange?.(days[index]);\n  };\n\n  return (\n    <div className=\"mx-auto w-full max-w-4xl px-4 py-8\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-3xl font-bold text-gray-800\">\n          {format(days[selectedDay], \"MMMM yyyy\")}\n        </h2>\n      </div>\n\n      <div className=\"flex w-full items-center justify-between gap-2\">\n        <Button\n          onClick={handlePrevDay}\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-14 w-14 shrink-0 rounded-full text-gray-700\"\n          aria-label=\"Previous day\"\n        >\n          <ChevronLeftIcon className=\"h-6 w-6\" />\n        </Button>\n\n        <div className=\"flex flex-1 justify-center gap-2\">\n          {days.map((date, index) => {\n            const isSelected = index === selectedDay;\n\n            return (\n              <button\n                key={date.toString()}\n                onClick={() => handleDayClick(index)}\n                className={cn(\n                  \"flex h-20 w-20 flex-col items-center justify-center rounded-full transition-all\",\n                  isSelected\n                    ? \"bg-black font-bold text-white\"\n                    : \"font-medium text-gray-500 hover:bg-gray-100\"\n                )}\n                aria-pressed={isSelected}\n                aria-label={format(date, \"EEEE, MMMM d, yyyy\")}\n              >\n                <span className=\"text-3xl\">{format(date, \"d\")}</span>\n                <span className=\"text-xs uppercase\">{format(date, \"E\")}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        <Button\n          onClick={handleNextDay}\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-14 w-14 shrink-0 rounded-full text-gray-700\"\n          aria-label=\"Next day\"\n        >\n          <ChevronRightIcon className=\"h-6 w-6\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default DaySelector;\n```\n\nKey improvements:\n1. Made each day clickable by converting them to buttons\n2. Added proper state management with `selectedDay` index\n3. Added props to allow parent components to get date changes (`onDateChange`)\n4. Improved layout and spacing\n5. Added proper accessibility attributes\n6. Simplified navigation controls by moving them outside the days array\n7. Added hover state for non-selected days\n8. Added type definitions for component props\n\nThis component now lets you click any day to select it, while still allowing navigation with arrow buttons.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":86}}},{"id":{"replica_id":0,"value":71},"start":8289,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":87}}},{"id":{"replica_id":0,"value":72},"start":12114,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":88}}}],"summary":"# Making Day Selector Interactive","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":5325},"icon":"Library","label":"next-tw-zod-zustand-shad","metadata":null},{"range":{"start":5326,"end":8190},"icon":"File","label":"dance-book-app/src/components/calendar/day-selector.tsx","metadata":{"path":"dance-book-app/src/components/calendar/day-selector.tsx"}}]}