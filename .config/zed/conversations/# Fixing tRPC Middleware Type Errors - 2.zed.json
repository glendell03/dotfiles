{"id":"10260715-3c6d-447a-83dd-a0eaddc9cec8","zed":"context","version":"0.4.0","text":"\nDO NOT GIVE ME HIGH-LEVEL THEORY. IF I ASK FOR A FIX OR EXPLANATION, I WANT ACTUAL CODE OR EXPLANATION!!! I DON'T WANT \"Here's how you can blablabla\"\n\nBe casual unless otherwise specified\nBe terse and concise\nSuggest solutions that I didn’t think about—anticipate my needs\nTreat me as an expert\nBe accurate and thorough\nGive the answer immediately. Provide detailed explanations and restate my query in your own words if necessary after giving the answer\nValue good arguments over authorities, the source is irrelevant\nConsider new technologies and contrarian ideas, not just conventional wisdom\nYou may use high levels of speculation or prediction, just flag it for me\nNo moral lectures\nDiscuss safety only when it's crucial and non-obvious\nIf your content policy is an issue, provide the closest acceptable response and explain the content policy issue afterward\nCite sources whenever possible at the end, not inline\nNo need to mention your knowledge cutoff\nNo need to disclose you're an AI\nPlease respect my prettier preferences when you provide code\nSplit into multiple responses if one response isn't enough to answer the question\nFocus on readability over being performant\nFully implement all requested functionality\nLeave NO todos, placeholders, or missing pieces\n\n\n    You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.\n    \n        ### Objective\n        - Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.\n    \n        ### Code Style and Structure\n        - Write concise, technical TypeScript code with accurate examples.\n        - Use functional and declarative programming patterns; avoid classes.\n        - Favor iteration and modularization over code duplication.\n        - Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).\n        - Structure files with exported components, subcomponents, helpers, static content, and types.\n        - Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).\n    \n        ### Optimization and Best Practices\n        - Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.\n        - Implement dynamic imports for code splitting and optimization.\n        - Use responsive design with a mobile-first approach.\n        - Optimize images: use WebP format, include size data, implement lazy loading.\n    \n        ### Error Handling and Validation\n        - Prioritize error handling and edge cases:\n          - Use early returns for error conditions.\n          - Implement guard clauses to handle preconditions and invalid states early.\n          - Use custom error types for consistent error handling.\n    \n        ### UI and Styling\n        - Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.\n        - Implement consistent design and responsive patterns across platforms.\n    \n        ### State Management and Data Fetching\n        - Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.\n        - Implement validation using Zod for schema validation.\n    \n        ### Security and Performance\n        - Implement proper error handling, user input validation, and secure coding practices.\n        - Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.\n    \n        ### Testing and Documentation\n        - Write unit tests for components using Jest and React Testing Library.\n        - Provide clear and concise comments for complex logic.\n        - Use JSDoc comments for functions and components to improve IDE intellisense.\n    \n        ### Methodology\n        1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.\n        2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.\n        3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.\n    \n        **Process**:\n        1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.\n        2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.\n        3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.\n        4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.\n        5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.\n        \n```ts dance-book-app/src/server/api/trpc.ts\n/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { StudioRole } from \"@prisma/client\";\nimport { initTRPC, TRPCError } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\nimport { createClient } from \"~/lib/supabase/server\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\nconst authMiddleware = t.middleware(async ({ ctx, next }) => {\n  const supabase = createClient();\n  const {\n    data: { user },\n  } = await (await supabase).auth.getUser();\n\n  if (!user) {\n    throw new TRPCError({\n      code: \"UNAUTHORIZED\",\n      message: \"User not found\",\n    });\n  }\n\n  const profile = await ctx.db.profile.findUnique({\n    where: { authId: user.id },\n  });\n\n  if (!profile)\n    throw new TRPCError({\n      code: \"NOT_FOUND\",\n      message: \"Profile not found\",\n    });\n\n  return next({\n    ctx: {\n      ...ctx,\n      user,\n      profile,\n    },\n  });\n});\n\n// Studio role middleware factory - ensures user has required role for a studio\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n    if (!ctx.user || !ctx.profile) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n\n    // Extract studioId from input\n    const inputObj = rawInput as Record<string, unknown>;\n    const studioId = inputObj.studioId as string | undefined;\n\n    if (!studioId) {\n      throw new TRPCError({\n        code: \"BAD_REQUEST\",\n        message: \"studioId is required for role-based operations\",\n      });\n    }\n\n    // Check if user has the required role for this studio\n    const membership = await ctx.db.studioMember.findUnique({\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n          studioId,\n        },\n      },\n    });\n\n    if (!membership || !allowedRoles.includes(membership.role)) {\n      throw new TRPCError({\n        code: \"FORBIDDEN\",\n        message: \"You don't have the required role for this operation\",\n      });\n    }\n\n    return next({\n      ctx: {\n        ...ctx,\n        studioId,\n        studioMembership: membership,\n      },\n    });\n  });\n};\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\nexport const authedProcedure = publicProcedure.use(authMiddleware);\n\n// Role-based procedures for studios\nexport const ownerProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER]),\n);\n\nexport const adminProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER, StudioRole.ADMIN]),\n);\n\nexport const instructorProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.INSTRUCTOR,\n  ]),\n);\n\nexport const staffProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.INSTRUCTOR,\n    StudioRole.STAFF,\n  ]),\n);\n```\n\ndiagnostics\ndance-book-app/src/server/api/trpc.ts\n```typescript\n// Studio role middleware factory - ensures user has required role for a studio\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n// error: Property 'rawInput' does not exist on type '{ ctx: { headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }; type: \"query\" | \"mutation\" | \"subscription\"; ... 5 more ...; next: { ...; }; }'.\n    if (!ctx.user || !ctx.profile) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n```\n```typescript\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n    if (!ctx.user || !ctx.profile) {\n// error: Property 'user' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n```\n```typescript\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n    if (!ctx.user || !ctx.profile) {\n// error: Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Unsafe assignment of an error typed value.\n          studioId,\n        },\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n          studioId,\n        },\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Unsafe member access .id on an `error` typed value.\n          studioId,\n        },\n```\ndance-book-app/src/server/api/trpc.ts\n```typescript\n// Studio role middleware factory - ensures user has required role for a studio\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n// error: Property 'rawInput' does not exist on type '{ ctx: { headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }; type: \"query\" | \"mutation\" | \"subscription\"; ... 5 more ...; next: { ...; }; }'.\n    if (!ctx.user || !ctx.profile) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n```\n```typescript\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n    if (!ctx.user || !ctx.profile) {\n// error: Property 'user' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n```\n```typescript\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, next, rawInput }) => {\n    if (!ctx.user || !ctx.profile) {\n// error: Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Unsafe assignment of an error typed value.\n          studioId,\n        },\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.\n          studioId,\n        },\n```\n```typescript\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n// error: Unsafe member access .id on an `error` typed value.\n          studioId,\n        },\n```\n\nhow do we handle the user and profiles \nHere's the fixed version of the tRPC middleware:\n\n```ts\n/**\n * 1. CONTEXT\n */\nexport type AuthUser = {\n  user: { id: string };\n  profile: { id: string };\n}\n\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  // Auth check happens in middleware, not here\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n// Middleware definitions\nconst authMiddleware = t.middleware(async ({ ctx, next }) => {\n  const supabase = createClient();\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new TRPCError({\n      code: \"UNAUTHORIZED\",\n      message: \"User not found\",\n    });\n  }\n\n  const profile = await ctx.db.profile.findUnique({\n    where: { authId: user.id },\n  });\n\n  if (!profile)\n    throw new TRPCError({\n      code: \"NOT_FOUND\",\n      message: \"Profile not found\",\n    });\n\n  return next({\n    ctx: {\n      ...ctx,\n      user,\n      profile,\n    },\n  });\n});\n\n// Studio role middleware factory - ensures user has required role for a studio\nconst createStudioRoleMiddleware = (allowedRoles: StudioRole[]) => {\n  return t.middleware(async ({ ctx, input, next }) => {\n    // These properties exist because we're chaining after authMiddleware\n    if (!ctx.user || !ctx.profile) {\n      throw new TRPCError({ code: \"UNAUTHORIZED\" });\n    }\n\n    // Type assertion for input to handle studioId\n    const inputObj = input as { studioId?: string };\n    const studioId = inputObj.studioId;\n\n    if (!studioId) {\n      throw new TRPCError({\n        code: \"BAD_REQUEST\",\n        message: \"studioId is required for role-based operations\",\n      });\n    }\n\n    // Check if user has the required role for this studio\n    const membership = await ctx.db.studioMember.findUnique({\n      where: {\n        profileId_studioId: {\n          profileId: ctx.profile.id,\n          studioId,\n        },\n      },\n    });\n\n    if (!membership || !allowedRoles.includes(membership.role)) {\n      throw new TRPCError({\n        code: \"FORBIDDEN\",\n        message: \"You don't have the required role for this operation\",\n      });\n    }\n\n    return next({\n      ctx: {\n        ...ctx,\n        studioId,\n        studioMembership: membership,\n      },\n    });\n  });\n};\n\n// Define procedure types with proper typing\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n\nexport const authedProcedure = publicProcedure.use(authMiddleware);\n\n// Role-based procedures for studios\nexport const ownerProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER]),\n);\n\nexport const adminProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([StudioRole.OWNER, StudioRole.ADMIN]),\n);\n\nexport const instructorProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.INSTRUCTOR,\n  ]),\n);\n\nexport const staffProcedure = authedProcedure.use(\n  createStudioRoleMiddleware([\n    StudioRole.OWNER,\n    StudioRole.ADMIN,\n    StudioRole.INSTRUCTOR,\n    StudioRole.STAFF,\n  ]),\n);\n```\n\nThe main problems and changes made:\n\n1. Changed `rawInput` to `input` which is the correct property name for middleware in tRPC\n2. Used type assertion on the input for getting `studioId`\n3. Added a type definition for AuthUser (though you can expand this based on your actual user/profile data)\n4. The `authMiddleware` augments the context with user and profile, which is then available in chained middlewares\n5. Fixed the error with accessing `ctx.user` and `ctx.profile` by ensuring proper context augmentation\n\nMake sure your actual user and profile objects match the structure you're trying to access, and adjust the types accordingly.\n```ts dance-book-app/src/server/api/trpc.ts:45-48\n// Excerpt from: \n interface ICreateTRPCContext extends typeof createTRPCContext {\n   user?: SupabaseAuthSchema;\n   profile?: Prisma.Profile\n}\n```\ncan you please fix this\nHere's the corrected implementation for the context type:\n\n```ts\nimport { type PrismaClient } from \"@prisma/client\";\nimport { type User } from \"@supabase/supabase-js\";\n\n/**\n * 1. CONTEXT\n */\nexport interface CreateTRPCContextOptions {\n  headers: Headers;\n  db: PrismaClient;\n  user?: User;\n  profile?: { id: string; [key: string]: any };\n}\n\nexport const createTRPCContext = async (opts: { headers: Headers }): Promise<CreateTRPCContextOptions> => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n */\nconst t = initTRPC.context<CreateTRPCContextOptions>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n// Middleware definitions\nconst authMiddleware = t.middleware(async ({ ctx, next }) => {\n  const supabase = createClient();\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (!user) {\n    throw new TRPCError({\n      code: \"UNAUTHORIZED\",\n      message: \"User not found\",\n    });\n  }\n\n  const profile = await ctx.db.profile.findUnique({\n    where: { authId: user.id },\n  });\n\n  if (!profile)\n    throw new TRPCError({\n      code: \"NOT_FOUND\",\n      message: \"Profile not found\",\n    });\n\n  return next({\n    ctx: {\n      ...ctx,\n      user,\n      profile,\n    },\n  });\n});\n```\n\nThis implementation:\n\n1. Defines a proper `CreateTRPCContextOptions` interface that includes all the properties we need\n2. Updates the context type in `t.initTRPC.context<CreateTRPCContextOptions>()`\n3. Updates the return type of `createTRPCContext` to match the interface\n4. Properly types the user and profile properties that will be added by middleware\n\nMake sure to add the proper imports for the Supabase User type and Prisma Client at the top of the file. If you're using a custom schema for your Supabase auth, you can replace the `User` type with your custom type.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":161}}},{"id":{"replica_id":0,"value":68},"start":15264,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":162}}},{"id":{"replica_id":0,"value":69},"start":19237,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":163}}},{"id":{"replica_id":0,"value":131},"start":19458,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":164}}},{"id":{"replica_id":0,"value":132},"start":21461,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":165}}}],"summary":"# Fixing tRPC Middleware Type Errors","slash_command_output_sections":[{"range":{"start":0,"end":1276},"icon":"Library","label":"Default","metadata":null},{"range":{"start":1,"end":1275},"icon":"Library","label":"General","metadata":null},{"range":{"start":1277,"end":5325},"icon":"Library","label":"next-tw-zod-zustand-shad","metadata":null},{"range":{"start":5326,"end":11092},"icon":"File","label":"dance-book-app/src/server/api/trpc.ts","metadata":{"path":"dance-book-app/src/server/api/trpc.ts"}},{"range":{"start":11093,"end":15223},"icon":"Warning","label":"Diagnostics: 6 errors","metadata":null},{"range":{"start":11105,"end":13163},"icon":"File","label":"dance-book-app/src/server/api/trpc.ts","metadata":null},{"range":{"start":11143,"end":11703},"icon":"XCircle","label":"Property 'rawInput' does not exist on type '{ ctx: { headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }; type: \"query\" | \"mutation\" | \"subscription\"; ... 5 more ...; next: { ...; }; }'.","metadata":null},{"range":{"start":11704,"end":12099},"icon":"XCircle","label":"Property 'user' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":12100,"end":12498},"icon":"XCircle","label":"Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":12499,"end":12682},"icon":"XCircle","label":"Unsafe assignment of an error typed value.","metadata":null},{"range":{"start":12683,"end":12970},"icon":"XCircle","label":"Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":12971,"end":13163},"icon":"XCircle","label":"Unsafe member access .id on an `error` typed value.","metadata":null},{"range":{"start":13164,"end":15222},"icon":"File","label":"dance-book-app/src/server/api/trpc.ts","metadata":null},{"range":{"start":13202,"end":13762},"icon":"XCircle","label":"Property 'rawInput' does not exist on type '{ ctx: { headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }; type: \"query\" | \"mutation\" | \"subscription\"; ... 5 more ...; next: { ...; }; }'.","metadata":null},{"range":{"start":13763,"end":14158},"icon":"XCircle","label":"Property 'user' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":14159,"end":14557},"icon":"XCircle","label":"Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":14558,"end":14741},"icon":"XCircle","label":"Unsafe assignment of an error typed value.","metadata":null},{"range":{"start":14742,"end":15029},"icon":"XCircle","label":"Property 'profile' does not exist on type '{ headers: Headers; db: PrismaClient<{ log: (\"query\" | \"warn\" | \"error\")[]; }, never, DefaultArgs>; }'.","metadata":null},{"range":{"start":15030,"end":15222},"icon":"XCircle","label":"Unsafe member access .id on an `error` typed value.","metadata":null},{"range":{"start":19237,"end":19433},"icon":"TextSnippet","label":"dance-book-app/src/server/api/trpc.ts, Lines 45 to 48","metadata":null}]}