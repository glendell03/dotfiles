# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, modulesPath, ... }:

{
  imports =
    [
      # Include the default lxd configuration.
      "${modulesPath}/virtualisation/lxc-container.nix"
      # Include the container-specific autogenerated configuration.
      ./incus.nix
      # Include the OrbStack-specific configuration.
      ./orbstack.nix
    ];

  users.users.glendell = {
    uid = 501;
    # extraGroups = [ "wheel" ];

    # simulate isNormalUser, but with an arbitrary UID
    isSystemUser = true;
    group = "users";
    createHome = true;
    home = "/home/glendell";
    homeMode = "700";
    # useDefaultShell = true;
    shell = pkgs.fish;
    extraGroups = ["wheel" "docker"]; # Add postgres group if using PostgreSQL
  };

  security.sudo.wheelNeedsPassword = false;

  # This being `true` leads to a few nasty bugs, change at your own risk!
  users.mutableUsers = false;

  time.timeZone = "Asia/Manila";

  networking = {
    dhcpcd.enable = false;
    useDHCP = false;
    useHostResolvConf = false;
  };

  systemd.network = {
    enable = true;
    networks."50-eth0" = {
      matchConfig.Name = "eth0";
      networkConfig = {
        DHCP = "ipv4";
        IPv6AcceptRA = true;
      };
      linkConfig.RequiredForOnline = "routable";
    };
  };

  # Extra certificates from OrbStack.
  security.pki.certificates = [
    ''
      -----BEGIN CERTIFICATE-----
MIICCzCCAbKgAwIBAgIQQc09rcXO2op3RkY9ytlIIDAKBggqhkjOPQQDAjBmMR0w
GwYDVQQKExRPcmJTdGFjayBEZXZlbG9wbWVudDEeMBwGA1UECwwVQ29udGFpbmVy
cyAmIFNlcnZpY2VzMSUwIwYDVQQDExxPcmJTdGFjayBEZXZlbG9wbWVudCBSb290
IENBMB4XDTI0MDkyMDA2NDY0MVoXDTM0MDkyMDA2NDY0MVowZjEdMBsGA1UEChMU
T3JiU3RhY2sgRGV2ZWxvcG1lbnQxHjAcBgNVBAsMFUNvbnRhaW5lcnMgJiBTZXJ2
aWNlczElMCMGA1UEAxMcT3JiU3RhY2sgRGV2ZWxvcG1lbnQgUm9vdCBDQTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABFm4QVRFedudmv5ndYsmo78brwEAI/gQPqur
DTBECw5Uu43jg1ex3ESbwMXOt2ltPyMvf6RkWxizBUU+Swjp1HKjQjBAMA4GA1Ud
DwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBSt5GjACbs6iy/p
Cxs3wVRNg3ntODAKBggqhkjOPQQDAgNHADBEAiAKQLG+/cgT7QHoPMYBJ8LulH/E
72PmP7vRiq1Kk/UDhAIgHtm+Poa2DcOwT3kEsfvXWiXX2DOBMxsc6EYR+U4IVHo=
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIICCzCCAbKgAwIBAgIQQc09rcXO2op3RkY9ytlIIDAKBggqhkjOPQQDAjBmMR0w
GwYDVQQKExRPcmJTdGFjayBEZXZlbG9wbWVudDEeMBwGA1UECwwVQ29udGFpbmVy
cyAmIFNlcnZpY2VzMSUwIwYDVQQDExxPcmJTdGFjayBEZXZlbG9wbWVudCBSb290
IENBMB4XDTI0MDkyMDA2NDY0MVoXDTM0MDkyMDA2NDY0MVowZjEdMBsGA1UEChMU
T3JiU3RhY2sgRGV2ZWxvcG1lbnQxHjAcBgNVBAsMFUNvbnRhaW5lcnMgJiBTZXJ2
aWNlczElMCMGA1UEAxMcT3JiU3RhY2sgRGV2ZWxvcG1lbnQgUm9vdCBDQTBZMBMG
ByqGSM49AgEGCCqGSM49AwEHA0IABFm4QVRFedudmv5ndYsmo78brwEAI/gQPqur
DTBECw5Uu43jg1ex3ESbwMXOt2ltPyMvf6RkWxizBUU+Swjp1HKjQjBAMA4GA1Ud
DwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBSt5GjACbs6iy/p
Cxs3wVRNg3ntODAKBggqhkjOPQQDAgNHADBEAiAKQLG+/cgT7QHoPMYBJ8LulH/E
72PmP7vRiq1Kk/UDhAIgHtm+Poa2DcOwT3kEsfvXWiXX2DOBMxsc6EYR+U4IVHo=
-----END CERTIFICATE-----

    ''
  ];

  # This option defines the first version of NixOS you have installed on this particular machine,
  # and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.
  #
  # Most users should NEVER change this value after the initial install, for any reason,
  # even if you've upgraded your system to a new NixOS release.
  #
  # This value does NOT affect the Nixpkgs version your packages and OS are pulled from,
  # so changing it will NOT upgrade your system - see https://nixos.org/manual/nixos/stable/#sec-upgrading for how
  # to actually do that.
  #
  # This value being lower than the current NixOS release does NOT mean your system is
  # out of date, out of support, or vulnerable.
  #
  # Do NOT change this value unless you have manually inspected all the changes it would make to your configuration,
  # and migrated your data accordingly.
  #
  # For more information, see `man configuration.nix` or https://nixos.org/manual/nixos/stable/options#opt-system.stateVersion .
  system.stateVersion = "24.11"; # Did you read the comment?

  programs.neovim = {
    enable = true;
    defaultEditor = true;
    viAlias = true;
    vimAlias = true;
  };

  programs.fish.enable = true;
  virtualisation.docker = {
    enable = true;
    rootless.enable = false; 
    enableOnBoot = true;
  }; 

  environment.systemPackages = with pkgs; [
    yazi
    neovim
    git
    nodejs_22
    pnpm
    lazygit
    openssl
    pkg-config # Required for node-gyp
    # For Prisma development
    gnumake
    gcc
  ];

  # Create an environment for development
  environment.shellInit = ''
    export PRISMA_SCHEMA_ENGINE_BINARY="${pkgs.prisma-engines}/bin/schema-engine"
    export PRISMA_QUERY_ENGINE_BINARY="${pkgs.prisma-engines}/bin/query-engine"
    export PRISMA_QUERY_ENGINE_LIBRARY="${pkgs.prisma-engines}/lib/libquery_engine.node"
    export PRISMA_INTROSPECTION_ENGINE_BINARY="${pkgs.prisma-engines}/bin/introspection-engine"
    export PRISMA_FMT_BINARY="${pkgs.prisma-engines}/bin/prisma-fmt"
    export PKG_CONFIG_PATH="${pkgs.openssl.dev}/lib/pkgconfig"
    export PRISMA_CLI_QUERY_ENGINE_TYPE="binary"
    export PRISMA_ENGINE_PROTOCOL="json"
  '';
}
